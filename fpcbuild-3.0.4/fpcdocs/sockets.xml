<?xml version="1.0" encoding="ISO-8859-1"?>
<fpdoc-descriptions>
<!--  

   $Id: sockets.xml,v 1.3 2005/04/30 22:08:57 michael Exp $ 
   This file is part of the FPC documentation. 
   Copyright (C) 1997, by Michael Van Canneyt 
 
   The FPC documentation is free text; you can redistribute it and/or 
   modify it under the terms of the GNU Library General Public License as 
   published by the Free Software Foundation; either version 2 of the 
   License, or (at your option) any later version. 
 
   The FPC Documentation is distributed in the hope that it will be useful, 
   but WITHOUT ANY WARRANTY; without even the implied warranty of 
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU 
   Library General Public License for more details. 
 
   You should have received a copy of the GNU Library General Public 
   License along with the FPC documentation; see the file COPYING.LIB.  If not, 
   write to the Free Software Foundation, Inc., 59 Temple Place - Suite 330, 
   Boston, MA 02111-1307, USA. 
 -->
<package name="rtl">
<module name="sockets">
<!-- \FPCexampledir{sockex/} -->
<short>TCP/IP Sockets functionality unit</short>
<descr>
This document describes the SOCKETS unit for Free Pascal. 
it was written for Linux by Michael Van Canneyt, and ported to Windows
by Florian Klaempfl.
</descr>

<element name="SOCK_STREAM">
<short>Type of socket: stream (connection) type socket (TCP)</short>
</element>
<element name="SOCK_DGRAM">
<short>Type of socket: datagram (conn.less) socket (UDP)</short>
</element>
<element name="SOCK_RAW">
<short>Type of socket:  raw socket</short>
</element>
<element name="SOCK_RDM">
<short>Type of socket: reliably-delivered message</short>
</element>
<element name="SOCK_SEQPACKET">
<short>Type of socket: sequential packet socket</short>
</element>
<element name="SOCK_PACKET">
<short>Type of socket: Packet</short>
</element>

<element name="AF_UNSPEC">
<short>Address family Not specified</short>
</element>
<element name="AF_UNIX">
<short>Address family Unix domain sockets</short>
</element>
<element name="AF_INET">
<short>Address family Internet IP Protocol</short>
</element>
<element name="AF_AX25">
<short>Address family Amateur Radio AX.25</short>
</element>
<element name="AF_IPX">
<short>Address family Novell IPX</short>
</element>
<element name="AF_APPLETALK">
<short>Address family Appletalk DDP</short>
</element>
<element name="AF_NETROM">
<short>Address family Amateur radio NetROM</short>
</element>
<element name="AF_BRIDGE">
<short>Address family Multiprotocol bridge</short>
</element>
<element name="AF_AAL5">
<short>Address family Reserved for Werner's ATM</short>
</element>
<element name="AF_X25">
<short>Address family Reserved for X.25 project</short>
</element>
<element name="AF_INET6">
<short>Address family IP version 6</short>
</element>
<element name="AF_MAX">
<short>Address family Maximum value</short>
</element>
<!-- constant Visibility: default -->
<element name="AF_ATMPVC">
<short>Address family: ATM PVCs</short>
</element>

<!-- constant Visibility: default -->
<element name="AF_ROSE">
<short>Address family: Amateur Radio X.25 PLP</short>
</element>

<!-- constant Visibility: default -->
<element name="AF_NETBEUI">
<short>Address family:  Reserved for 802.2LLC project</short>
</element>

<!-- constant Visibility: default -->
<element name="AF_SECURITY">
<short>Address family: Security callback pseudo AF</short>
</element>

<!-- constant Visibility: default -->
<element name="AF_KEY">
<short>Address family: PF_KEY key management API</short>
</element>

<!-- constant Visibility: default -->
<element name="AF_NETLINK">
<short>Address family: ?</short>
</element>

<!-- constant Visibility: default -->
<element name="AF_PACKET">
<short>Address family: Packet family</short>
</element>

<!-- constant Visibility: default -->
<element name="AF_ASH">
<short>Address family: Ash</short>
</element>

<!-- constant Visibility: default -->
<element name="AF_ECONET">
<short>Address family: Acorn Econet</short>
</element>

<!-- constant Visibility: default -->
<element name="AF_ATMSVC">
<short>Address family: ATM SVCs</short>
</element>

<!-- constant Visibility: default -->
<element name="AF_IRDA">
<short>Address family: IRDA sockets</short>
</element>

<!-- constant Visibility: default -->
<element name="AF_PPPOX">
<short>Address family: PPPoX sockets</short>
</element>

<!-- constant Visibility: default -->
<element name="AF_WANPIPE">
<short>Address family: Wanpipe API Sockets</short>
</element>

<!-- constant Visibility: default -->
<element name="AF_LLC">
<short>Address family: Linux LLC</short>
</element>

<!-- constant Visibility: default -->
<element name="AF_TIPC">
<short>Address family: TIPC sockets</short>
</element>

<!-- constant Visibility: default -->
<element name="AF_BLUETOOTH">
<short>Address family: Bluetooth sockets</short>
</element>

<element name="PF_UNSPEC">
<short>Protocol family: Unspecified</short>
</element>
<element name="PF_INET">
<short>Protocol family: Internet IP Protocol</short>
</element>
<element name="PF_AX25">
<short>Protocol family: Amateur Radio AX.25</short>
</element>
<element name="PF_IPX">
<short>Protocol family: Novell IPX</short>
</element>
<element name="PF_APPLETALK">
<short>Protocol family: Appletalk DDP</short>
</element>
<element name="PF_UNIX">
<short>Protocol family: Unix domain sockets</short>
</element>
<element name="PF_NETROM">
<short>Protocol family:Amateur radio NetROM</short>
</element>
<element name="PF_BRIDGE">
<short>Protocol family: Multiprotocol bridge</short>
</element>
<element name="PF_AAL5">
<short>Protocol family: Reserved for Werner's ATM</short>
</element>
<element name="PF_X25">
<short>Protocol family: Reserved for X.25 project</short>
</element>
<element name="PF_INET6">
<short>Protocol family: IP version 6</short>
</element>
<element name="PF_MAX">
<short>Protocol family: Maximum value</short>
</element>

<!-- constant Visibility: default -->
<element name="PF_ATMPVC">
<short>Protocol family: ATM PVCs</short>
</element>

<!-- constant Visibility: default -->
<element name="PF_ROSE">
<short>Protocol family: Amateur Radio X.25 PLP</short>
</element>

<!-- constant Visibility: default -->
<element name="PF_NETBEUI">
<short>Protocol family: Reserved for 802.2LLC project</short>
</element>

<!-- constant Visibility: default -->
<element name="PF_SECURITY">
<short>Protocol family: Security callback pseudo PF</short>
</element>

<!-- constant Visibility: default -->
<element name="PF_NETLINK">
<short>Protocol family: ?</short>
</element>

<!-- constant Visibility: default -->
<element name="PF_PACKET">
<short>Protocol family: Packet family</short>
</element>

<!-- constant Visibility: default -->
<element name="PF_ASH">
<short>Protocol family: Ash</short>
</element>

<!-- constant Visibility: default -->
<element name="PF_ECONET">
<short>Protocol family: Acorn Econet</short>
</element>

<!-- constant Visibility: default -->
<element name="PF_ATMSVC">
<short>Protocol family:  ATM SVCs</short>
</element>

<!-- constant Visibility: default -->
<element name="PF_IRDA">
<short>Protocol family: IRDA sockets</short>
</element>

<!-- constant Visibility: default -->
<element name="PF_PPPOX">
<short>Protocol family: PPPoX sockets</short>
</element>

<!-- constant Visibility: default -->
<element name="PF_WANPIPE">
<short>Protocol family: Wanpipe API Sockets</short>
</element>

<!-- constant Visibility: default -->
<element name="PF_LLC">
<short>Protocol family: Linux LLC</short>
</element>

<!-- constant Visibility: default -->
<element name="PF_TIPC">
<short>Protocol family: TIPC sockets</short>
</element>

<!-- constant Visibility: default -->
<element name="PF_BLUETOOTH">
<short>Protocol family: Bluetooth sockets</short>
</element>

<!-- constant Visibility: default -->
<element name="SOMAXCONN">
<short>Maximum queue length specifiable by listen.</short>
<seealso>
<link id="FPlisten"/>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="MSG_EOF">
<short>Alias for <var>MSG_FIN</var></short>
</element>

<!-- constant Visibility: default -->
<element name="INVALID_SOCKET">
<short>Invalid socket return value (for kylix compatibility)</short>
</element>

<!-- constant Visibility: default -->
<element name="SOCKET_ERROR">
<short>Socket error indication (for kylix compatibility)</short>
</element>

<!-- alias type Visibility: default -->
<element name="PInAddr">
<short>Alias for <link id="#rtl.sockets.pin_addr">pin_addr</link></short>
</element>

<!-- variable Visibility: default -->
<element name="TUnixSockAddr.family">
<short>Protocol family for unix socket</short>
</element>

<!-- variable Visibility: default -->
<element name="TUnixSockAddr.path">
<short>Filename for unix socket file</short>
</element>

<!-- constant Visibility: default -->
<element name="EsockEACCESS">
<short>Access forbidden error</short>
</element>

<!-- constant Visibility: default -->
<element name="EsockEMFILE">
<short>Error code ?</short>
</element>

<!-- constant Visibility: default -->
<element name="EsockEMSGSIZE">
<short>Wrong message size error</short>
</element>

<!-- constant Visibility: default -->
<element name="EsockENOBUFS">
<short>No buffer space available error</short>
</element>

<!-- constant Visibility: default -->
<element name="EsockENOTCONN">
<short>Not connected error</short>
</element>

<!-- constant Visibility: default -->
<element name="EsockENOTSOCK">
<short>File descriptor is not a socket error</short>
</element>

<!-- constant Visibility: default -->
<element name="EsockEPROTONOSUPPORT">
<short>Protocol not supported error</short>
</element>

<!-- constant Visibility: default -->
<element name="EsockEWOULDBLOCK">
<short>Operation would block error</short>
</element>

<element name="sockaddr">
<short>General socket adress record</short>
<descr>
<var>sockaddr</var> is used to store a general socket addres for the
<link id="FPBind"/>, <link id="FPRecv"/> and <link id="FPSend"/> calls.
</descr>
</element>
<element name="sockaddr.family">
<short>Address family</short>
</element>
<element name="sockaddr.data">
<short>Addres data</short>
</element>
<element name="sockaddr.sa_family">
<short>Address family</short>
</element>
<element name="sockaddr.sa_data">
<short>Addres data</short>
</element>
<element name="sockaddr.sin_family">
<short>Socket family</short>
</element>
<element name="sockaddr.sin_port">
<short>Socket port</short>
</element>
<element name="sockaddr.sin_addr">
<short>Socket address</short>
</element>
<element name="sockaddr.sin_zero">
<short>Padding bytes</short>
</element>

<element name="sockaddr_un">
<short>Unix socket address record.</short>
<descr>
<var>sockaddr_un</var> is used to store a UNIX socket addres for the
<link id="FPBind"/>, <link id="FPRecv"/> and <link id="FPSend"/> calls.
</descr>
</element>
<element name="sockaddr_un.sun_family">
<short>Address family</short>
</element>
<element name="sockaddr_un.sun_path">
<short>File name</short>
</element>

<element name="psockaddr_un">
<short>Pointer to <link id="#rtl.sockets.sockaddr_un">sockaddr_un</link> type.</short>
</element>


<element name="TUnixSockAddr">
<short>Alias for <link id="#rtl.sockets.sockaddr_un">sockaddr_un</link></short>
</element>




<element name="sockaddr_in">
<short>Internet socket address record</short>
<descr>
<var>sockaddr_in</var> is used to store a INET socket addres for the
<link id="FPBind"/>, <link id="FPRecv"/> and <link id="FPSend"/> calls.
</descr>
</element>

<element name="psockaddr_in">
<short>Pointer to <link id="#rtl.sockets.sockaddr_in">sockaddr_in</link></short>
</element>

<element name="TInetSockAddr">
<short>Alias for <link id="#rtl.sockets.sockaddr_in">sockaddr_in</link></short>
</element>


<!-- variable Visibility: default -->
<element name="sockaddr_in.sin_family">
<short>Internet socket family</short>
</element>

<!-- variable Visibility: default -->
<element name="sockaddr_in.sin_port">
<short>Internet socket port</short>
</element>

<!-- variable Visibility: default -->
<element name="sockaddr_in.sin_addr">
<short>Internet socket host address</short>
</element>

<!-- variable Visibility: default -->
<element name="sockaddr_in.xpad">
<short>Padding bytes</short>
</element>

<element name="sockaddr_in.family">
<short>Address family</short>
</element>
<element name="sockaddr_in.port">
<short>Port number</short>
</element>
<element name="sockaddr_in.addr">
<short>IP address</short>
</element>
<element name="sockaddr_in.pad">
<short>Pad data. Do not use.</short>
</element>

<element name="TSockArray">
<short>Type returned by the <link id="FPSocketPair"/> call.</short>
</element>

<element name="AF_IMPLINK">
<short>Address family: ?</short>
</element>

<!-- constant Visibility: default -->
<element name="AF_PUP">
<short>Address family: ?</short>
</element>

<!-- constant Visibility: default -->
<element name="AF_CHAOS">
<short>Address family: ?</short>
</element>

<!-- constant Visibility: default -->
<element name="AF_NS">
<short>Address family: ?</short>
</element>

<!-- constant Visibility: default -->
<element name="AF_ISO">
<short>Address family: ?</short>
</element>

<!-- constant Visibility: default -->
<element name="AF_OSI">
<short>Address family: ?</short>
</element>

<!-- constant Visibility: default -->
<element name="AF_ECMA">
<short>Address family: ?</short>
</element>

<!-- constant Visibility: default -->
<element name="AF_DATAKIT">
<short>Address family: ?</short>
</element>

<!-- constant Visibility: default -->
<element name="AF_CCITT">
<short>Address family: ?</short>
</element>

<!-- constant Visibility: default -->
<element name="AF_SNA">
<short>Addresss family: Linux SNA project</short>
</element>

<!-- constant Visibility: default -->
<element name="AF_DECnet">
<short>Address family: Reserved for DECnet project.</short>
</element>

<!-- constant Visibility: default -->
<element name="AF_DLI">
<short>Address family: ?</short>
</element>

<!-- constant Visibility: default -->
<element name="AF_LAT">
<short>Address family: ?</short>
</element>

<!-- constant Visibility: default -->
<element name="AF_HYLINK">
<short>Address family: ?</short>
</element>

<!-- constant Visibility: default -->
<element name="AF_ROUTE">
<short>Address family: Alias to emulate 4.4BSD.</short>
</element>

<!-- constant Visibility: default -->
<element name="AF_LINK">
<short>Address family: ?</short>
</element>

<!-- constant Visibility: default -->
<element name="pseudo_AF_XTP">
<short>Address family: ?</short>
</element>

<!-- constant Visibility: default -->
<element name="AF_COIP">
<short>Address family: ?</short>
</element>

<!-- constant Visibility: default -->
<element name="AF_CNT">
<short>Address family: ?</short>
</element>

<!-- constant Visibility: default -->
<element name="pseudo_AF_RTIP">
<short>Address family: ?</short>
</element>

<!-- constant Visibility: default -->
<element name="AF_SIP">
<short>Address family: ?</short>
</element>

<!-- constant Visibility: default -->
<element name="pseudo_AF_PIP">
<short>Address family: ?</short>
</element>

<!-- constant Visibility: default -->
<element name="AF_ISDN">
<short>Address family: ?</short>
</element>

<!-- constant Visibility: default -->
<element name="AF_E164">
<short>Address family: ?</short>
</element>

<!-- constant Visibility: default -->
<element name="pseudo_AF_KEY">
<short>Address family: key management API.</short>
</element>

<!-- constant Visibility: default -->
<element name="AF_NATM">
<short>Address family: ?</short>
</element>

<!-- constant Visibility: default -->
<element name="AF_ATM">
<short>Address family: ?</short>
</element>

<!-- constant Visibility: default -->
<element name="pseudo_AF_HDRCMPLT">
<short>Address family: ?</short>
</element>

<!-- constant Visibility: default -->
<element name="AF_NETGRAPH">
<short>Address family: ?</short>
</element>

<!-- constant Visibility: default -->
<element name="SOCK_MAXADDRLEN">
<short>Maximum socket address length for <link id="Bind"/> call.</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="PF_IMPLINK">
<short>Protocol Family: ?</short>
</element>

<!-- constant Visibility: default -->
<element name="PF_PUP">
<short>Protocol Family: ?</short>
</element>

<!-- constant Visibility: default -->
<element name="PF_CHAOS">
<short>Protocol Family: ?</short>
</element>

<!-- constant Visibility: default -->
<element name="PF_NS">
<short>Protocol Family: ?</short>
</element>

<!-- constant Visibility: default -->
<element name="PF_ISO">
<short>Protocol Family: ?</short>
</element>

<!-- constant Visibility: default -->
<element name="PF_OSI">
<short>Protocol Family: ?</short>
</element>

<!-- constant Visibility: default -->
<element name="PF_ECMA">
<short>Protocol Family: ?</short>
</element>

<!-- constant Visibility: default -->
<element name="PF_DATAKIT">
<short>Protocol Family: ?</short>
</element>

<!-- constant Visibility: default -->
<element name="PF_CCITT">
<short>Protocol Family: ?</short>
</element>

<!-- constant Visibility: default -->
<element name="PF_SNA">
<short>Protocol Family: Linux SNA project</short>
</element>

<!-- constant Visibility: default -->
<element name="PF_DECnet">
<short>Protocol Family: DECNET project</short>
</element>

<!-- constant Visibility: default -->
<element name="PF_DLI">
<short>Protocol Family: ?</short>
</element>

<!-- constant Visibility: default -->
<element name="PF_LAT">
<short>Protocol Family: ?</short>
</element>

<!-- constant Visibility: default -->
<element name="PF_HYLINK">
<short>Protocol Family: ?</short>
</element>

<!-- constant Visibility: default -->
<element name="PF_ROUTE">
<short>Protocol Family: ?</short>
</element>

<!-- constant Visibility: default -->
<element name="PF_LINK">
<short>Protocol Family: ?</short>
</element>

<!-- constant Visibility: default -->
<element name="PF_XTP">
<short>Protocol Family: ?</short>
</element>

<!-- constant Visibility: default -->
<element name="PF_COIP">
<short>Protocol Family: ?</short>
</element>

<!-- constant Visibility: default -->
<element name="PF_CNT">
<short>Protocol Family: ?</short>
</element>

<!-- constant Visibility: default -->
<element name="PF_SIP">
<short>Protocol Family: ?</short>
</element>

<!-- constant Visibility: default -->
<element name="PF_RTIP">
<short>Protocol Family: ?</short>
</element>

<!-- constant Visibility: default -->
<element name="PF_PIP">
<short>Protocol Family: ?</short>
</element>

<!-- constant Visibility: default -->
<element name="PF_ISDN">
<short>Protocol Family: ?</short>
</element>

<!-- constant Visibility: default -->
<element name="PF_KEY">
<short>Protocol family: Key management API</short>
</element>

<!-- constant Visibility: default -->
<element name="PF_NATM">
<short>Protocol Family: ?</short>
</element>

<!-- constant Visibility: default -->
<element name="PF_ATM">
<short>Protocol Family: ?</short>
</element>

<!-- constant Visibility: default -->
<element name="PF_NETGRAPH">
<short>Protocol Family: ?</short>
</element>

<!-- constant Visibility: default -->
<element name="SOL_SOCKET">
<short>Socket option level: Socket level</short>
</element>

<!-- constant Visibility: default -->
<element name="SO_DEBUG">
<short>Socket option level: debug</short>
</element>

<!-- constant Visibility: default -->
<element name="SO_REUSEADDR">
<short>Socket option: Reuse address</short>
</element>

<!-- constant Visibility: default -->
<element name="SO_TYPE">
<short>Socket option: Type</short>
</element>

<!-- constant Visibility: default -->
<element name="SO_ERROR">
<short>Socket option: Error</short>
</element>

<!-- constant Visibility: default -->
<element name="SO_DONTROUTE">
<short>Socket option: Don't route</short>
</element>

<!-- constant Visibility: default -->
<element name="SO_BROADCAST">
<short>Socket option: Broadcast</short>
</element>

<!-- constant Visibility: default -->
<element name="SO_SNDBUF">
<short>Socket option: Send buffer</short>
</element>

<!-- constant Visibility: default -->
<element name="SO_RCVBUF">
<short>Socket option: receive buffer</short>
</element>

<!-- constant Visibility: default -->
<element name="SO_KEEPALIVE">
<short>Socket option: keep alive</short>
</element>

<!-- constant Visibility: default -->
<element name="SO_OOBINLINE">
<short>Socket option: ?</short>
</element>

<!-- constant Visibility: default -->
<element name="SO_NO_CHECK">
<short>Socket option: ?</short>
</element>

<!-- constant Visibility: default -->
<element name="SO_PRIORITY">
<short>Socket option: ?</short>
</element>

<!-- constant Visibility: default -->
<element name="SO_LINGER">
<short>Socket option: ?</short>
</element>

<!-- constant Visibility: default -->
<element name="SO_BSDCOMPAT">
<short>Socket option: ?</short>
</element>

<!-- constant Visibility: default -->
<element name="SO_PASSCRED">
<short>Socket option: ?</short>
</element>

<!-- constant Visibility: default -->
<element name="SO_PEERCRED">
<short>Socket option: ?</short>
</element>

<!-- constant Visibility: default -->
<element name="SO_RCVLOWAT">
<short>Socket option: ?</short>
</element>

<!-- constant Visibility: default -->
<element name="SO_SNDLOWAT">
<short>Socket option: ?</short>
</element>

<!-- constant Visibility: default -->
<element name="SO_RCVTIMEO">
<short>Socket option: ?</short>
</element>

<!-- constant Visibility: default -->
<element name="SO_SNDTIMEO">
<short>Socket option: ?</short>
</element>

<!-- constant Visibility: default -->
<element name="SO_SECURITY_AUTHENTICATION">
<short>Socket option: ?</short>
</element>

<!-- constant Visibility: default -->
<element name="SO_SECURITY_ENCRYPTION_TRANSPORT">
<short>Socket option: ?</short>
</element>

<!-- constant Visibility: default -->
<element name="SO_SECURITY_ENCRYPTION_NETWORK">
<short>Socket option: ?</short>
</element>

<!-- constant Visibility: default -->
<element name="SO_BINDTODEVICE">
<short>Socket option: ?</short>
</element>

<!-- constant Visibility: default -->
<element name="SO_ATTACH_FILTER">
<short>Socket option: ?</short>
</element>

<!-- constant Visibility: default -->
<element name="SO_DETACH_FILTER">
<short>Socket option: ?</short>
</element>

<!-- constant Visibility: default -->
<element name="SO_PEERNAME">
<short>Socket option: ?</short>
</element>

<!-- constant Visibility: default -->
<element name="SO_TIMESTAMP">
<short>Socket option: ?</short>
</element>

<!-- constant Visibility: default -->
<element name="SCM_TIMESTAMP">
<short>Socket option: ?</short>
</element>

<!-- constant Visibility: default -->
<element name="SO_ACCEPTCONN">
<short>Socket option: ?</short>
</element>

<!-- constant Visibility: default -->
<element name="SHUT_RD">
<short>Shutdown read part of full duplex socket</short>
</element>

<!-- constant Visibility: default -->
<element name="SHUT_WR">
<short>Shutdown write part of full duplex socket</short>
</element>

<!-- constant Visibility: default -->
<element name="SHUT_RDWR">
<short>Shutdown read and write part of full duplex socket</short>
</element>

<!-- alias type Visibility: default -->
<element name="sa_family_t">
<short>Address family type</short>
</element>

<!-- constant Visibility: default -->
<element name="PF_LOCAL">
<short>Protocol family: Unix socket</short>
</element>

<!-- constant Visibility: default -->
<element name="PF_FILE">
<short>Protocol family: Unix socket (alias)</short>
</element>

<!-- constant Visibility: default -->
<element name="AF_LOCAL">
<short>Address family: Unix socket</short>
</element>

<!-- constant Visibility: default -->
<element name="AF_FILE">
<short>Address family: Unix socket (alias)</short>
</element>

<!-- constant Visibility: default -->
<element name="MSG_OOB">
<short>Receive flags: receive out-of-band data.</short>
</element>

<!-- constant Visibility: default -->
<element name="MSG_PEEK">
<short>Receive flags: peek at data, don't remove from buffer.</short>
</element>

<!-- constant Visibility: default -->
<element name="MSG_DONTROUTE">
<short>Send flags: don't use gateway</short>
</element>

<!-- constant Visibility: default -->
<element name="MSG_TRYHARD">
<short>Receive flags: ?</short>
</element>

<!-- constant Visibility: default -->
<element name="MSG_CTRUNC">
<short>Receive flags: Control Data was discarded (buffer too small)</short>
</element>

<!-- constant Visibility: default -->
<element name="MSG_PROXY">
<short>Receive flags: ?</short>
</element>

<!-- constant Visibility: default -->
<element name="MSG_TRUNC">
<short>Receive flags: packet Data was discarded (buffer too small)</short>
</element>

<!-- constant Visibility: default -->
<element name="MSG_DONTWAIT">
<short>Receive flags: Non-blocking operation request.</short>
</element>

<!-- constant Visibility: default -->
<element name="MSG_EOR">
<short>Receive flags: End of record</short>
</element>

<!-- constant Visibility: default -->
<element name="MSG_WAITALL">
<short>Receive flags: Wait till operation completed.</short>
</element>

<!-- constant Visibility: default -->
<element name="MSG_FIN">
<short>Receive flags: ?</short>
</element>

<!-- constant Visibility: default -->
<element name="MSG_SYN">
<short>Receive flags: ?</short>
</element>

<!-- constant Visibility: default -->
<element name="MSG_CONFIRM">
<short>Send flags: Conform connection</short>
</element>

<!-- constant Visibility: default -->
<element name="MSG_RST">
<short>Receive flags: ?</short>
</element>

<!-- constant Visibility: default -->
<element name="MSG_ERRQUERE">
<short>Receive flags: ?</short>
</element>

<!-- constant Visibility: default -->
<element name="MSG_NOSIGNAL">
<short>Receive flags: Suppress SIG_PIPE signal.</short>
</element>

<!-- constant Visibility: default -->
<element name="MSG_MORE">
<short>Receive flags: ?</short>
</element>

<!-- constant Visibility: default -->
<element name="S_IN">
<short>Input socket in socket pair.</short>
</element>

<!-- constant Visibility: default -->
<element name="S_OUT">
<short>Output socket in socket pair</short>
</element>

<!-- record type Visibility: default -->
<element name="in_addr">
<short>General inet socket address.</short>
</element>

<!-- variable Visibility: default -->
<element name="in_addr.s_addr">
<short>Actual address</short>
</element>

<!-- variable Visibility: default -->
<element name="TSockAddr.sa_family">
<short>General socket address: Address family</short>
</element>

<!-- variable Visibility: default -->
<element name="TSockAddr.sa_data">
<short>General socket address: Address data</short>
</element>

<!-- pointer type Visibility: default -->
<element name="pSockAddr">
<short>Pointer to <link id="TSockAddr"/></short>
</element>

<!-- pointer type Visibility: default -->
<element name="pInetSockAddr">
<short>Pointer to <link id="sockaddr_in"/></short>
</element>

<!-- record type Visibility: default -->
<element name="Tin6_addr">
<short>Alias for <link id="sockaddr_in6"/></short>
</element>

<!-- pointer type Visibility: default -->
<element name="pIn6_Addr">
<short>Pointer to <link id="Tin6_addr"/></short>
</element>

<!-- record type Visibility: default -->
<element name="sockaddr_in6">
<short>Record for IPV6 socket address.</short>
</element>

<!-- variable Visibility: default -->
<element name="sockaddr_in6.sin6_family">
<short>Address family</short>
</element>

<!-- variable Visibility: default -->
<element name="sockaddr_in6.sin6_port">
<short>Port</short>
</element>

<!-- variable Visibility: default -->
<element name="sockaddr_in6.sin6_flowinfo">
<short>Flow information.</short>
</element>

<!-- variable Visibility: default -->
<element name="sockaddr_in6.sin6_addr">
<short>IPV6 address</short>
</element>

<!-- variable Visibility: default -->
<element name="sockaddr_in6.sin6_scope_id">
<short></short>
</element>

<!-- alias type Visibility: default -->
<element name="sockaddr_in6">
<short>Alias for <link id="sockaddr_in6"/></short>
</element>

<!-- pointer type Visibility: default -->
<element name="psockaddr_in6">
<short>Pointer to <link id="sockaddr_in6"/></short>
</element>

<element name="plinger">
<short>Pointer to <link id="#rtl.sockets.linger">linger</link> type.</short>
</element>

<!-- record type Visibility: default -->
<element name="linger">
<short>Record used in <link id="#rtl.sockets.fpsetsockopt">setsockopt</link></short>
<descr>
This record is used in the <link id="fpsetsockopt"/> call to specify linger
options.
</descr>
<seealso>
<link id="fpsetsockopt"/>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="linger.l_onoff">
<short>Linger on or off</short>
</element>

<!-- variable Visibility: default -->
<element name="linger.l_linger">
<short>Time to linger</short>
</element>

<!-- alias type Visibility: default -->
<element name="TLinger">
<short>Alias for <link id="#rtl.sockets.linger">linger</link></short>
</element>

<!-- record type Visibility: default -->
<element name="in6_addr">
<short>General purpose IPV6 address</short>
<descr>
Record used to describe a general IPV6 address.
</descr>
<seealso>
<link id="sockaddr_in6"/>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="in6_addr.u6_addr8">
<short>Address field using unsigned 8 bit elements</short>
</element>

<!-- variable Visibility: default -->
<element name="in6_addr.u6_addr16">
<short>Address field using unsigned 16 bit elements</short>
</element>

<!-- variable Visibility: default -->
<element name="in6_addr.u6_addr32">
<short>Address field using unsigned 32 bit elements</short>
</element>

<!-- variable Visibility: default -->
<element name="in6_addr.s6_addr8">
<short>Address field using signed 8 bit elements</short>
</element>

<!-- variable Visibility: default -->
<element name="in6_addr.s6_addr">
<short>Address field using signed 8 bit elements</short>
</element>

<!-- variable Visibility: default -->
<element name="in6_addr.s6_addr16">
<short>Address field using signed 16 bit elements</short>
</element>

<!-- variable Visibility: default -->
<element name="in6_addr.s6_addr32">
<short>Address field using signed 32 bit elements</short>
</element>

<!-- alias type Visibility: default -->
<element name="TIn6Addr">
<short>Alias for <link id="#rtl.sockets.in6_addr">in6_addr</link> type.</short>
</element>

<!-- alias type Visibility: default -->
<element name="PIn6Addr">
<short>Pointer to  <link id="#rtl.sockets.in6_addr">in6_addr</link> type.</short>
</element>

<!-- alias type Visibility: default -->
<element name="TInetSockAddr6">
<short>Alias for <link id="#rtl.sockets.sockaddr_in6">sockaddr_in6</link></short>
</element>

<!-- alias type Visibility: default -->
<element name="PInetSockAddr6">
<short>Pointer to <link id="#rtl.sockets.sockaddr_in6">sockaddr_in6</link> type</short>
</element>

<!-- alias type Visibility: default -->
<element name="Tsocket">
<short>Alias for easy kylix porting</short>
</element>

<!-- array type Visibility: default -->
<element name="TSockPairArray">
<short>Array of sockets, used in <link id="FPSocketPair"/> call.</short>
</element>

<!-- variable Visibility: default -->
<element name="SocketError">
<short>Contains the error code for the last socket operation.</short>
<descr>
<var>SocketError</var> contains the error code for the last socket
operation. It can be examined to return the last socket error. 
</descr>
</element>

<!-- function Visibility: default -->
<element name="CloseSocket">
<short>Closes a socket handle.</short>
<descr>
<var>CloseSocket</var> closes a socket handle. It returns 0 if the socket
was closed succesfully, -1 if it failed.
</descr>
<errors>
On error, -1 is returned.
</errors>
<seealso>
<link id="FPSocket"/>
</seealso>
</element>

<!-- function Visibility: default -->
<element name="fpsendto">
<short>Send data through an unconnected socket to an address.</short>
<descr>
<var>fpSendTo</var> sends data from buffer <var>Msg</var> with length
<var>len</var> through socket <var>S</var> with options
<var>Flags</var>. The data is sent to address <var>tox</var>, which has
length <var>toLen</var>
</descr>
<errors>
On error, -1 is returned.
</errors>
<seealso>
<link id="fpSocket"/>
<link id="fpSend"/>
<link id="fpRecvFrom"/>
</seealso>
</element>

<element name="fprecvfrom">
<short>Receive data from an unconnected socket</short>
<descr>
<var>fpRecvFrom</var> receives data in buffer <var>Buf</var> with maximum
length <var>Len</var> from socket <var>S</var>. 
Receipt is controlled by options in <var>Flags</var>. The location pointed
to by <var>from</var> will be filled with the address from the sender, and 
it's length will be stored in <var>fromlen</var>.
The function returns the number of bytes received, or -1 on error.
<var>AddrLen</var>.
</descr>
<errors>
On error, -1 is returned.
</errors>
<seealso>
<link id="fpSocket"/>
<link id="fprecv"/>
</seealso>
</element>

<!-- function Visibility: default -->
<element name="fpaccept">
<short>Accept a connection from a socket.</short>
<descr>
<p>
<var>Accept</var> accepts a connection from a socket <var>S</var>, which was
listening for a connection. If a connection is accepted, a file descriptor
is returned (positive number).  On error <var>-1</var> is returned. 
The returned socket may NOT be used to accept more connections.  
The original socket remains open.
</p>
<p>
The <var>Accept</var> call fills the address of the connecting entity in 
<var>Addrx</var>, and sets its length in <var>Addrlen</var>. <var>Addrx</var> should 
be pointing to enough space, and <var>Addrlen</var> should be set to the 
amount of space available, prior to the call.
</p>
</descr>
<errors>
<p>
On error, <var>-1</var> is returned, and errors are reported in 
<var>SocketError</var>, and include the following:
</p>
<dl>
<dt><link id="ESockEBADF"/></dt><dd>The socket descriptor is invalid.</dd>
<dt><link id="ESockENOTSOCK"/></dt><dd>The descriptor is not a socket.</dd>
<dt>SYS_EOPNOTSUPP</dt><dd>The socket type doesn't support the <var>Listen</var> operation.</dd>
<dt><link id="ESockEFAULT"/></dt><dd><var>Addr</var> points outside your address space.</dd>
<dt><link id="ESockEWOULDBLOCK"/></dt><dd>The requested operation would block the process.</dd>
</dl>
</errors>
<seealso>
<link id="fpListen"/>
<link id="fpConnect"/>
<link id="fpBind"/>
</seealso>
<example file="sockex/socksvr"/>
</element>

<element name="Accept">
<short>Accept a connection from a socket (deprecated).</short>
<descr>
<p>
<var>Accept</var> accepts a connection from a socket <var>Sock</var>, which was
listening for a connection. If a connection is accepted, a file descriptor
is returned. On error <var>-1</var> is returned. The returned socket may NOT 
be used to accept more connections.  The original socket remains open.
</p>
<p>
The <var>Accept</var> call fills the address of the connecting entity in 
<var>Addr</var>, and sets its length in <var>Addrlen</var>. <var>Addr</var> should 
be pointing to enough space, and <var>Addrlen</var> should be set to the 
amount of space available, prior to the call.
</p>
<p>
The alternate forms of the <link id="Accept"/> command, with the
<var>Text</var> or <var>File</var> parameters are equivalent
to subsequently calling the regular <link id="Accept"/> function and the
<link id="Sock2Text"/> or <link id="Sock2File"/> functions. 
These functions return <var>True</var> if successful, <var>False</var> otherwise.
</p>
</descr>
<errors>
<p>
On error, <var>-1</var> is returned, and errors are reported in 
<var>SocketError</var>, and include the following:
</p>
<dl>
<dt><link id="ESockEBADF"/></dt><dd>The socket descriptor is invalid.</dd>
<dt><link id="ESockENOTSOCK"/></dt><dd>The descriptor is not a socket.</dd>
<dt>SYS_EOPNOTSUPP</dt><dd>The socket type doesn't support the <var>Listen</var> operation.</dd>
<dt><link id="ESockEFAULT"/></dt><dd><var>Addr</var> points outside your address space.</dd>
<dt><link id="ESockEWOULDBLOCK"/></dt><dd>The requested operation would block the process.</dd>
</dl>
</errors>
<seealso>
<link id="FPListen"/>
<link id="Connect"/>
<link id="FPConnect"/>
<link id="FPBind"/>
</seealso>
<example file="sockex/socksvr"/>
</element>

<!-- function Visibility: default -->
<element name="fpbind">
<short>Bind a socket to an address.</short>
<descr>
<p>
<var>fpBind</var> binds the socket <var>s</var> to address <var>Addrx</var>.
<var>Addrx</var> has length <var>Addrlen</var>.
The function returns <var>0</var> if the call was succesful, <var>-1</var> if
not.
</p>
</descr>
<errors>
<p>
Errors are returned in <var>SocketError</var> and include the following:
</p>
<dl>
<dt><link id="ESockEBADF"/></dt><dd>The socket descriptor is invalid.</dd>
<dt><link id="ESockEINVAL"/></dt><dd>The socket is already bound to an address,</dd>
<dt><link id="ESockEACCESS"/></dt><dd>Address is protected and you don't have permission to open it.</dd>
</dl>
<p>
More errors can be found in the Unix man pages.
</p>
</errors>
<seealso>
<link id="FPSocket"/>
</seealso>
</element>

<element name="Bind">
<short>Alias for <var>fpBind</var>.</short>
<descr>
<p>
<var>Bind</var> is an alias for <link id="fpBind"/> which binds to either a
socket struct (<var>Addr</var>) or a string indicating a unix socket file (unix
socket).
</p>
<p>
This function is deprecated, use <var>fpBind</var> instead.
</p>
</descr>
<seealso>
<link id="FPBind"/>
</seealso>
</element>

<!-- function Visibility: default -->
<element name="fpconnect">
<short>Open a connection to a server socket.</short>
<descr>
<p>
<var>fpConnect</var> uses the socket <var>s</var> to open a connection to a peer, whose address is described by
<var>Name</var>. <var>NameLen</var> contains the length of the address.
The type of <var>Name</var> depends on the kind of connection you are trying to
make, but is generally one of <var>TSockAddr</var> or <var>TUnixSockAddr</var>.
</p>
<p>
The <var>fpConnect</var> function returns zero if the call
was successfull, <var>-1</var> in case of error.
</p>
</descr>
<errors>
On error, <var>-1</var> is returned and errors are reported in 
<var>SocketError</var>.
</errors>
<seealso>
<link id="fpListen"/>
<link id="fpBind"/>
<link id="fpAccept"/>
</seealso>
<example file="sockex/sockcli"/>
<example file="sockex/pfinger"/>
</element>


<element name="Connect">
<short>Open a connection to a server socket (deprecated).</short>
<descr>
<p>
<var>Connect</var> opens a connection to a peer, whose address is described by
<var>Addr</var>. <var>AddrLen</var> contains the length of the address.
The type of <var>Addr</var> depends on the kind of connection you're trying to
make, but is generally one of <var>TSockAddr</var> or <var>TUnixSockAddr</var>.
</p>
<p>
The forms of the <link id="Connect"/> command with the <var>Text</var> or
<var>File</var> arguments are equivalent to subsequently calling the regular <var>Connect</var> 
function and the  <link id="Sock2Text"/> or <link id="Sock2File"/> functions.
These functions return <var>True</var> if successfull, <var>False</var> otherwise.
</p>
<p>
The <var>Connect</var> function returns a file descriptor if the call
was successfull, <var>-1</var> in case of error.
</p>
</descr>
<errors>
On error, <var>-1</var> is returned and errors are reported in 
<var>SocketError</var>.
</errors>
<seealso>
<link id="FPListen"/>
<link id="FPBind"/>
<link id="Accept"/>
<link id="FPAccept"/>
</seealso>
<example file="sockex/sockcli"/>
<example file="sockex/pfinger"/>
</element>

<!-- function Visibility: default -->
<element name="fpgetpeername">
<short>Return the name (address) of the connected peer.</short>
<descr>
<p>
<var>fpGetPeerName</var> returns the name of the entity connected to the 
specified socket <var>S</var>. The Socket must be connected for this call to
work. 
</p>
<p>
<var>Name</var> should point to enough space to store the name, the
amount of space pointed to should be set in <var>Namelen</var>. 
When the function returns succesfully, <var>Name</var> will be filled with the 
name, and <var>Name</var> will be set to the length of <var>Name</var>.
</p>
</descr>
<errors>
<p>
Errors are reported in <var>SocketError</var>, and include the following:
</p>
<dl>
<dt><link id="ESockEBADF"/></dt><dd>The socket descriptor is invalid.</dd>
<dt><link id="ESockENOBUFS"/></dt><dd>The system doesn't have enough buffers to perform the operation.</dd>
<dt><link id="ESockENOTSOCK"/></dt><dd>The descriptor is not a socket.</dd>
<dt><link id="ESockEFAULT"/></dt><dd><var>Addr</var> points outside your address space.</dd>
<dt><link id="ESockENOTCONN"/></dt><dd>The socket isn't connected.</dd>
</dl>
</errors>
<seealso>
<link id="fpConnect"/>
<link id="fpSocket"/>
</seealso>
</element>

<!-- function Visibility: default -->
<element name="fpgetsockname">
<short>Return name of socket.</short>
<descr>
<var>fpGetSockName</var> returns the current name of the specified socket
<var>S</var>. <var>Name</var> should point to enough space to store the name, the
amount of space pointed to should be set in <var>Namelen</var>. 
When the function returns succesfully, <var>Name</var> will be filled with the 
name, and <var>Namelen</var> will be set to the length of <var>Name</var>.
</descr>
<errors>
<p>
Errors are reported in <var>SocketError</var>, and include the following:
</p>
<dl>
<dt><link id="ESockEBADF"/></dt><dd>The socket descriptor is invalid.</dd>
<dt><link id="ESockENOBUFS"/></dt><dd>The system doesn't have enough buffers to perform the operation.</dd>
<dt><link id="ESockENOTSOCK"/></dt><dd>The descriptor is not a socket.</dd>
<dt><link id="ESockEFAULT"/></dt><dd><var>Addr</var> points outside your address space.</dd>
</dl>
</errors>
<seealso>
<link id="fpBind"/>
</seealso>
</element>

<!-- function Visibility: default -->
<element name="fpgetsockopt">
<short>Get current socket options</short>
<descr>
<p>
<var>fpGetSockOpt</var> gets the connection option <var>optname</var>, for socket <var>S</var>.
The socket may be obtained from different levels, indicated by <var>Level</var>,
which can be one of the following:
</p>
<dl>
<dt>SOL_SOCKET</dt><dd>From the socket itself.</dd>
<dt>XXX</dt><dd>set <var>Level</var> to <var>XXX</var>, the protocol number of the protocol
which should interpret the option.</dd>
</dl>
<p>
The options are stored in the memory location pointed to by
<var>optval</var>. <var>optlen</var> should point to the initial length of
<var>optval</var>, and on return will contain the actual length of the
stored data.
</p>
<p>
On success, 0 is returned. On Error, -1 is returned.
</p>
</descr>
<errors>
<p>
Errors are reported in <var>SocketError</var>, and include the following:
</p>
<dl>
<dt><link id="ESockEBADF"/></dt><dd>The socket descriptor is invalid.</dd>
<dt><link id="ESockENOTSOCK"/></dt><dd>The descriptor is not a socket.</dd>
<dt><link id="ESockEFAULT"/></dt><dd><var>OptVal</var> points outside your address space.</dd>
</dl>
</errors>
<seealso>
<link id="fpSetSockOpt"/>
</seealso>
</element>

<!-- function Visibility: default -->
<element name="fplisten">
<short>Listen for connections on a socket.</short>
<descr>
<p>
<var>fpListen</var> listens for up to <var>backlog</var> connections from socket
<var>S</var>. The socket <var>S</var> must be of type <var>SOCK_STREAM</var> or
<var>Sock_SEQPACKET</var>.
</p>
<p>
The function returns <var>0</var> if a connection was accepted, <var>-1</var> 
if an error occurred.
</p>
</descr>
<errors>
<p>
Errors are reported in <var>SocketError</var>, and include the following:
</p>
<dl>
<dt><link id="ESockEBADF"/></dt><dd>The socket descriptor is invalid.</dd>
<dt><link id="ESockENOTSOCK"/></dt><dd>The descriptor is not a socket.</dd>
<dt>SYS_EOPNOTSUPP</dt><dd>The socket type doesn't support the <var>Listen</var> operation.</dd>
</dl>
</errors>
<seealso>
<link id="fpSocket"/>
<link id="fpBind"/>
<link id="fpConnect"/>
</seealso>
</element>

<element name="fprecv">
<short>Receive data on socket</short>
<descr>
<p>
<var>fpRecv</var> reads at most <var>len</var> bytes from socket <var>S</var> into
address <var>buf</var>. The socket must be in a connected state.
<var>Flags</var> can be one of the following:
</p>
<dl>
<dt>1</dt><dd>Process out-of band data.</dd>
<dt>4</dt><dd>Bypass routing, use a direct interface.</dd>
<dt>??</dt><dd>Wait for full request or report an error.</dd>
</dl>
<p>
The functions returns the number of bytes actually read from the socket, or
-1 if a detectable error occurred.
</p>
</descr>
<errors>
<p>
Errors are reported in <var>SocketError</var>, and include the following:
</p>
<dl>
<dt><link id="ESockEBADF"/></dt><dd>The socket descriptor is invalid.</dd>
<dt><link id="ESockENOTCONN"/></dt><dd>The socket isn't connected.</dd>
<dt><link id="ESockENOTSOCK"/></dt><dd>The descriptor is not a socket.</dd>
<dt><link id="ESockEFAULT"/></dt><dd>The address is outside your address space.</dd>
<dt><link id="ESockEMSGSIZE"/></dt><dd>The message cannot be sent atomically.</dd>
<dt><link id="ESockEWOULDBLOCK"/></dt><dd>The requested operation would block the process.</dd>
<dt><link id="ESockENOBUFS"/></dt><dd>The system doesn't have enough free buffers available.</dd>
</dl>
</errors>
<seealso>
<link id="FPSend"/>
</seealso>
</element>

<!-- function Visibility: default -->
<element name="fpsend">
<short>Send data through socket</short>
<descr>
<p>
<var>fpSend</var> sends <var>Len</var> bytes starting from address <var>Msg</var>
to socket <var>S</var>. <var>S</var> must be in a connected state. Options
can be passed  in <var>Flags</var>.
</p>
<p>
The function returns the number of bytes sent, or -1 if a detectable 
error occurred.
</p>
<p>
<var>Flags</var> can be one of the following:
</p>
<dl>
<dt>1</dt><dd>Process out-of band data.</dd>
<dt>4</dt><dd>Bypass routing, use a direct interface.</dd>
</dl>
</descr>
<errors>
<p>
Errors are reported in <var>SocketError</var>, and include the following:
</p>
<dl>
<dt><link id="ESockEBADF"/></dt><dd>The socket descriptor is invalid.</dd>
<dt><link id="ESockENOTSOCK"/></dt><dd>The descriptor is not a socket.</dd>
<dt><link id="ESockEFAULT"/></dt><dd>The address is outside your address space.</dd>
<dt><link id="ESockEMSGSIZE"/></dt><dd>The message cannot be sent atomically.</dd>
<dt><link id="ESockEWOULDBLOCK"/></dt><dd>The requested operation would block the process.</dd>
<dt><link id="ESockENOBUFS"/></dt><dd>The system doesn't have enough free buffers available.</dd>
</dl>
</errors>
<seealso>
<link id="fpRecv"/>
</seealso>
</element>

<!-- function Visibility: default -->
<element name="fpsetsockopt">
<short>Set socket options.</short>
<descr>
<p>
<var>fpSetSockOpt</var> sets the connection options for socket <var>S</var>.
The socket may be manipulated at different levels, indicated by <var>Level</var>,
which can be one of the following:
</p>
<dl>
<dt>SOL_SOCKET</dt><dd>To manipulate the socket itself.</dd>
<dt>XXX</dt><dd>set <var>Level</var> to <var>XXX</var>, the protocol number of the protocol
which should interprete the option.</dd>
</dl>
<p>
The actual option is stored in a buffer pointed to by <var>optval</var>, with length
<var>optlen</var>.
</p>
<p>
For more information on this call, refer to the unix manual page
<file>setsockopt</file>
</p>
</descr>
<errors>
<p>
Errors are reported in <var>SocketError</var>, and include the following:
</p>
<dl>
<dt><link id="ESockEBADF"/></dt><dd>The socket descriptor is invalid.</dd>
<dt><link id="ESockENOTSOCK"/></dt><dd>The descriptor is not a socket.</dd>
<dt><link id="ESockEFAULT"/></dt><dd><var>OptVal</var> points outside your address space.</dd>
</dl>
</errors>
<seealso>
<link id="fpGetSockOpt"/>
</seealso>
</element>

<!-- function Visibility: default -->
<element name="fpshutdown">
<short>Close one end of full duplex connection.</short>
<descr>
<p>
<var>fpShutDown</var> closes one end of a full duplex socket connection, described
by <var>S</var>. The parameter <var>How</var> determines how the connection 
will be shut down, and can be one of the following:
</p>
<dl>
<dt>0</dt><dd>Further receives are disallowed.</dd>
<dt>1</dt><dd>Further sends are disallowed.</dd>
<dt>2</dt><dd>Sending nor receiving are allowed.</dd>
</dl>
<p>
On succes, the function returns 0, on error -1 is returned.
</p>
</descr>
<errors>
<p>
<var>SocketError</var> is used to report errors, and includes the following:
</p>
<dl>
<dt><link id="ESockEBADF"/></dt><dd>The socket descriptor is invalid.</dd>
<dt><link id="ESockENOTCONN"/></dt><dd>The socket isn't connected.</dd>
<dt><link id="ESockENOTSOCK"/></dt><dd>The descriptor is not a socket.</dd>
</dl>
</errors>
<seealso>
<link id="fpSocket"/>
<link id="fpConnect"/>
</seealso>
</element>

<element name="Sock2File">
<short>Convert socket to untyped file descriptors</short>
<descr>
<var>Sock2File</var> transforms a socket <var>Sock</var> into 2 Pascal file
descriptors of type <var>File</var>, one for reading from the socket
(<var>SockIn</var>), one for writing to the socket (<var>SockOut</var>).
</descr>
<errors>
None.
</errors>
<seealso>
<link id="FPSocket"/>
<link id="Sock2Text"/>
</seealso>
</element>

<element name="Sock2Text">
<short>Convert socket to text file descriptors</short>
<descr>
<var>Sock2Text</var> transforms a socket <var>Sock</var> into 2 Pascal file
descriptors of type <var>Text</var>, one for reading from the socket
(<var>SockIn</var>), one for writing to the socket (<var>SockOut</var>).
</descr>
<errors>
None.
</errors>
<seealso>
<link id="FPSocket"/>
<link id="Sock2File"/>
</seealso>
</element>

<element name="fpsocket">
<short>Create new socket</short>
<descr>
<p>
<var>fpSocket</var> creates a new socket in domain <var>Domain</var>, from type
<var>xType</var> using protocol <var>Protocol</var>.
The Domain, Socket type and Protocol can be specified using predefined
constants (see the section on constants for available constants)
If succesfull, the function returns a socket descriptor, which can be passed
to a subsequent <link id="fpBind"/> call. If unsuccesfull, the function returns -1.
</p>
<p>
for an example, see <link id="Accept"/>.
</p>
</descr>
<errors>
<p>
Errors are returned in <var>SocketError</var>, and include the follwing:
</p>
<dl>
<dt><link id="ESockEPROTONOSUPPORT"/></dt><dd>The protocol type or the specified protocol is not
supported within this domain.</dd>
<dt><link id="ESockEMFILE"/></dt><dd>The per-process descriptor table is full.</dd>
<dt>SYS_ENFILE</dt><dd>The system file table is full.</dd>
<dt><link id="ESockEACCESS"/></dt><dd>Permission to create a socket of the specified type 
and/or protocol is denied.</dd>
<dt><link id="ESockENOBUFS"/></dt><dd>Insufficient buffer space is available. The socket
cannot be created until sufficient resources are freed.</dd>
</dl>
</errors>
<seealso>
<link id="FPSocketPair"/>
</seealso>
</element>

<!-- function Visibility: default -->
<element name="fpsocketpair">
<short>Create socket pair.</short>
<descr>
<var>fpSocketPair</var> creates 2 sockets in domain <var>D</var>, from type
<var>xType</var> and using protocol <var>Protocol</var>.
The pair is returned in <var>sv</var>, and they are indistinguishable.
The function returns -1 upon error and 0 upon success.
</descr>
<errors>
Errors are reported in <var>SocketError</var>, and are the same as in <link id="FPSocket"/>
</errors>
<seealso>
<link id="Str2UnixSockAddr"/>
</seealso>
</element>

<element name="Str2UnixSockAddr">
<short>Convert path to <link id="TUnixSockAddr"/></short>
<descr>
<var>Str2UnixSockAddr</var> transforms a Unix socket address in a string to a
<var>TUnixSockAddr</var> structure which can be passed to the <link id="Bind"/> call.
</descr>
<errors>
None.
</errors>
<seealso>
<link id="FPSocket"/>
<link id="FPBind"/>
</seealso>
</element>

<element name="htonl">
<short>Convert long integer from host ordered to network ordered</short>
<descr>
<var>htonl</var> makes sure that the bytes in <var>host</var> are ordered
in the correct way for sending over the network and returns the correctly
ordered result.
</descr>
<seealso>
<link id="htons"/>
<link id="ntohl"/>
<link id="ntohs"/>
</seealso>
</element>

<element name="htons">
<short>Convert short integer from host ordered to network ordered</short>
<descr>
<var>htons</var> makes sure that the bytes in <var>host</var> are  ordered
in the correct way for sending over the network and returns the correctly
ordered result.
</descr>
<seealso>
<link id="htonl"/>
<link id="ntohl"/>
<link id="ntohs"/>
</seealso>
</element>

<element name="ntohl">
<short>Convert long integer from network ordered to host ordered</short>
<descr>
<var>ntohs</var> makes sure that the bytes in <var>Net</var>, received from
the network, are ordered in the correct way for handling by the host
machinen, and returns the correctly ordered result.
</descr>
<seealso>
<link id="htonl"/>
<link id="htons"/>
<link id="ntohs"/>
</seealso>
</element>

<element name="ntohs">
<short>Convert short integer from network ordered to host ordered</short>
<descr>
<var>ntohs</var> makes sure that the bytes in <var>Net</var>, received from
the network, are ordered in the correct way for handling by the host
machinen, and returns the correctly ordered result.
</descr>
<seealso>
<link id="htonl"/>
<link id="htons"/>
<link id="ntohl"/>
</seealso>
</element>

<!-- unresolved type reference Visibility: default -->
<element name="UnixType">
<short>Basic Unix types</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- alias type Visibility: default -->
<element name="TIn_addr">
<short>Alias for <link id="#rtl.sockets.In_addr">in_addr</link> record type.</short>
</element>

<!-- pointer type Visibility: default -->
<element name="pin_addr">
<short>Pointer to <link id="#rtl.sockets.In_addr">in_addr</link> record.</short>
</element>

<!-- alias type Visibility: default -->
<element name="TInAddr">
<short>Alias for <link id="#rtl.sockets.In_addr">in_addr</link> record type.</short>
</element>

<!-- array type Visibility: default -->
<element name="in_addrbytes">
<short>Array with same length as <link id="#rtl.sockets.In_addr">in_addr</link> record</short>
<descr>
<var>in_addrbytes</var> is used to typecast a <link id="in_addr"/> record to
an array of bytes.
</descr>
</element>

<!-- alias type Visibility: default -->
<element name="Sockaddr">
<short>Alias for <link id="#rtl.sockets.TSockAddr">TSockAddr</link> record type.</short>
</element>

<!-- function Visibility: default -->
<element name="NetAddrToStr">
<short>Convert a network address to a string.</short>
<descr>
<var>NetAddrToStr</var> converts the network address in <var>Entry</var> to
a string representation in human-readable form (a dotted quad).
</descr>
<seealso>
<link id="HostAddrToStr"/>
<link id="StrToNetAddr"/>
<link id="StrToHostAddr"/>
</seealso>
</element>

<!-- function Visibility: default -->
<element name="HostAddrToStr">
<short>Convert a host address to a string.</short>
<descr>
<p>
<var>HostAddrToStr</var> converts the host address in <var>Entry</var> to
a string representation in human-readable form (a dotted quad).
</p>
<p>
Basically, it is the same as <link id="NetAddrToStr"/>, but with the bytes
in correct order.
</p>
</descr>
<seealso>
<link id="NetAddrToStr"/>
<link id="StrToHostAddr"/>
<link id="StrToNetAddr"/>
</seealso>
</element>

<!-- function Visibility: default -->
<element name="StrToHostAddr">
<short>Convert a string to a host address.</short>
<descr>
<var>StrToHostAddr</var> converts the string representation in <var>IP</var>
to a host address and returns the host address. 
</descr>
<errors>
On error, the host address is filled with zeroes.
</errors>
<seealso>
<link id="NetAddrToStr"/>
<link id="HostAddrToStr"/>
<link id="StrToNetAddr"/>
</seealso>
</element>

<!-- function Visibility: default -->
<element name="StrToNetAddr">
<short>Convert a string to a network address.</short>
<descr>
<var>StrToNetAddr</var> converts the string representation in <var>IP</var>
to a network address and returns the network address. 
</descr>
<errors>
On error, the network address is filled with zeroes.
</errors>
<seealso>
<link id="NetAddrToStr"/>
<link id="HostAddrToStr"/>
<link id="StrToHostAddr"/>
</seealso>
</element>

<!-- function Visibility: default -->
<element name="HostToNet">
<short>Convert a host address to a network address</short>
<descr>
<var>HostToNet</var> converts a host address to a network address.
It takes care of endianness of the host machine. The address can be
specified as a dotted quad or as a longint.
</descr>
<errors>
None.
</errors>
<seealso>
<link id="NetToHost"/>
<link id="NToHS"/>
<link id="HToNS"/>
<link id="ShortHostToNet"/>
<link id="ShortNetToHost"/>
</seealso>
</element>

<!-- function Visibility: default -->
<element name="NetToHost">
<short>Convert a network address to a host address.</short>
<descr>
<var>NetToHost</var> converts a network address to a host address. 
It takes care of endianness of the host machine. The address can be
specified as a dotted quad or as a longint.
</descr>
<errors>
None.
</errors>
<seealso>
<link id="HostToNet"/>
<link id="NToHS"/>
<link id="HToNS"/>
<link id="ShortHostToNet"/>
<link id="ShortNetToHost"/>
</seealso>
</element>

<!-- function Visibility: default -->
<element name="ShortHostToNet">
<short>Convert a host port number to a network port number</short>
<descr>
<var>ShortHostToNet</var> converts a host port number to a network port
number. It takes care of endianness of the host machine. 
</descr>
<errors>
None.
</errors>
<seealso>
<link id="ShortNetToHost"/>
<link id="HostToNet"/>
<link id="NToHS"/>
<link id="HToNS"/>
</seealso>
</element>

<!-- function Visibility: default -->
<element name="ShortNetToHost">
<short>Convert a network port number to a host port number</short>
<descr>
<var>ShortNetToHost</var> converts a network port number to a host port
number. It takes care of endianness of the host machine.
</descr>
<errors>
None.
</errors>
<seealso>
<link id="ShortNetToHost"/>
<link id="HostToNet"/>
<link id="NToHS"/>
<link id="HToNS"/>
</seealso>
</element>

<!-- function Visibility: default -->
<element name="HostAddrToStr6">
<short>Convert a IPV6 host address to a string representation.</short>
<descr>
<p>
<var>HostAddrToStr6</var> converts the IPV6 host address in <var>Entry</var> to
a string representation in human-readable form.
</p>
<p>
Basically, it is the same as <link id="NetAddrToStr6"/>, but with the bytes
in correct order.
</p>
</descr>
<seealso>
<link id="NetAddrToStr"/>
<link id="StrToHostAddr"/>
<link id="StrToNetAddr"/>
<link id="StrToHostAddr6"/>
</seealso>
</element>

<!-- function Visibility: default -->
<element name="StrToHostAddr6">
<short>Convert a string to a IPV6 host address.</short>
<descr>
<var>StrToHostAddr6</var> converts the string representation in <var>IP</var>
to a IPV6 host address and returns the host address.
</descr>
<errors>
On error, the address is filled with zeroes.
</errors>
<seealso>
<link id="NetAddrToStr6"/>
<link id="HostAddrToStr6"/>
<link id="StrToHostAddr"/>
</seealso>
</element>

<!-- function Visibility: default -->
<element name="NetAddrToStr6">
<short>Convert a IPV6 network address to a string.</short>
<descr>
<p>
<var>NetAddrToStr6</var> converts the IPV6 network address in <var>Entry</var> to
a string representation in human-readable form.
</p>
<p>
Basically, it is the same as <link id="NetAddrToStr6"/>, but with the bytes
in correct order.
</p>
</descr>
<seealso>
<link id="NetAddrToStr"/>
<link id="StrToHostAddr"/>
<link id="StrToNetAddr"/>
<link id="StrToHostAddr6"/>
</seealso>
</element>

<!-- function Visibility: default -->
<element name="StrToNetAddr6">
<short>Convert a string to a IPV6 network address</short>
<descr>
<var>StrToNetAddr6</var> converts the string representation in <var>IP</var>
to a IPV6 network address and returns the network address.
</descr>
<errors>
On error, the address is filled with zeroes.
</errors>
<seealso>
<link id="NetAddrToStr6"/>
<link id="HostAddrToStr6"/>
<link id="StrToHostAddr6"/>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="NoAddress">
<short>Constant indicating invalid (no) network address.</short>
</element>

<!-- constant Visibility: default -->
<element name="NoNet">
<short>Constant indicating invalid (no) network address.</short>
</element>

<!-- constant Visibility: default -->
<element name="NoAddress6">
<short>Constant indicating invalid (no) IPV6 network address.</short>
</element>

<!-- constant Visibility: default -->
<element name="NoNet6">
<short>Constant indicating invalid (no) IPV6 network address.</short>
</element>

<!-- unresolved type reference Visibility: default -->
<element name="UnixType">
<short>Unix types</short>
</element>

<!-- constant Visibility: default -->
<element name="IPPROTO_IP">
<short>Dummy protocol for TCP.</short>
</element>

<!-- constant Visibility: default -->
<element name="IPPROTO_HOPOPTS">
<short>IPv6 Hop-by-Hop options.</short>
</element>

<!-- constant Visibility: default -->
<element name="IPPROTO_ICMP">
<short>Internet Control Message Protocol.</short>
</element>

<!-- constant Visibility: default -->
<element name="IPPROTO_IGMP">
<short>Internet Group Management Protocol.</short>
</element>

<!-- constant Visibility: default -->
<element name="IPPROTO_IPIP">
<short>IPIP tunnels (older KA9Q tunnels use 94).</short>
</element>

<!-- constant Visibility: default -->
<element name="IPPROTO_TCP">
<short>Transmission Control Protocol.</short>
</element>

<!-- constant Visibility: default -->
<element name="IPPROTO_EGP">
<short>Exterior Gateway Protocol.</short>
</element>

<!-- constant Visibility: default -->
<element name="IPPROTO_PUP">
<short>PUP protocol.</short>
</element>

<!-- constant Visibility: default -->
<element name="IPPROTO_UDP">
<short>User Datagram Protocol.</short>
</element>

<!-- constant Visibility: default -->
<element name="IPPROTO_IDP">
<short>XNS IDP protocol.</short>
</element>

<!-- constant Visibility: default -->
<element name="IPPROTO_TP">
<short>SO Transport Protocol Class 4.</short>
</element>

<!-- constant Visibility: default -->
<element name="IPPROTO_IPV6">
<short>IPv6 header.</short>
</element>

<!-- constant Visibility: default -->
<element name="IPPROTO_ROUTING">
<short>IPv6 routing header.</short>
</element>

<!-- constant Visibility: default -->
<element name="IPPROTO_FRAGMENT">
<short>IPv6 fragmentation header.</short>
</element>

<!-- constant Visibility: default -->
<element name="IPPROTO_RSVP">
<short>Reservation Protocol.</short>
</element>

<!-- constant Visibility: default -->
<element name="IPPROTO_GRE">
<short>General Routing Encapsulation.</short>
</element>

<!-- constant Visibility: default -->
<element name="IPPROTO_ESP">
<short>encapsulating security payload.</short>
</element>

<!-- constant Visibility: default -->
<element name="IPPROTO_AH">
<short>authentication header.</short>
</element>

<!-- constant Visibility: default -->
<element name="IPPROTO_ICMPV6">
<short>ICMPv6.</short>
</element>

<!-- constant Visibility: default -->
<element name="IPPROTO_NONE">
<short>IPv6 no next header.</short>
</element>

<!-- constant Visibility: default -->
<element name="IPPROTO_DSTOPTS">
<short>IPv6 destination options.</short>
</element>

<!-- constant Visibility: default -->
<element name="IPPROTO_MTP">
<short>Multicast Transport Protocol.</short>
</element>

<!-- constant Visibility: default -->
<element name="IPPROTO_ENCAP">
<short>Encapsulation Header.</short>
</element>

<!-- constant Visibility: default -->
<element name="IPPROTO_PIM">
<short>Protocol Independent Multicast.</short>
</element>

<!-- constant Visibility: default -->
<element name="IPPROTO_COMP">
<short>Compression Header Protocol.</short>
</element>

<!-- constant Visibility: default -->
<element name="IPPROTO_SCTP">
<short>Stream Control Transmission Protocol.</short>
</element>

<!-- constant Visibility: default -->
<element name="IPPROTO_RAW">
<short>Raw IP packets.</short>
</element>

<!-- constant Visibility: default -->
<element name="IPPROTO_MAX">
<short>Maximum value for IPPROTO options</short>
</element>

<!-- constant Visibility: default -->
<element name="IP_OPTIONS">
<short>IP per-packet options.</short>
</element>

<!-- constant Visibility: default -->
<element name="IP_HDRINCL">
<short>Header is included with data.</short>
</element>

<!-- constant Visibility: default -->
<element name="IP_TOS">
<short>IP type of service and precedence.</short>
</element>

<!-- constant Visibility: default -->
<element name="IP_TTL">
<short>IP time to live.</short>
</element>

<!-- constant Visibility: default -->
<element name="IP_RECVOPTS">
<short>Receive all IP options w/datagram.</short>
</element>

<!-- constant Visibility: default -->
<element name="IP_RETOPTS">
<short>Set/get IP per-packet options.</short>
</element>

<!-- constant Visibility: default -->
<element name="IP_RECVRETOPTS">
<short>Receive IP options for response.</short>
</element>

<!-- constant Visibility: default -->
<element name="IP_MULTICAST_IF">
<short>set/get IP multicast i/f</short>
</element>

<!-- constant Visibility: default -->
<element name="IP_MULTICAST_TTL">
<short>set/get IP multicast ttl</short>
</element>

<!-- constant Visibility: default -->
<element name="IP_MULTICAST_LOOP">
<short>set/get IP multicast loopback</short>
</element>

<!-- constant Visibility: default -->
<element name="IP_ADD_MEMBERSHIP">
<short>add an IP group membership</short>
</element>

<!-- constant Visibility: default -->
<element name="IP_DROP_MEMBERSHIP">
<short>drop an IP group membership</short>
</element>

<!-- constant Visibility: default -->
<element name="IP_UNBLOCK_SOURCE">
<short>unblock data from source</short>
</element>

<!-- constant Visibility: default -->
<element name="IP_BLOCK_SOURCE">
<short>block data from source</short>
</element>

<!-- constant Visibility: default -->
<element name="IP_ADD_SOURCE_MEMBERSHIP">
<short>join source group</short>
</element>

<!-- constant Visibility: default -->
<element name="IP_DROP_SOURCE_MEMBERSHIP">
<short>leave source group</short>
</element>

<!-- constant Visibility: default -->
<element name="IP_MSFILTER">
<short>Undocumented ?</short>
</element>

<!-- constant Visibility: default -->
<element name="MCAST_JOIN_GROUP">
<short>join any-source group</short>
</element>

<!-- constant Visibility: default -->
<element name="MCAST_BLOCK_SOURCE">
<short>block from given group</short>
</element>

<!-- constant Visibility: default -->
<element name="MCAST_UNBLOCK_SOURCE">
<short>unblock from given group</short>
</element>

<!-- constant Visibility: default -->
<element name="MCAST_LEAVE_GROUP">
<short>leave any-source group</short>
</element>

<!-- constant Visibility: default -->
<element name="MCAST_JOIN_SOURCE_GROUP">
<short>join source-spec gruoup</short>
</element>

<!-- constant Visibility: default -->
<element name="MCAST_LEAVE_SOURCE_GROUP">
<short>leave source-spec group</short>
</element>

<!-- constant Visibility: default -->
<element name="MCAST_MSFILTER">
<short>Undocumented ?</short>
</element>

<!-- constant Visibility: default -->
<element name="MCAST_EXCLUDE">
<short>Undocumented ?</short>
</element>

<!-- constant Visibility: default -->
<element name="MCAST_INCLUDE">
<short>Undocumented ?</short>
</element>

<!-- constant Visibility: default -->
<element name="IP_ROUTER_ALERT">
<short>Undocumented ?</short>
</element>

<!-- constant Visibility: default -->
<element name="IP_PKTINFO">
<short>Undocumented ?</short>
</element>

<!-- constant Visibility: default -->
<element name="IP_PKTOPTIONS">
<short>Undocumented ?</short>
</element>

<!-- constant Visibility: default -->
<element name="IP_PMTUDISC">
<short>Undocumented ?</short>
</element>

<!-- constant Visibility: default -->
<element name="IP_MTU_DISCOVER">
<short>Undocumented ?</short>
</element>

<!-- constant Visibility: default -->
<element name="IP_RECVERR">
<short>Undocumented ?</short>
</element>

<!-- constant Visibility: default -->
<element name="IP_RECVTTL">
<short>Undocumented ?</short>
</element>

<!-- constant Visibility: default -->
<element name="IP_RECVTOS">
<short>Undocumented ?</short>
</element>

<!-- constant Visibility: default -->
<element name="IP_PMTUDISC_DONT">
<short>Never send DF frames.</short>
</element>

<!-- constant Visibility: default -->
<element name="IP_PMTUDISC_WANT">
<short>Use per route hints.</short>
</element>

<!-- constant Visibility: default -->
<element name="IP_PMTUDISC_DO">
<short>Always DF.</short>
</element>

<!-- constant Visibility: default -->
<element name="SOL_IP">
<short>Undocumented ?</short>
</element>

<!-- constant Visibility: default -->
<element name="IP_DEFAULT_MULTICAST_TTL">
<short>Undocumented ?</short>
</element>

<!-- constant Visibility: default -->
<element name="IP_DEFAULT_MULTICAST_LOOP">
<short>Undocumented ?</short>
</element>

<!-- constant Visibility: default -->
<element name="IP_MAX_MEMBERSHIPS">
<short>Maximum group memberships for multicast messages</short>
</element>

<!-- constant Visibility: default -->
<element name="IPV6_ADDRFORM">
<short>Change the IPV6 address into a different address family. Deprecated</short>
</element>

<!-- constant Visibility: default -->
<element name="IPV6_PKTINFO">
<short>Change delivery options for incoming IPV6 datagrams</short>
</element>

<!-- constant Visibility: default -->
<element name="IPV6_HOPOPTS">
<short>Deliver hop option control messages</short>
</element>

<!-- constant Visibility: default -->
<element name="IPV6_DSTOPTS">
<short>Deliver destination option control messages</short>
</element>

<!-- constant Visibility: default -->
<element name="IPV6_RTHDR">
<short>Deliver routing header control messages</short>
</element>

<!-- constant Visibility: default -->
<element name="IPV6_RXSRCRT">
<short>Undocumented Getsockopt option ?</short>
</element>

<!-- constant Visibility: default -->
<element name="IPV6_PKTOPTIONS">
<short>Undocumented Getsockopt option ?</short>
</element>

<!-- constant Visibility: default -->
<element name="IPV6_CHECKSUM">
<short>Undocumented Getsockopt option ?</short>
</element>

<!-- constant Visibility: default -->
<element name="IPV6_HOPLIMIT">
<short>Deliver an integer containing the HOP count</short>
</element>

<!-- constant Visibility: default -->
<element name="SCM_SRCRT">
<short>Undocumented Getsockopt option ?</short>
</element>

<!-- constant Visibility: default -->
<element name="IPV6_NEXTHOP">
<short>sendmsg: set next hop for IPV6 datagram</short>
</element>

<!-- constant Visibility: default -->
<element name="IPV6_AUTHHDR">
<short>GetSockOpt/SetSockopt: Deliver authentication header messages</short>
</element>

<!-- constant Visibility: default -->
<element name="IPV6_UNICAST_HOPS">
<short>GetSockOpt/SetSockopt: Get/Set unicast hop limit</short>
</element>

<!-- constant Visibility: default -->
<element name="IPV6_MULTICAST_IF">
<short>GetSockOpt/SetSockopt: Get/Set device for multicast packages on the
socket.</short>
</element>

<!-- constant Visibility: default -->
<element name="IPV6_MULTICAST_HOPS">
<short>GetSockOpt/SetSockopt: Get/Set the multicast hop limit.</short>
</element>

<!-- constant Visibility: default -->
<element name="IPV6_MULTICAST_LOOP">
<short>GetSockOpt/SetSockopt: Control whether socket sees multicast packages
that it has sent itself</short>
</element>

<!-- constant Visibility: default -->
<element name="IPV6_JOIN_GROUP">
<short>GetSockOpt/SetSockopt: Control membership (join group) in multicast groups</short>
</element>

<!-- constant Visibility: default -->
<element name="IPV6_LEAVE_GROUP">
<short>GetSockOpt/SetSockopt: Control membership (leave group)in multicast groups</short>
</element>

<!-- constant Visibility: default -->
<element name="IPV6_ROUTER_ALERT">
<short>GetSockOpt/SetSockopt: Get/Set Pass all forwarded packets containing router
alert option</short>
</element>

<!-- constant Visibility: default -->
<element name="IPV6_MTU_DISCOVER">
<short>GetSockOpt/SetSockopt: Get/Set Control path MTU Discovery on the socket</short>
</element>

<!-- constant Visibility: default -->
<element name="IPV6_MTU">
<short>GetSockOpt/SetSockopt: Get/Set the MTU for the socket</short>
</element>

<!-- constant Visibility: default -->
<element name="IPV6_RECVERR">
<short>GetSockOpt/SetSockopt: Control receiving of asynchroneous error options</short>
</element>

<!-- constant Visibility: default -->
<element name="IPV6_V6ONLY">
<short>GetSockOpt/SetSockopt: Handle IPV6 connections only</short>
</element>

<!-- constant Visibility: default -->
<element name="IPV6_JOIN_ANYCAST">
<short>Undocumented Getsockopt option ?</short>
</element>

<!-- constant Visibility: default -->
<element name="IPV6_LEAVE_ANYCAST">
<short>Undocumented Getsockopt option ?</short>
</element>

<!-- constant Visibility: default -->
<element name="IPV6_IPSEC_POLICY">
<short>Undocumented Getsockopt option ?</short>
</element>

<!-- constant Visibility: default -->
<element name="IPV6_XFRM_POLICY">
<short>Undocumented Getsockopt option ?</short>
</element>

<!-- constant Visibility: default -->
<element name="IPV6_ADD_MEMBERSHIP">
<short>Undocumented Getsockopt option ?</short>
</element>

<!-- constant Visibility: default -->
<element name="IPV6_DROP_MEMBERSHIP">
<short>Undocumented Getsockopt option ?</short>
</element>

<!-- constant Visibility: default -->
<element name="IPV6_RXHOPOPTS">
<short>Undocumented Getsockopt option ?</short>
</element>

<!-- constant Visibility: default -->
<element name="IPV6_RXDSTOPTS">
<short>Undocumented Getsockopt option ?</short>
</element>

<!-- constant Visibility: default -->
<element name="IPV6_PMTUDISC_DONT">
<short>Never send DF frames.</short>
</element>

<!-- constant Visibility: default -->
<element name="IPV6_PMTUDISC_WANT">
<short>Use per route hints.</short>
</element>

<!-- constant Visibility: default -->
<element name="IPV6_PMTUDISC_DO">
<short>Always DF.</short>
</element>

<!-- constant Visibility: default -->
<element name="SOL_IPV6">
<short>Socket level values for IPv6: IPV6</short>
</element>

<!-- constant Visibility: default -->
<element name="SOL_ICMPV6">
<short>Socket level values for IPv6: ICMPV6</short>
</element>

<!-- constant Visibility: default -->
<element name="IPV6_RTHDR_LOOSE">
<short>Hop doesn't need to be neighbour.</short>
</element>

<!-- constant Visibility: default -->
<element name="IPV6_RTHDR_STRICT">
<short>Hop must be a neighbour.</short>
</element>

<!-- constant Visibility: default -->
<element name="IPV6_RTHDR_TYPE_0">
<short>IPv6 Routing header type 0.</short>
</element>

<!-- constant Visibility: default -->
<element name="INADDR_ANY">
<short>A bitmask matching any IP address on the local machine.</short>
</element>

<!-- constant Visibility: default -->
<element name="INADDR_NONE">
<short>A bitmask matching no valid IP address</short>
</element>

<!-- variable Visibility: default -->
<element name="in_addr.s_bytes">
<short>Address as bytes</short>
</element>

<!-- variable Visibility: default -->
<element name="TSockAddr.sin_family">
<short>Internet socket family</short>
</element>

<!-- variable Visibility: default -->
<element name="TSockAddr.sin_port">
<short>Internet socket port</short>
</element>

<!-- variable Visibility: default -->
<element name="TSockAddr.sin_addr">
<short>Internet socket host address</short>
</element>

<!-- variable Visibility: default -->
<element name="TSockAddr.sin_zero">
<short>Padding</short>
</element>


<!-- variable Visibility: default -->
<element name="Tin6_addr.u6_addr8">
<short>IPV6 socket address as bytes</short>
</element>

<!-- variable Visibility: default -->
<element name="Tin6_addr.u6_addr16">
<short>IPV6 socket address as words</short>
</element>

<!-- variable Visibility: default -->
<element name="Tin6_addr.u6_addr32">
<short>IPV6 socket address as cardinals</short>
</element>

<!-- variable Visibility: default -->
<element name="Tin6_addr.s6_addr8">
<short>IPV6 socket address as shortints</short>
</element>

<!-- variable Visibility: default -->
<element name="Tin6_addr.s6_addr">
<short>IPV6 socket address as shortints</short>
</element>

<!-- variable Visibility: default -->
<element name="Tin6_addr.s6_addr16">
<short>IPV6 socket address as smallints</short>
</element>

<!-- variable Visibility: default -->
<element name="Tin6_addr.s6_addr32">
<short>IPV6 socket address as longints</short>
</element>

<!-- constant Visibility: default -->
<element name="EsockEINTR">
<short>Alias : operation interrupted</short>
</element>

<!-- constant Visibility: default -->
<element name="EsockEBADF">
<short>Alias: bad file descriptor</short>
</element>

<!-- constant Visibility: default -->
<element name="EsockEFAULT">
<short>Alias: an error occurred</short>
</element>

<!-- constant Visibility: default -->
<element name="EsockEINVAL">
<short>Alias: Invalid value specified</short>
</element>

<!-- alias type Visibility: default -->
<element name="TSockLen">
<short>Type to specify socket length in fpBind and fpConnect</short>
<descr>
The actual type of <var>TSockLen</var> depends on the platform.
</descr>
<seealso>
<link id="fpBind"/>
<link id="fpConnect"/>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="TCP_NODELAY">
<short>Get/Set No delay flag: disable Nagle algorithm</short>
</element>

<!-- constant Visibility: default -->
<element name="TCP_MAXSEG">
<short>Get/Set Maximum segment size</short>
</element>

<!-- constant Visibility: default -->
<element name="TCP_CORK">
<short>Get/Set CORK algorithm: Send only complete packets</short>
</element>

<!-- constant Visibility: default -->
<element name="TCP_KEEPIDLE">
<short>Get/Set inactivity interval between KEEPALIVE transmissions.</short>
</element>

<!-- constant Visibility: default -->
<element name="TCP_KEEPINTVL">
<short>Get/Set retry interval for unacknowledged KEEPALIVE transmissions.</short>
</element>

<!-- constant Visibility: default -->
<element name="TCP_KEEPCNT">
<short>Get/Set retry count for unacknowledged KEEPALIVE transmissions.</short>
</element>

<!-- constant Visibility: default -->
<element name="TCP_SYNCNT">
<short>Get/Set number of SYN packets to send before givin up on connection establishment</short>
</element>

<!-- constant Visibility: default -->
<element name="TCP_LINGER2">
<short>Get/Set Linger2 flag</short>
</element>

<!-- constant Visibility: default -->
<element name="TCP_DEFER_ACCEPT">
<short>Get/Set deferred accept on server socket</short>
</element>

<!-- constant Visibility: default -->
<element name="TCP_WINDOW_CLAMP">
<short>Get/Set maximum packet size</short>
</element>

<!-- constant Visibility: default -->
<element name="TCP_INFO">
<short>Get TCP connection information (Linux only)</short>
</element>

<!-- constant Visibility: default -->
<element name="TCP_QUICKACK">
<short>Get/Set quik ACK packet option.</short>
</element>

<!-- constant Visibility: default -->
<element name="TCP_CONGESTION">
<short>Get/set  the  congestion-control algorithm for this socket</short>
</element>

<!-- constant Visibility: default -->
<element name="TCP_MD5SIG">
<short>Get/Set TCP MD5 signature option</short>
</element>

<!-- constant Visibility: default -->
<element name="UDP_CORK">
<short>Get/Set UDP CORK algorithm on datagram sockets</short>
</element>

<!-- constant Visibility: default -->
<element name="UDP_ENCAP">
<short>Get/Set UDP encapsulation flag for IPSec datagram sockets</short>
</element>

<!-- constant Visibility: default -->
<element name="UDP_ENCAP_ESPINUDP_NON_IKE">
<short>? Undocumented datagram option, IPSec related</short>
</element>

<!-- constant Visibility: default -->
<element name="UDP_ENCAP_ESPINUDP">
<short>?  Undocumented datagram option, IPSec related</short>
</element>

<!-- constant Visibility: default -->
<element name="UDP_ENCAP_L2TPINUDP">
<short>?  Undocumented datagram option, IPSec related</short>
</element>

<!-- alias type Visibility: default -->
<element name="TSockAddr6">
<short>Alias for <var>sockaddr_in6</var>/></short>
<descr>
<var>TSockAddr6</var> is an alias for <link id="sockaddr6_in"/>
</descr>
<seealso>
<link id="sockaddr6_in"/>
</seealso>
</element>

<!-- pointer type Visibility: default -->
<element name="PSockAddr6">
<short>Pointer to <var>TSockAddr6</var></short>
<descr>
<var>PSockAddr6</var> is a pointer to a record of type <link
id="TSockAddr6"/>.
</descr>
<seealso>
<link id="TSockAddr6"/>.
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="EsockADDRINUSE">
<short>Error number when socket address is already in use</short>
<descr>
<var>EsockADDRINUSE</var> is the error reported by <link id="fpBind"/> when
the socket is already in use.
</descr>
<seealso>
<link id="fpBind"/>
</seealso>
</element>

</module>
</package>
</fpdoc-descriptions>
