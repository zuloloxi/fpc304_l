<?xml version="1.0" encoding="ISO-8859-1"?>
<fpdoc-descriptions>
<!--  
   $Id: sysutils.xml,v 1.12 2005/05/07 09:41:09 michael Exp $
    This file is part of the FPC documentation. -->
    Copyright (C) 1999, by Michael Van Canneyt 
  
    The FPC documentation is free text; you can redistribute it and/or 
    modify it under the terms of the GNU Library General Public License as 
    published by the Free Software Foundation; either version 2 of the 
    License, or (at your option) any later version. 
  
    The FPC Documentation is distributed in the hope that it will be useful, 
    but WITHOUT ANY WARRANTY; without even the implied warranty of 
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU 
    Library General Public License for more details. 
  
    You should have received a copy of the GNU Library General Public 
    License along with the FPC documentation; see the file COPYING.LIB.  If not, 
    write to the Free Software Foundation, Inc., 59 Temple Place - Suite 330, 
    Boston, MA 02111-1307, USA. 
 -->
<package name="rtl">
<module name="sysutils">
<short>Various system utilities.</short>
<!-- \FPCexampledir{sysutex} -->
<descr>
This documentation describes the <file>sysutils</file> unit. The <file>sysutils</file> unit
was started by Gertjan Schouten, and completed by Michael Van Canneyt.
It aims to be compatible to the Delphi <file>sysutils</file> unit, but in contrast
with  the latter, it is designed to work on multiple platforms. It is implemented
on all supported platforms.
</descr>

<topic name="StringFunctions">
<short>String functions</short>
<descr>
<p>
Functions for handling strings.
</p>
<table>
<th><td>Name</td><td>Description</td></th>
<tr><td><link id="AnsiCompareStr"/></td><td>Compare two strings</td></tr>
<tr><td><link id="AnsiCompareText"/></td><td>Compare two strings, case insensitive</td></tr>
<tr><td><link id="AnsiExtractQuotedStr"/></td><td>Removes quotes from string</td></tr>
<tr><td><link id="AnsiLastChar"/></td><td>Get last character of string</td></tr>
<tr><td><link id="AnsiLowerCase"/></td><td>Convert string to all-lowercase</td></tr>
<tr><td><link id="AnsiQuotedStr"/></td><td>Qoutes a string</td></tr>
<tr><td><link id="AnsiStrComp"/></td><td>Compare strings case-sensitive</td></tr>
<tr><td><link id="AnsiStrIComp"/></td><td>Compare strings case-insensitive</td></tr>
<tr><td><link id="AnsiStrLComp"/></td><td>Compare L characters of strings case sensitive</td></tr>
<tr><td><link id="AnsiStrLIComp"/></td><td>Compare L characters of strings case insensitive</td></tr>
<tr><td><link id="AnsiStrLastChar"/></td><td>Get last character of string</td></tr>
<tr><td><link id="AnsiStrLower"/></td><td>Convert string to all-lowercase</td></tr>
<tr><td><link id="AnsiStrUpper"/></td><td>Convert string to all-uppercase</td></tr>
<tr><td><link id="AnsiUpperCase"/></td><td>Convert string to all-uppercase</td></tr>
<tr><td><link id="AppendStr"/></td><td>Append 2 strings</td></tr>
<tr><td><link id="AssignStr"/></td><td>Assign value of strings on heap</td></tr>
<tr><td><link id="CompareStr"/></td><td>Compare two strings case sensitive</td></tr>
<tr><td><link id="CompareText"/></td><td>Compare two strings case insensitive</td></tr>
<tr><td><link id="DisposeStr"/></td><td>Remove string from heap</td></tr>
<tr><td><link id="IsValidIdent"/></td><td>Is string a valid pascal identifier</td></tr>
<tr><td><link id="LastDelimiter"/></td><td>Last occurance of character in a string</td></tr>
<tr><td><link id="LeftStr"/></td><td>Get first N characters of a string</td></tr>
<tr><td><link id="LoadStr"/></td><td>Load string from resources</td></tr>
<tr><td><link id="LowerCase"/></td><td>Convert string to all-lowercase</td></tr>
<tr><td><link id="NewStr"/></td><td>Allocate new string on heap</td></tr>
<tr><td><link id="RightStr"/></td><td>Get last N characters of a string</td></tr>
<tr><td><link id="StrAlloc"/></td><td>Allocate memory for string</td></tr>
<tr><td><link id="StrBufSize"/></td><td>Reserve memory for a string</td></tr>
<tr><td><link id="StrDispose"/></td><td>Remove string from heap</td></tr>
<tr><td><link id="StrPas"/></td><td>Convert PChar to pascal string</td></tr>
<tr><td><link id="StrPCopy"/></td><td>Copy pascal string</td></tr>
<tr><td><link id="StrPLCopy"/></td><td>Copy N bytes of pascal string</td></tr>
<tr><td><link id="UpperCase"/></td><td>Convert string to all-uppercase</td></tr>
</table>
</descr>
</topic>

<topic name="FormatStrings">
<short>Formatting strings</short>
<descr>
<p>
Functions for formatting strings.
</p>
<table>
<th><td>Name</td><td>Description</td></th>
<tr><td><link id="AdjustLineBreaks"/></td><td>Convert line breaks to line breaks for system</td></tr>
<tr><td><link id="FormatBuf"/></td><td>Format a buffer</td></tr>
<tr><td><link id="Format"/></td><td>Format arguments in string</td></tr>
<tr><td><link id="FmtStr"/></td><td>Format buffer</td></tr>
<tr><td><link id="QuotedStr"/></td><td>Quote a string</td></tr>
<tr><td><link id="StrFmt"/></td><td>Format arguments in a string</td></tr>
<tr><td><link id="StrLFmt"/></td><td>Format maximum L characters in a string</td></tr>
<tr><td><link id="TrimLeft"/></td><td>Remove whitespace at the left of a string</td></tr>
<tr><td><link id="TrimRight"/></td><td>Remove whitespace at the right of a string</td></tr>
<tr><td><link id="Trim"/></td><td>Remove whitespace at both ends of a string</td></tr>
</table>
</descr>
</topic>

<topic name="FormatChars">
<short>Date and time formatting characters</short>
<descr>
<p>
Various date and time formatting routines accept a format string to format the date and or time. 
The following characters can be used to control the date and time formatting:
</p>
<dl>
<dt>c</dt><dd>Formats date using <var>shortdateformat</var> and formats time using <var>longtimeformat</var> if the time is not zero.</dd>
<dt>f</dt><dd>Same as c, but adds the time even if it is zero.</dd>
<dt>d</dt><dd>day of month</dd>
<dt>dd</dt><dd>day of month (leading zero)</dd>
<dt>ddd</dt><dd>day of week (abbreviation)</dd>
<dt>dddd</dt><dd>day of week (full)</dd>
<dt>ddddd</dt><dd>shortdateformat</dd>
<dt>dddddd</dt><dd>longdateformat</dd>
<dt>m</dt><dd>month or minutes if preceded by h or hh specifiers.</dd>
<dt>mm</dt><dd>month or minutes if preceded by h or hh specifiers, with leading zero.</dd>
<dt>mmm</dt><dd>month (abbreviation)</dd>
<dt>mmmm</dt><dd>month (full)</dd>
<dt>y</dt><dd>year (2 digits)</dd>
<dt>yy</dt><dd>year (two digits)</dd>
<dt>yyyy</dt><dd>year (with century)</dd>
<dt>h</dt><dd>hour</dd>
<dt>hh</dt><dd>hour (leading zero)</dd>
<dt>n</dt><dd>minute</dd>
<dt>nn</dt><dd>minute (leading zero)</dd>
<dt>s</dt><dd>second</dd>
<dt>ss</dt><dd>second (leading zero)</dd>
<dt>t</dt><dd>shorttimeformat</dd>
<dt>tt</dt><dd>longtimeformat</dd>
<dt>am/pm</dt><dd>use 12 hour clock and display am and pm accordingly</dd>
<dt>a/p</dt><dd>use 12 hour clock and display a and p accordingly</dd>
<dt>/</dt><dd>insert date seperator</dd>
<dt>:</dt><dd>insert time seperator</dd>
<dt>"xx"</dt><dd>literal text</dd>
<dt>'xx'</dt><dd>literal text</dd>
<dt>z</dt><dd>milliseconds</dd>
<dt>zzz</dt><dd>milliseconds(leading zero)</dd>
<dt>[h]</dt><dd>hours including the hours of the full days (i.e. can be > 24). </dd>
<dt>[hh]</dt><dd>hours with leading zero, including the hours of the full days (i.e. can be > 24)</dd>
<dt>[n]</dt><dd>minutes including the minutes of the full hours and days</dd>
<dt>[nn]</dt><dd>minutes with leading zero, including the minutes of the full hours and days</dd>
<dt>[s]</dt><dd>seconds including the seconds of the full minutes, hours and days.</dd>
<dt>[ss]</dt><dd>seconds with leading zero, including the seconds of the full minutes, hours and days.</dd>
</dl>
<p>
The forms in square brackets are only allowed if the fdPeriod option is included in the <var>Options</var> argument of FormatDateTime.
</p>
<p>
The date and time separators are taken from the <link id="DefaultFormatSettings"/> record, unless a
<link id="TFormatSettings"/> record is passed to the <link
id="FormatDateTime"/> function. 
</p>
<p>
Note that to include any of the above characters literally in the result
string, they must be enclosed in double quotes.
</p>
</descr>
<seealso>
<link id="DefaultFormatSettings"/>
<link id="TFormatSettings"/>
<link id="FormatDateTime"/>
</seealso>
</topic>

<topic name="PCharFunctions">
<short>PChar related functions</short>
<descr>
<p>
Most PChar functions are the same as their counterparts in the <file>STRINGS</file>
unit. The following functions are the same :
</p>
<ol>
<li><link id="StrCat"/> : Concatenates two <var>PChar</var> strings.</li>
<li><link id="StrComp"/> : Compares two <var>PChar</var> strings.</li>
<li><link id="StrCopy"/> : Copies a <var>PChar</var> string.</li>
<li><link id="StrECopy"/> : Copies a <var>PChar</var> string and returns a pointer to
the terminating null byte.</li>
<li><link id="StrEnd"/> : Returns a pointer to the terminating null byte.</li>
<li><link id="StrIComp"/> : Case insensitive compare of 2 <var>PChar</var> strings.</li>
<li><link id="StrLCat"/> : Appends at most L characters from one <var>PChar</var> to
another <var>PChar</var>.
</li>
<li><link id="StrLComp"/> : Case sensitive compare of at most L characters of 2 <var>PChar</var> strings.
</li>
<li><link id="StrLCopy"/> : Copies at most L characters from one <var>PChar</var> to another.
</li>
<li><link id="StrLen"/> : Returns the length (exclusive terminating null byte)
of a <var>PChar</var> string.</li>
<li><link id="StrLIComp"/> : Case insensitive compare of at most L characters of 2
 <var>PChar</var> strings.
</li>
<li><link id="StrLower"/> : Converts a <var>PChar</var> to all lowercase letters.
</li>
<li><link id="StrMove"/> : Moves one <var>PChar</var> to another.
</li>
<li><link id="StrNew"/> : Makes a copy of a <var>PChar</var> on the heap, and returns
a pointer to this copy.
</li>
<li><link id="StrPos"/> : Returns the position of one <var>PChar</var> string in
another?
</li>
<li><link id="StrRScan"/> : returns a pointer to the last occurrence of on
 <var>PChar</var> string in another one.
</li>
<li><link id="StrScan"/> : returns a pointer to the first occurrence of on
 <var>PChar</var> string in another one.
</li>
<li><link id="StrUpper"/> : Converts a <var>PChar</var> to all uppercase
letters.</li>
</ol>
<p>
The subsequent functions are different from their counterparts in
<file>STRINGS</file>, although the same examples can be used.
</p>
</descr>
</topic>


<topic name="IORoutines">
<short>File input/output routines</short>
<descr>
<p>
Functions for reading/writing to file.
</p>
<table>
<th><td>Name</td><td>Description</td></th>
<tr><td><link id="FileCreate"/></td><td>Create a file and return handle</td></tr>
<tr><td><link id="FileOpen"/></td><td>Open file end return handle</td></tr>
<tr><td><link id="FileRead"/></td><td>Read from file</td></tr>
<tr><td><link id="FileSeek"/></td><td>Set file position</td></tr>
<tr><td><link id="FileTruncate"/></td><td>Truncate file length</td></tr>
<tr><td><link id="FileWrite"/></td><td>Write to file</td></tr>
<tr><td><link id="FileClose"/></td><td>Close file handle</td></tr>
</table>
</descr>
</topic>

<topic name="FileNameRoutines">
<short>FileName handling routines</short>
<descr>
<p>
Functions for file manipulation.
</p>
<table>
<th><td>Name</td><td>Description</td></th>
<tr><td><link id="AnsiCompareFileName"/></td><td>Compare 2 filenames</td></tr>
<tr><td><link id="AnsiLowerCaseFileName"/></td><td>Create lowercase filename</td></tr>
<tr><td><link id="AnsiUpperCaseFileName"/></td><td>Create uppercase filename</td></tr>
<tr><td><link id="AddDisk"/></td><td>Add disk to list of disk drives</td></tr>
<tr><td><link id="ChangeFileExt"/></td><td>Change extension of file name</td></tr>
<tr><td><link id="CreateDir"/></td><td>Create a directory</td></tr>
<tr><td><link id="DeleteFile"/></td><td>Delete a file</td></tr>
<tr><td><link id="DiskFree"/></td><td>Free space on disk</td></tr>
<tr><td><link id="DiskSize"/></td><td>Total size of disk</td></tr>
<tr><td><link id="ExpandFileName"/></td><td>Create full file name</td></tr>
<tr><td><link id="ExpandFileNameCase"/></td><td>Create full file name case insensitively</td></tr>
<tr><td><link id="ExpandUNCFileName"/></td><td>Create full UNC file name</td></tr>
<tr><td><link id="ExtractFileDir"/></td><td>Extract drive and directory part of filename</td></tr>
<tr><td><link id="ExtractFileDrive"/></td><td>Extract drive part of filename</td></tr>
<tr><td><link id="ExtractFileExt"/></td><td>Extract extension part of filename</td></tr>
<tr><td><link id="ExtractFileName"/></td><td>Extract name part of filename</td></tr>
<tr><td><link id="ExtractFilePath"/></td><td>Extrct path part of filename</td></tr>
<tr><td><link id="ExtractRelativePath"/></td><td>Construct relative path between two files</td></tr>
<tr><td><link id="FileAge"/></td><td>Return file age</td></tr>
<tr><td><link id="FileDateToDateTime"/></td><td>Convert file date to system date</td></tr>
<tr><td><link id="FileExists"/></td><td>Determine whether a file exists on disk</td></tr>
<tr><td><link id="FileGetAttr"/></td><td>Get attributes of file</td></tr>
<tr><td><link id="FileGetDate"/></td><td>Get date of last file modification</td></tr>
<tr><td><link id="FileSearch"/></td><td>Search for file in path</td></tr>
<tr><td><link id="FileSetAttr"/></td><td>Get file attributes</td></tr>
<tr><td><link id="FileSetDate"/></td><td>Get file dates</td></tr>
<tr><td><link id="FindFirst"/></td><td>Start finding a file</td></tr>
<tr><td><link id="FindNext"/></td><td>Find next file</td></tr>
<tr><td><link id="GetCurrentDir"/></td><td>Return current working directory</td></tr>
<tr><td><link id="RemoveDir"/></td><td>Remove a directory from disk</td></tr>
<tr><td><link id="RenameFile"/></td><td>Rename a file on disk</td></tr>
<tr><td><link id="SameFileName"/></td><td>Check whether 2 filenames are the same</td></tr>
<tr><td><link id="SetCurrentDir"/></td><td>Set current working directory</td></tr>
<tr><td><link id="SetDirSeparators"/></td><td>Set directory separator characters</td></tr>
<tr><td><link id="FindClose"/></td><td>Stop searching a file</td></tr>
<tr><td><link id="DoDirSeparators"/></td><td>Replace directory separator characters</td></tr>
</table>
</descr>
</topic>

<topic name="DateTimeRoutines">
<short>Date/time routines</short>
<descr>
<p>
Functions for date and time handling.
</p>
<table>
<th><td>Name</td><td>Description</td></th>
<tr><td><link id="DateTimeToFileDate"/></td><td>Convert DateTime type to file date</td></tr>
<tr><td><link id="DateTimeToStr"/></td><td>Construct string representation of DateTime</td></tr>
<tr><td><link id="DateTimeToString"/></td><td>Construct string representation of DateTime</td></tr>
<tr><td><link id="DateTimeToSystemTime"/></td><td>Convert DateTime to system time</td></tr>
<tr><td><link id="DateTimeToTimeStamp"/></td><td>Convert DateTime to timestamp</td></tr>
<tr><td><link id="DateToStr"/></td><td>Construct string representation of date</td></tr>
<tr><td><link id="Date"/></td><td>Get current date</td></tr>
<tr><td><link id="DayOfWeek"/></td><td>Get day of week</td></tr>
<tr><td><link id="DecodeDate"/></td><td>Decode DateTime to year month and day</td></tr>
<tr><td><link id="DecodeTime"/></td><td>Decode DateTime to hours, minutes and seconds</td></tr>
<tr><td><link id="EncodeDate"/></td><td>Encode year, day and month to DateTime</td></tr>
<tr><td><link id="EncodeTime"/></td><td>Encode hours, minutes and seconds to DateTime</td></tr>
<tr><td><link id="FormatDateTime"/></td><td>Return string representation of DateTime</td></tr>
<tr><td><link id="IncMonth"/></td><td>Add 1 to month</td></tr>
<tr><td><link id="IsLeapYear"/></td><td>Determine if year is leap year</td></tr>
<tr><td><link id="MSecsToTimeStamp"/></td><td>Convert nr of milliseconds to timestamp</td></tr>
<tr><td><link id="Now"/></td><td>Get current date and time</td></tr>
<tr><td><link id="StrToDateTime"/></td><td>Convert string to DateTime</td></tr>
<tr><td><link id="StrToDate"/></td><td>Convert string to date</td></tr>
<tr><td><link id="StrToTime"/></td><td>Convert string to time</td></tr>
<tr><td><link id="SystemTimeToDateTime"/></td><td>Convert system time to datetime</td></tr>
<tr><td><link id="TimeStampToDateTime"/></td><td>Convert time stamp to DateTime</td></tr>
<tr><td><link id="TimeStampToMSecs"/></td><td>Convert Timestamp to number of millicseconds</td></tr>
<tr><td><link id="TimeToStr"/></td><td>return string representation of Time</td></tr>
<tr><td><link id="Time"/></td><td>Get current time</td></tr>
</table>
</descr>
</topic>

<topic name="ConversionRoutines">
<short>Miscellaneous conversion routines</short>
<descr>
<p>
Functions for various conversions.
</p>
<table>
<th><td>Name</td><td>Description</td></th>
<tr><td><link id="BCDToInt"/></td><td>Convert BCD number to integer</td></tr>
<tr><td><link id="CompareMem"/></td><td>Compare two memory regions</td></tr>
<tr><td><link id="FloatToStrF"/></td><td>Convert float to formatted string</td></tr>
<tr><td><link id="FloatToStr"/></td><td>Convert float to string</td></tr>
<tr><td><link id="FloatToText"/></td><td>Convert float to string</td></tr>
<tr><td><link id="FormatFloat"/></td><td>Format a floating point value</td></tr>
<tr><td><link id="GetDirs"/></td><td>Split string in list of directories</td></tr>
<tr><td><link id="IntToHex"/></td><td>return hexadecimal representation of integer</td></tr>
<tr><td><link id="IntToStr"/></td><td>return decumal representation of integer</td></tr>
<tr><td><link id="StrToIntDef"/></td><td>Convert string to integer with default value</td></tr>
<tr><td><link id="StrToInt"/></td><td>Convert string to integer</td></tr>
<tr><td><link id="StrToFloat"/></td><td>Convert string to float</td></tr>
<tr><td><link id="TextToFloat"/></td><td>Convert null-terminated string to float</td></tr>
</table>
</descr>
</topic>

<topic name="UnicodeAndCodePages">
<short>Unicode and codepage awareness</short>
<descr>
<p>
The many functions that deal with filenames in the sysutils routines have been changed 
from <var>AnsiString</var> to RawByteString so they do not perform implict codepage conversions
to the ansi code page. At the same time, overloaded versions that accept a
unicode string have been created.
</p>
<p>
For routines that access actual OS functions using single-byte string APIS,
the strings are converted to ensure that the OS routine receives a string
with the correct encoding when using single-byte strings. 
This encoding is normally the <link id="#rtl.system.DefaultFileSystemCodePage">DefaultFileSystemCodePage</link>
encoding.
</p>
<p>
On systems with a unicode I/O API (2-byte strings), the native API is used, meaning that unicode 
strings will be passed on as-is, but single-byte strings will be converted (implicitly) to Unicode.
</p>
<p>
The following is a minimal list of functions that have been changed and duplicated:
</p>
<table>
<th><td>Name</td><td>Description</td></th>
<tr><td><link id="FileCreate"/></td><td><printshort id="FileCreate"/></td></tr>
<tr><td><link id="FileOpen"/></td><td><printshort id="FileOpen"/></td></tr>
<tr><td><link id="FileExists"/></td><td><printshort id="FileExists"/></td></tr>
<tr><td><link id="DirectoryExists"/></td><td><printshort id="DirectoryExists"/></td></tr>
<tr><td><link id="FileSetDate"/></td><td><printshort id="FileSetDate"/></td></tr>
<tr><td><link id="FileGetAttr"/></td><td><printshort id="FileGetAttr"/></td></tr>
<tr><td><link id="FileSetAttr"/></td><td><printshort id="FileSetAttr"/></td></tr>
<tr><td><link id="DeleteFile"/></td><td><printshort id="DeleteFile"/></td></tr>
<tr><td><link id="RenameFile"/></td><td><printshort id="RenameFile"/></td></tr>
<tr><td><link id="FileSearch"/></td><td><printshort id="FileSearch"/></td></tr>
<tr><td><link id="ExeSearch"/></td><td><printshort id="ExeSearch"/></td></tr>
<tr><td><link id="FindFirst"/></td><td><printshort id="FindFirst"/></td></tr>
<tr><td><link id="FindNext"/></td><td><printshort id="FindNext"/></td></tr>
<tr><td><link id="FindClose"/></td><td><printshort id="FindClose"/></td></tr>
<tr><td><link id="FileIsReadOnly"/></td><td><printshort id="FileIsReadOnly"/></td></tr>
<tr><td><link id="GetCurrentDir"/></td><td><printshort id="GetCurrentDir"/></td></tr>
<tr><td><link id="SetCurrentDir"/></td><td><printshort id="SetCurrentDir"/></td></tr>
<!--
<tr><td><link id=""/></td><td><printshort id=""/></td></tr>
-->
</table>
<p>
The following functions do not interact with the OS, but may nevertheless
change the codepage of the strings involved in their operation:
</p>
<table>
<th><td>Name</td><td>Description</td></th>
<tr><td><link id="ChangeFileExt"/></td><td><printshort id="ChangeFileExt"/></td></tr>
<tr><td><link id="ExtractFilePath"/></td><td><printshort id="ExtractFilePath"/></td></tr>
<tr><td><link id="ExtractFileDrive"/></td><td><printshort id="ExtractFileDrive"/></td></tr>
<tr><td><link id="ExtractFileName"/></td><td><printshort id="ExtractFileName"/></td></tr>
<tr><td><link id="ExtractFileExt"/></td><td><printshort id="ExtractFileExt"/></td></tr>
<tr><td><link id="ExtractFileDir"/></td><td><printshort id="ExtractFileDir"/></td></tr>
<tr><td><link id="ExtractShortPathName"/></td><td><printshort id="ExtractShortPathName"/></td></tr>
<tr><td><link id="ExpandFileName"/></td><td><printshort id="ExpandFileName"/></td></tr>
<tr><td><link id="ExpandFileNameCase"/></td><td><printshort id="ExpandFileNameCase"/></td></tr>
<tr><td><link id="ExtractRelativepath"/></td><td><printshort id="ExtractRelativepath"/></td></tr>
<tr><td><link id="ExpandUNCFileName"/></td><td><printshort id="ExpandUNCFileName"/></td></tr>
<tr><td><link id="IncludeTrailingPathDelimiter"/></td><td><printshort id="IncludeTrailingPathDelimiter"/></td></tr>
<tr><td><link id="IncludeTrailingBackslash"/></td><td><printshort id="IncludeTrailingBackslash"/></td></tr>
<tr><td><link id="ExcludeTrailingBackslash"/></td><td><printshort id="ExcludeTrailingBackslash"/></td></tr>
<tr><td><link id="ExcludeTrailingPathDelimiter"/></td><td><printshort id="ExcludeTrailingPathDelimiter"/></td></tr>
<tr><td><link id="IncludeLeadingPathDelimiter"/></td><td><printshort id="IncludeLeadingPathDelimiter"/></td></tr>
<tr><td><link id="ExcludeLeadingPathDelimiter"/></td><td><printshort id="ExcludeLeadingPathDelimiter"/></td></tr>
<tr><td><link id="IsPathDelimiter"/></td><td><printshort id="IsPathDelimiter"/></td></tr>
<tr><td><link id="DoDirSeparators"/></td><td><printshort id="DoDirSeparators"/></td></tr>
<tr><td><link id="SetDirSeparators"/></td><td><printshort id="SetDirSeparators"/></td></tr>
<tr><td><link id="GetDirs"/></td><td><printshort id="GetDirs"/></td></tr>
<tr><td><link id="ConcatPaths"/></td><td><printshort id="ConcatPaths"/></td></tr>
<tr><td><link id="GetEnvironmentVariable"/></td><td><printshort id="GetEnvironmentVariable"/></td></tr>
</table>
<!--
FileCreate, FileOpen, FileExists, DirectoryExists, FileSetDate, FileGetAttr,
FileSetAttr, DeleteFile, RenameFile, FileSearch, ExeSearch, FindFirst,
FindNext, FindClose, FileIsReadOnly, GetCurrentDir, SetCurrentDir,
ChangeFileExt, ExtractFilePath, ExtractFileDrive, ExtractFileName,
ExtractFileExt, ExtractFileDir, ExtractShortPathName, ExpandFileName,
ExpandFileNameCase, ExpandUNCFileName, ExtractRelativepath,
IncludeTrailingPathDelimiter, IncludeTrailingBackslash,
ExcludeTrailingBackslash, ExcludeTrailingPathDelimiter,
IncludeLeadingPathDelimiter, ExcludeLeadingPathDelimiter, IsPathDelimiter,
DoDirSeparators, SetDirSeparators, GetDirs, ConcatPaths,
GetEnvironmentVariable 
-->
</descr>
</topic>

<topic name="Localization">
<short>Localization support</short>
<descr>
<p>
Localization support depends on various constants and structures being
initialized correctly. On Windows and OS/2 this is done automatically: a
widestring manager is installed by default which helps taking care of the
current locale when performing various operations on strings. The various
internationalization settings (date/time format, currency, language etc) are
also initialized correctly on these platforms.
</p>
<p>
On unixes, the widestring support is in a separate unit:
<file>cwstring</file>, which loads the various needed 
functions from the C library. It should be added manually to the uses clause
of your program. No internationalization (or localisation) settings are  
applied by this unit, these must be initialized separately by including the
<file>clocale</file> unit in the uses clause of your program.
</p>
</descr>
</topic>

<topic name="TypeHelpers">
<short>Type Helpers for basic types</short>
<descr>
<p>
The sysutils unit contains type helpers for basic language types: boolean,
ordinals (shortint, smallint, byte, word, integer, cardinal, int64, wqord,
nativeint, nativeuint), strings, floating-point and GUID values.  
They can be used as-is, or they can be descended from to form your own type helpers.
</p>
</descr>
<seealso>
<link id="TGuidHelper"/>
<link id="TStringHelper"/>
<link id="TByteHelper"/>
<link id="TShortIntHelper"/>
<link id="TSmallIntHelper"/>
<link id="TWordHelper"/>
<link id="TCardinalHelper"/>
<link id="TIntegerHelper"/>
<link id="TInt64Helper"/>
<link id="TQWordHelper"/>
<link id="TNativeIntHelper"/>
<link id="TBooleanHelper"/>
<link id="TByteBoolHelper"/>
<link id="TWordBoolHelper"/>
<link id="TLongBoolHelper"/>
<link id="TSingleHelper"/>
<link id="TDoubleHelper"/>
<link id="TExtendedHelper"/>
</seealso>
</topic>


<element name="TDateTime">
<short>Type describing date/time</short>
<descr>
<p>
Many functions return or require a <var>TDateTime</var> type, which contains
a date and time in encoded form. The date and time are converted to a double
as follows:
</p>
<ul>
<li>The date part is stored in the integer part of the double as the
number of days passed since January 1, 1900.
</li>
<li>The time part is stored in the fractional part of the double, as
the number of milliseconds passed since midnight (00:00), divided by the
total number of milliseconds in a day.
</li>
</ul>
</descr>
</element>

<element name="Date">
<short>Return the current date.</short>
<descr>
<var>Date</var> returns the current date in <var>TDateTime</var> format.
</descr>
<errors>
None.
</errors>
<seealso>
<link id="Time"/>
<link id="Now"/>
</seealso>
<example file="sysutex/ex1"/>
</element>


<element name="DateTimeToFileDate">
<short>Convert a <var>TDateTime</var> value to a file age (integer)</short>
<descr>
<var>DateTimeToFileDate</var> function converts a date/time indication in
<var>TDateTime</var> format to a filedate function, such as returned for
instance by the <link id="FileAge"/> function.
</descr>
<errors>
None.
</errors>
<seealso>
<link id="Time"/>
<link id="Date"/>
<link id="FileDateToDateTime"/>,
<link id="DateTimeToSystemTime"/>
<link id="DateTimeToTimeStamp"/>
</seealso>
<example file="sysutex/ex2"/>
</element>



<element name="DateTimeToStr">
<short>Converts a <var>TDateTime</var> value to a string using a predefined format.</short>
<descr>
<p>
<var>DateTimeToStr</var> returns a string representation of
<var>DateTime</var> using the formatting specified in
<var>LongDateTimeFormat</var>. It corresponds to a call to
<var>FormatDateTime('c',DateTime)</var> (see <link id="formatchars"/>).
</p>
<p>
Note that if the time part is 0 (i.e. midnight), no time is appended.
</p>
</descr>
<errors>
None.
</errors>
<seealso>
<link id="FormatDateTime"/>
</seealso>
<example file="sysutex/ex3"/>
</element>



<element name="DateTimeToString">
<short>Converts a <var>TDateTime</var> value to a string with a given format.</short>
<descr>
<p>
<var>DateTimeToString</var> returns in <var>Result</var> a string representation of
<var>DateTime</var> using the formatting specified in <var>FormatStr</var>.
</p>
<p>
for a list of characters that can be used in the <var>FormatStr</var> formatting
string, see <link id="formatchars"/>.
</p>
<p>
Note that for 'c', if the time part is 0 (i.e. midnight), no time is appended.
</p>
</descr>
<errors>
In case a wrong formatting character is found, an <link id="EConvertError"/> is
raised.
</errors>
<seealso>
<link id="FormatDateTime"/>
<link id="formatchars"/>.
<link id="EConvertError"/>
</seealso>
<example file="sysutex/ex4"/>
</element>



<element name="DateTimeToSystemTime">
<short>Converts a <var>TDateTime</var> value to a systemtime structure.</short>
<descr>
<var>DateTimeToSystemTime</var> converts a date/time pair in <var>DateTime</var>, with
<var>TDateTime</var> format to a system time <var>SystemTime</var>.
</descr>
<errors>
None.
</errors>
<seealso>
<link id="DateTimeToFileDate"/>
<link id="SystemTimeToDateTime"/>,
<link id="DateTimeToTimeStamp"/>
</seealso>
<example file="sysutex/ex5"/>
</element>



<element name="DateTimeToTimeStamp">
<short>Converts a <var>TDateTime</var> value to a TimeStamp structure.</short>
<descr>
<var>DateTimeToSystemTime</var> converts a date/time pair in <var>DateTime</var>, with
<var>TDateTime</var> format to a <var>TTimeStamp</var> format.
</descr>
<errors>
None.
</errors>
<seealso>
<link id="DateTimeToFileDate"/>
<link id="SystemTimeToDateTime"/>,
<link id="DateTimeToSystemTime"/>
</seealso>
<example file="sysutex/ex6"/>
</element>

<element name="DateToStr">
<short>Converts a <var>TDateTime</var> value to a date string with a predefined format.</short>
<descr>
<var>DateToStr</var> converts <var>Date</var> to a string representation. It uses
<var>ShortDateFormat</var> as it's formatting string. It is hence completely
equivalent to a <var>FormatDateTime('ddddd', Date)</var>.
</descr>
<errors>
None.
</errors>
<seealso>
<link id="TimeToStr"/>
<link id="DateTimeToStr"/>
<link id="FormatDateTime"/>,
<link id="StrToDate"/>
</seealso>
<example file="sysutex/ex7"/>
</element>

<element name="DayOfWeek">
<short>Returns the day of the week.</short>
<descr>
<var>DayOfWeek</var> returns the day of the week from <var>DateTime</var>.
<var>Sunday</var> is counted as day 1, <var>Saturday</var> is counted as
day 7. The result of <var>DayOfWeek</var> can serve as an index to
the <var>LongDayNames</var> constant array, to retrieve the name of
the day.
</descr>
<errors>
None.
</errors>
<seealso>
<link id="Date"/>
<link id="DateToStr"/>
</seealso>
<example file="sysutex/ex8"/>
</element>


<element name="DecodeDate">
<short>Decode a <var>TDateTime</var> to a year,month,day triplet</short>
<descr>
<var>DecodeDate</var> decodes the Year, Month and Day stored in <var>Date</var>,
and returns them in the <var>Year</var>, <var>Month</var> and <var>Day</var> variables.
</descr>
<errors>
None.
</errors>
<seealso>
<link id="EncodeDate"/>
<link id="DecodeTime"/>.
</seealso>
<example file="sysutex/ex9"/>
</element>




<element name="DecodeTime">
<short>Decode a <var>TDateTime</var> to a hour,minute,second,millisec quartet</short>
<descr>
<var>DecodeTime</var> decodes the hours, minutes, second and milliseconds stored
in <var>Time</var>, and returns them in the <var>Hour</var>, <var>Minute</var> and
<var>Second</var> and <var>MilliSecond</var> variables.
</descr>
<errors>
None.
</errors>
<seealso>
<link id="EncodeTime"/>
<link id="DecodeDate"/>.
</seealso>
<example file="sysutex/ex10"/>
</element>

<element name="EncodeDate">
<short>Encode a Year,Month,Day to a <var>TDateTime</var> value.</short>
<descr>
<p>
<var>EncodeDate</var> encodes the <var>Year</var>, <var>Month</var> and <var>Day</var> variables to
a date in <var>TDateTime</var> format. It does the opposite of the
<link id="DecodeDate"/> procedure.
</p>
<p>
The parameters must lie withing valid ranges (boundaries included):
</p>
<dl>
<dt>Year</dt><dd>must be between 1 and 9999.</dd>
<dt>Month</dt><dd>must be within the range 1-12.</dd>
<dt>Day</dt><dd>msut be between 1 and 31.</dd>
</dl>
</descr>
<errors>
In case one of the parameters is out of it's valid range, an
<link id="EConvertError"/> exception is raised.
</errors>
<seealso>
<link id="EncodeTime"/>
<link id="DecodeDate"/>
</seealso>
<example file="sysutex/ex11"/>
</element>

<element name="EncodeTime">
<short>Encode a Hour,Min,Sec,millisec to a <var>TDateTime</var> value.</short>
<descr>
<p>
<var>EncodeTime</var> encodes the <var>Hour</var>, <var>Minute</var>, <var>Second</var>,
<var>MilliSecond</var> variables to a <var>TDateTime</var> format result.
It does the opposite of the <link id="DecodeTime"/> procedure.
</p>
<p>
The parameters must have a valid range (boundaries included):
</p>
<dl>
<dt>Hour</dt><dd>must be between 0 and 23.</dd>
<dt>Minute,second</dt><dd>must both be between 0 and 59.</dd>
<dt>Millisecond</dt><dd>must be between 0 and 999.</dd>
</dl>
</descr>
<errors>
In case one of the parameters is out of it's valid range, an
<link id="EConvertError"/> exception is raised.
</errors>
<seealso>
<link id="EncodeDate"/>
<link id="DecodeTime"/>
</seealso>
<example file="sysutex/ex12"/>
</element>

<element name="FileDateToDateTime">
<short>Convert a <var>FileDate</var> value to a <var>TDateTime</var>
value.</short>
<descr>
<var>FileDateToDateTime</var> converts the date/time encoded in <var>filedate</var>
to a <var>TDateTime</var> encoded form. It can be used to convert date/time values
returned by the <link id="FileAge"/> or <link id="FindFirst"/>/<link id="FindNext"/>
functions to <var>TDateTime</var> form.
</descr>
<errors>
None.
</errors>
<seealso>
<link id="DateTimeToFileDate"/>
</seealso>
<example file="sysutex/ex13"/>
</element>

<element name="FormatDateTime">
<short>Return a string representation of a <var>TDateTime</var> value with a given
format.</short>
<descr>
<var>FormatDateTime</var> formats the date and time encoded in <var>DateTime</var>
according to the formatting given in <var>FormatStr</var>. The complete list
of formatting characters can be found in <link id="formatchars"/>.
</descr>
<errors>
On error (such as an invalid character in the formatting string), and
<link id="EConvertError"/> exception is raised.
</errors>
<seealso>
<link id="DateTimeToStr"/>
<link id="DateToStr"/>
<link id="TimeToStr"/>
<link id="StrToDateTime"/>
<link id="EConvertError"/>
</seealso>
<example file="sysutex/ex14"/>
</element>

<element name="IncMonth">
<short>Increases the month in a <var>TDateTime</var> value with a given amount.</short>
<descr>
<var>IncMonth</var> increases the month number in <var>DateTime</var> with
<var>NumberOfMonths</var>. It wraps the result as to get a month between 1 and
12, and updates the year accordingly. <var>NumberOfMonths</var> can be negative,
and can be larger than 12 (in absolute value).
</descr>
<errors>
None.
</errors>
<seealso>
<link id="Date"/>
<link id="Time"/>
<link id="Now"/>
</seealso>
<example file="sysutex/ex15"/>
</element>

<element name="IsLeapYear">
<short>Determine whether a year is a leap year.</short>
<descr>
<var>IsLeapYear</var> returns <var>True</var> if <var>Year</var> is a leap year,
<var>False</var> otherwise.
</descr>
<errors>
None.
</errors>
<seealso>
<link id="IncMonth"/>
<link id="Date"/>
</seealso>
<example file="sysutex/ex16"/>
</element>

<element name="MSecsToTimeStamp">
<short>Convert a number of milliseconds to a <var>TDateTime</var> value.</short>
<descr>
<p>
<var>MSecsToTimeStamp</var> converts the given number of milliseconds to
a <var>TTimeStamp</var> date/time notation.
</p>
<p>
Use <var>TTimeStamp</var> variables if you need to keep very precise track of
time.
</p>
</descr>
<errors>
None.
</errors>
<seealso>
<link id="TimeStampToMSecs"/>
<link id="DateTimeToTimeStamp"/>
</seealso>
<example file="sysutex/ex17"/>
</element>

<element name="Now">
<short>Returns the current date and time.</short>
<descr>
<var>Now</var> returns the current date and time. It is equivalent to
<var>Date+Time</var>.
</descr>
<errors>
None.
</errors>
<seealso>
<link id="Date"/>
<link id="Time"/>
</seealso>
<example file="sysutex/ex18"/>
</element>

<element name="StrToDate">
<short>Convert a date string to a <var>TDateTime</var> value.</short>
<descr>
<p>
<var>StrToDate</var> converts the string <var>S</var> to a <var>TDateTime</var> date
value. The Date must consist of 1 to three digits, separated by the
<var>DateSeparator</var> character. If two numbers are given, they
are supposed to form the day and month of the current year. If only
one number is given, it is supposed to represent the day of the
current month. (This is <em>not</em> supported in Delphi)
</p>
<p>
The order of the digits (y/m/d, m/d/y, d/m/y) is determined from the
<var>ShortDateFormat</var> variable.
</p>
</descr>
<errors>
On error (e.g. an invalid date or invalid character),
an <link id="EConvertError"/> exception is raised.
</errors>
<seealso>
<link id="StrToTime"/>
<link id="DateToStr"/>
<link id="TimeToStr"/>
<link id="EConvertError"/>
</seealso>
<example file="sysutex/ex19"/>
</element>

<element name="StrToDateTime">
<short>Convert a date/time string to a <var>TDateTime</var> value.</short>
<descr>
<p>
<var>StrToDateTime</var> converts the string <var>S</var> to a <var>TDateTime</var> date
and time value. The date and time parts must be separated by a space. 
</p>
<p>
For the date part, the same restrictions apply as for the <link id="StrToDate"/>
function: The Date must consist of 1 to three numbers, separated by the
<var>DateSeparator</var> character. If two numbers are given, they
are supposed to form the day and month of the current year. If only
one number is given, it is supposed to represent the day of the
current month. (This is <em>not</em> supported in Delphi)
</p>
<p>
The order of the 3 numbers (y/m/d, m/d/y, d/m/y) is determined from the
<var>ShortDateFormat</var> variable. 
</p>
</descr>
<errors>
On error (e.g. an invalid date or invalid character),
an <link id="EConvertError"/> exception is raised.
</errors>
<seealso>
<link id="StrToDate"/>
<link id="StrToTime"/>
<link id="DateTimeToStr"/>
<link id="EConvertError"/>
</seealso>
<example file="sysutex/ex20"/>
</element>

<element name="StrToTime">
<short>Convert a time string to a <var>TDateTime</var> value.</short>
<descr>
<var>StrToTime</var> converts the string <var>S</var> to a <var>TDateTime</var> time
value. The time must consist of 1 to 4 digits, separated by the
<var>TimeSeparator</var> character. If two numbers are given, they
are supposed to form the hour and minutes.
</descr>
<errors>
On error (e.g. an invalid date or invalid character),
an <link id="EConvertError"/> exception is raised.
</errors>
<seealso>
<link id="StrToDate"/>
<link id="StrToDateTime"/>
<link id="TimeToStr"/>
<link id="EConvertError"/>
</seealso>
<example file="sysutex/ex21"/>
</element>

<element name="SystemTimeToDateTime">
<short>Convert a system time to a <var>TDateTime</var> value.</short>
<descr>
<var>SystemTimeToDateTime</var> converts a <var>TSystemTime</var> record to a
<var>TDateTime</var> style date/time indication.
</descr>
<errors>
None.
</errors>
<seealso>
<link id="DateTimeToSystemTime"/>
</seealso>
<example file="sysutex/ex22"/>
</element>

<element name="Time">
<short>Returns the current time.</short>
<descr>
<var>Time</var> returns the current time in <var>TDateTime</var> format. The date
part of the <var>TDateTimeValue</var> is set to zero.
</descr>
<errors>
None.
</errors>
<seealso>
<link id="Now"/>
<link id="Date"/>
</seealso>
<example file="sysutex/ex23"/>
</element>


<element name="TimeStampToDateTime">
<short>Convert a TimeStamp value to a <var>TDateTime</var> value.</short>
<descr>
<var>TimeStampToDateTime</var> converts <var>TimeStamp</var> to a <var>TDateTime</var>
format variable. It is the inverse operation of <link id="DateTimeToTimeStamp"/>.
</descr>
<errors>
None.
</errors>
<seealso>
<link id="DateTimeToTimeStamp"/>
<link id="TimeStampToMSecs"/>
</seealso>
<example file="sysutex/ex24"/>
</element>

<element name="TimeStampToMSecs">
<short>Converts a timestamp to a number of milliseconds.</short>
<descr>
<p>
<var>TimeStampToMSecs</var> converts <var>TimeStamp</var> to the number of milliseconds
since <var>1/1/0001</var>.
</p>
<p>
Use <var>TTimeStamp</var> variables if you need to keep very precise track of
time.
</p>
<p>
For an example, see <link id="MSecsToTimeStamp"/>.
</p>
</descr>
<errors>
None.
</errors>
<seealso>
<link id="MSecsToTimeStamp"/>
<link id="TimeStampToDateTime"/>
</seealso>
</element>

<element name="TimeToStr">
<short>Convert a <var>TDateTime</var> time to a string using a predefined format.</short>
<descr>
<var>TimeToStr</var> converts the time in <var>Time</var> to a string. It uses
the <var>LongTimeFormat</var> variable to see what formatting needs to be
applied. It is therefor entirely equivalent to a
<var>FormatDateTime('tt',Time)</var> call.
</descr>
<errors>
None.
</errors>
<seealso>
</seealso>
<example file="sysutex/ex25"/>
</element>

<element name="AddDisk">
<short>Add a disk to the list of known disks (Unix only)</short>
<descr>
<p>
On Unix-like platforms  both the <link id="DiskFree"/> and <link id="DiskSize"/> functions need a
file on the specified drive, since is required for the statfs system call.
</p>
<p>
These filenames are set in drivestr[0..26], and the first 4 have been
preset to :
</p>
<dl>
<dt>Disk 0</dt><dd><var>'.'</var> default drive - hence current directory is used.</dd>
<dt>Disk 1</dt><dd><var>'/fd0/.'</var> floppy drive 1.</dd>
<dt>Disk 2</dt><dd><var>'/fd1/.'</var> floppy drive 2.</dd>
<dt>Disk 3</dt><dd><var>'/'</var> <file>C:</file> equivalent of DOS is the root partition.</dd>
</dl>
<p>
Drives 4..26 can be set by your own applications with the <var>AddDisk</var> call.
</p>
<p>
The <var>AddDisk</var> call adds <var>Path</var> to the names of drive files, and
returns the number of the disk that corresponds to this drive. If you
add more than 21 drives, the count is wrapped to 4.
</p>
</descr>
<errors>
None.
</errors>
<seealso>
<link id="DiskFree"/>
<link id="DiskSize"/>
</seealso>
</element>

<element name="CreateDir">
<short>Create a new directory</short>
<descr>
<p>
<var>CreateDir</var> creates a new directory with name <var>NewDir</var>.
If the directory doesn't contain an absolute path, then the directory is
created below the current working directory.
</p>
<p>
The function returns <var>True</var> if the directory was successfully
created, <var>False</var> otherwise.
</p>
</descr>
<errors>
In case of an error, the function returns <var>False</var>.
</errors>
<seealso>
<link id="RemoveDir"/>
</seealso>
<example file="sysutex/ex26"/>
</element>

<element name="DiskFree">
<short>Return the amount of free diskspace</short>
<descr>
<p>
<var>DiskFree</var> returns the free space (in bytes) on disk <var>Drive</var>.
Drive is the number of the disk drive:
</p>
<dl>
<dt>0</dt><dd>for the current drive.</dd>
<dt>1</dt><dd>for the first floppy drive.</dd>
<dt>2</dt><dd>for the second floppy drive.</dd>
<dt>3</dt><dd>for the first hard-disk partition.</dd>
<dt>4-26</dt><dd>for all other drives and partitions.</dd>
</dl>
<remark>
Under Linux, and Unix in general, the concept of disk is
different than the dos one, since the filesystem is seen as one big
directory tree. For this reason, the <var>DiskFree</var> and <link id="DiskSize"/>
functions must be mimicked using filenames that reside on the partitions.
For more information, see <link id="AddDisk"/>.
</remark>
</descr>
<errors>
On error, <var>-1</var> is returned.
</errors>
<seealso>
<link id="DiskSize">DiskSize</link>
<link id="AddDisk"/>
</seealso>
<example file="sysutex/ex27"/>
</element>

<element name="DiskSize">
<short>Return the total amount of diskspace.</short>
<descr>
<p>
<var>DiskSize</var> returns the size (in bytes) of disk <var>Drive</var>.
Drive is the number of the disk drive:
</p>
<dl>
<dt>0</dt><dd>for the current drive.</dd>
<dt>1</dt><dd>for the first floppy drive.</dd>
<dt>2</dt><dd>for the second floppy drive.</dd>
<dt>3</dt><dd>for the first hard-disk parttion.</dd>
<dt>4-26</dt><dd>for all other drives and partitions.</dd>
</dl>
<remark>
Under Linux, and Unix in general, the concept of disk is
different than the dos one, since the filesystem is seen as one big
directory tree. For this reason, the <link id="DiskFree"/> and <var>DiskSize</var>
functions must be mimicked using filenames that reside on the partitions.
For more information, see <link id="AddDisk"/>
</remark>
<p>
For an example, see <link id="DiskFree">DiskFree</link>.
</p>
</descr>
<errors>
On error, <var>-1</var> is returned.
</errors>
<seealso>
<link id="DiskFree"/>
<link id="AddDisk"/>
</seealso>
</element>


<element name="GetCurrentDir">
<short>Return the current working directory of the application.</short>
<descr>
<var>GetCurrentDir</var> returns the current working directory.
</descr>
<errors>
None.
</errors>
<seealso>
<link id="SetCurrentDir"/>
<link id="DiskFree"/>
<link id="DiskSize"/>
</seealso>
<example file="sysutex/ex28"/>
</element>

<element name="RemoveDir">
<short>Remove a directory from the filesystem.</short>
<descr>
<p>
<var>RemoveDir</var> removes directory <var>Dir</var> from the disk.
If the directory is not absolue, it is appended to the current working
directory.
</p>
<p>
For an example, see <link id="CreateDir"/>.
</p>
</descr>
<errors>
In case of error (e.g. the directory isn't empty) the function returns
<var>False</var>. If successful, <var>True</var> is returned.
</errors>
<seealso>
</seealso>
</element>


<element name="SetCurrentDir">
<short>Set the current directory of the application.</short>
<descr>
<var>SetCurrentDir</var> sets the current working directory of your program
to <var>NewDir</var>. It returns <var>True</var> if the function was successfull,
<var>False</var> otherwise.
</descr>
<errors>
In case of error, <var>False</var> is returned.
</errors>
<seealso>
<link id="GetCurrentDir"/>
</seealso>
</element>

<example file="sysutex/ex29"/>


<element name="ChangeFileExt">
<short>Change the extension of a filename.</short>
<descr>
<p>
<var>ChangeFileExt</var> changes the file extension in <var>FileName</var> to
<var>Extension</var>.
The extension <var>Extension</var> includes the starting <var>.</var> (dot).
The previous extension of <var>FileName</var> are all characters after the
last <var>.</var>, the <var>.</var> character included.
</p>
<p>
If <var>FileName</var> doesn't have an extension, <var>Extension</var> is just
appended.
</p>
</descr>
<errors>
None.
</errors>
<seealso>
<link id="ExtractFileExt"/>
<link id="ExtractFileName"/>
<link id="ExtractFilePath"/>
<link id="ExpandFileName"/>
</seealso>
</element>


<element name="DeleteFile">
<short>Delete a file from the filesystem.</short>
<descr>
<var>DeleteFile</var> deletes file <var>FileName</var> from disk. The function
returns <var>True</var> if the file was successfully removed, <var>False</var>
otherwise.
</descr>
<errors>
On error, <var>False</var> is returned.
</errors>
<seealso>
<link id="FileCreate"/>
<link id="FileExists"/>
</seealso>
<example file="sysutex/ex31"/>
</element>



<element name="DoDirSeparators">
<short>Convert known directory separators to the current directory separator.</short>
<descr>
This function replaces all known directory separators in <var>FileName</var>
to the directory separator character for the current system. The list of
known separators is specified in the <link id="#rtl.system.AllowDirectorySeparators">AllowDirectorySeparators</link> constant.
</descr>
<errors>
None.
</errors>
<seealso>
<link id="ExtractFileName"/>
<link id="ExtractFilePath"/>
</seealso>
<example file="sysutex/ex32"/>
</element>



<element name="ExpandFileName">
<short>Expand a relative filename to an absolute filename.</short>
<descr>
<p>
<var>ExpandFileName</var> expands the filename to an absolute filename.
It changes all directory separator characters to the one appropriate for the
system first.
</p>
<p>
If an empty filename is passed, it is expanded to the current directory.
</p>
</descr>
<errors>
None.
</errors>
<seealso>
<link id="ExpandFileNameCase"/>
<link id="ExtractFileName"/>
<link id="ExtractFilePath"/>
<link id="ExtractFileDir"/>,
<link id="ExtractFileDrive"/>
<link id="ExtractFileExt"/>
<link id="ExtractRelativePath"/>
</seealso>
<example file="sysutex/ex33"/>
</element>

<element name="ExpandFileNameCase">
<short>Expand a filename entered as case insensitive to the full path as stored on the disk.</short>
<descr>
<p>
On case insensitive platforms, <var>ExpandFileNameCase</var> behaves similarly
to <link id="ExpandFileName"/> except for the fact that it returns the final part of the path with
the same case of letters as found on the disk (if it exists - otherwise the case equals
the one provided on input). On case sensitive platforms it also checks whether one or more full
paths exist on disk which would correspond to the provided input if treated case insensitively
and returns the first such match found and information whether the match is unique or not.
</p>
<p>
Note that the behaviour is basically undefined if the input includes wildcards characters.
Normally, wildcards in the last part of path provided on input are resolved to the first
corresponding item found on the disk, but it is better not to rely on that and use other more
suitable functions if working with wildcards like <link id="FindFirst"/>/<link
id="FindNext"/>.
</p>
</descr>
<errors>
None.
</errors>
<seealso>
<link id="ExpandFileName"/>
<link id="ExtractFileName"/>
<link id="ExtractFilePath"/>
<link id="ExtractFileDir"/>,
<link id="ExtractFileDrive"/>
<link id="ExtractFileExt"/>
<link id="ExtractRelativePath"/>
</seealso>
<example file="sysutex/ex33"/>
</element>

<element name="ExpandUNCFileName">
<short>Expand a relative filename to an absolute UNC filename.</short>
<descr>
<var>ExpandUNCFileName</var> runs <link id="ExpandFileName"/> on <var>FileName</var>
and then attempts to replace the drive letter by the name of a shared disk.
</descr>
<errors>
None.
</errors>
<seealso>
<link id="ExpandFileName"/>
<link id="ExtractFileName"/>
<link id="ExtractFilePath"/>
<link id="ExtractFileDir"/>,
<link id="ExtractFileDrive"/>
<link id="ExtractFileExt"/>
<link id="ExtractRelativePath"/>
</seealso>
</element>


<element name="ExtractFileDir">
<short>Extract the drive and directory part of a filename.</short>
<descr>
<var>ExtractFileDir</var> returns only the directory part of <var>FileName</var>,
including a driveletter. The directory name has NO ending directory
separator, in difference with <link id="ExtractFilePath"/>.
</descr>
<errors>
None.
</errors>
<seealso>
<link id="ExtractFileName"/>
<link id="ExtractFilePath"/>
<link id="ExtractFileDir"/>,
<link id="ExtractFileDrive"/>
<link id="ExtractFileExt"/>
<link id="ExtractRelativePath"/>
</seealso>
<example file="sysutex/ex34"/>
</element>


<element name="ExtractFileDrive">
<short>Extract the drive part from a filename.</short>
<descr>
<p>
<var>Extracts</var> the drive letter from a filename. Note that some
operating systems do not support drive letters.
</p>
<p>
For an example, see <link id="ExtractFileDir"/>.
</p>
</descr>
<errors>
</errors>
<seealso>
<link id="ExtractFileName"/>
<link id="ExtractFilePath"/>
<link id="ExtractFileDir"/>,
<link id="ExtractFileDrive"/>
<link id="ExtractFileExt"/>
<link id="ExtractRelativePath"/>
</seealso>
</element>

<element name="ExtractFileExt">
<short>Return the extension from a filename.</short>
<descr>
<p>
<var>ExtractFileExt</var> returns the extension (including the
<var>.</var>(dot) character) of <var>FileName</var>.
</p>
<p>
For an example, see <link id="ExtractFileDir"/>.
</p>
</descr>
<errors>
None.
</errors>
<seealso>
<link id="ChangeFileExt"/>
<link id="ExtractFileName"/>
<link id="ExtractFilePath"/>
<link id="ExtractFileDir"/>,
<link id="ExtractFileDrive"/>
<link id="ExtractFileExt"/>
<link id="ExtractRelativePath"/>
</seealso>
</element>


<element name="ExtractFileName">
<short>Extract the filename part from a full path filename.</short>
<descr>
<p>
<var>ExtractFileName</var> returns the filename part from <var>FileName</var>.
The filename consists of all characters after the last directory separator
character ('/' or '\') or drive letter.
</p>
<p>
The full filename can always be reconstucted by concatenating the result
of <link id="ExtractFilePath"/> and <var>ExtractFileName</var>.
</p>
<p>
For an example, see <link id="ExtractFileDir"/>.
</p>
</descr>
<errors>
None.
</errors>
<seealso>
<link id="ExtractFileName"/>
<link id="ExtractFilePath"/>
<link id="ExtractFileDir"/>,
<link id="ExtractFileDrive"/>
<link id="ExtractFileExt"/>
<link id="ExtractRelativePath"/>
</seealso>
</element>


<element name="ExtractFilePath">
<short>Extract the path from a filename.</short>
<descr>
<p>
<var>ExtractFilePath</var> returns the path part (including driveletter) from
<var>FileName</var>. The path consists of all characters before the last
directory separator character ('/' or '\'), including the directory
separator itself.
In case there is only a drive letter, that will be returned.
</p>
<p>
The full filename can always be reconstucted by concatenating the result
of <var>ExtractFilePath</var> and <link id="ExtractFileName"/>.
</p>
<p>
For an example, see <link id="ExtractFileDir"/>.
</p>
</descr>
<errors>
None.
</errors>
<seealso>
<link id="ExtractFileName"/>
<link id="ExtractFilePath"/>
<link id="ExtractFileDir"/>,
<link id="ExtractFileDrive"/>
<link id="ExtractFileExt"/>
<link id="ExtractRelativePath"/>
</seealso>
</element>


<element name="ExtractRelativePath">
<short>Extract a relative path from a filename, given a base directory.</short>
<descr>
<p>
<var>ExtractRelativePath</var> constructs a relative path to go from
<var>BaseName</var> to <var>DestName</var>. If <var>DestName</var> is on another drive
(Not on Unix-like platforms) then the whole <var>Destname</var> is returned.
</p>
<p>
Note that directories must end on a path delimiter for this function to work correctly. 
If not, the last part is stripped and treated as a file name.
</p>
</descr>
<errors>
None.
</errors>
<seealso>
<link id="ExtractFileName"/>
<link id="ExtractFilePath"/>
<link id="ExtractFileDir"/>,
<link id="ExtractFileDrive"/>
<link id="ExtractFileExt"/>,
</seealso>
<example file="sysutex/ex35"/>
</element>

<element name="FileAge">
<short>Return the timestamp of a file.</short>
<descr>
<p>
<var>FileAge</var> returns the last modification time of file <var>FileName</var>.
The FileDate format can be transformed to <var>TDateTime</var> format with the
<link id="FileDateToDateTime"/> function.
</p>
<p>
Fileage cannot be used on directories, it will return -1 if <var>FileName</var> indicates a directory.
</p>
</descr>
<errors>
In case of errors, <var>-1</var> is returned.
</errors>
<seealso>
<link id="FileDateToDateTime"/>
<link id="FileExists"/>
<link id="FileGetAttr"/>
</seealso>
<example file="sysutex/ex36"/>
</element>

<element name="FileClose">
<short>Close a file handle.</short>
<descr>
<p>
<var>FileClose</var> closes the file handle <var>Handle</var>. After this call,
attempting to read or write from the handle will result in an error.
</p>
<p>
For an example, see <link id="FileCreate"/>
</p>
</descr>
<errors>
None.
</errors>
<seealso>
<link id="FileCreate"/>
<link id="FileWrite"/>
<link id="FileOpen"/>
<link id="FileRead"/>,
<link id="FileTruncate"/>
<link id="FileSeek"/>
</seealso>
</element>

<element name="FileCreate">
<short>Create a new file and return a handle to it.</short>
<descr>
<p>
<var>FileCreate</var> creates a new file with name <var>FileName</var> on the disk and
returns a file handle which can be used to read or write from the file with
the <link id="FileRead"/> and <link id="FileWrite"/> functions.
</p><p>
If a file with name <var>FileName</var> already existed on the disk, it is
overwritten.
</p><p>
The optional <var>Mode</var> parameter only has an effect under unix,
where it can be used to set the mode (read, write, execute, sticky bit,
setgid and setuid flags) of the created file to the specified custom value.
On other platfors, the <var>Mode</var> parameter is ignored.
</p>
</descr>
<errors>
If an error occurs (e.g. disk full or non-existent path), the function
returns <var>THandle(-1)</var>.
</errors>
<seealso>
<link id="FileClose"/>
<link id="FileWrite"/>
<link id="FileOpen"/>
<link id="FileRead"/>,
<link id="FileTruncate"/>
<link id="FileSeek"/>
</seealso>
<example file="sysutex/ex37"/>
</element>



<element name="FileExists">
<short>Check whether a particular file exists in the filesystem.</short>
<descr>
<p>
<var>FileExists</var> returns <var>True</var> if a file with name <var>FileName</var>
exists on the disk, <var>False</var> otherwise. On windows, this function
will return <var>False</var> if a directory is passed as <var>FileName</var>.
On unices, passing a directory name will result in <var>True</var>. The
rationale is that on unix, a directory is a file as well.
</p>
<p>
Note that this function accepts a single filename as an argument, without
wildcards. To check for the existence of multiple files, see the <link
id="FindFirst"/> function.
</p>
</descr>
<errors>
None.
</errors>
<seealso>
<link id="FindFirst"/>
<link id="FileAge"/>
<link id="FileGetAttr"/>
<link id="FileSetAttr"/>
</seealso>
<example file="sysutex/ex38"/>
</element>

<element name="FileGetAttr">
<short>Return attributes of a file.</short>
<descr>
<p>
<var>FileGetAttr</var> returns the attribute settings of file
<var>FileName</var>. The attribute is a <var>OR</var>-ed combination
of the following constants:
</p>
<dl>
<dt>faReadOnly</dt><dd>The file is read-only.</dd>
<dt>faHidden</dt>
<dd>
The file is hidden. (On unix, this means that the filename starts with a dot)
</dd>
<dt>faSysFile</dt>
<dd>
The file is a system file (On unix, this means that the file is a character, block or FIFO file).
</dd>
<dt>faVolumeId</dt>
<dd>Volume Label. Only for DOS/Windows on a plain FAT (not VFAT or Fat32) filesystem.</dd>
<dt>faDirectory</dt><dd>File is a directory.</dd>
<dt>faArchive</dt><dd>file should be archived. Not possible on Unix</dd>
</dl>
</descr>
<errors>
In case of error, -1 is returned.
</errors>
<seealso>
<link id="FileSetAttr"/>
<link id="FileAge"/>
<link id="FileGetDate"/>.
</seealso>
<example file="sysutex/ex40"/>
</element>



<element name="FileGetDate">
<short>Return the file time of an opened file.</short>
<descr>
<var>FileGetdate</var> returns the filetime of the opened file with filehandle
<var>Handle</var>. It is the same as <link id="FileAge"/>, with this difference that
<var>FileAge</var> only needs the file name, while <var>FilegetDate</var> needs an
open file handle.
</descr>
<errors>
On error, -1 is returned.
</errors>
<seealso>
<link id="FileAge"/>
</seealso>
<example file="sysutex/ex39"/>
</element>



<element name="FileOpen">
<short>Open an existing file and return a filehandle</short>
<descr>
<p>
<var>FileOpen</var> opens a file with name <var>FileName</var> with mode <var>Mode</var>.
<var>Mode</var> can be one of the following constants:
</p>
<dl>
<dt>fmOpenRead</dt><dd><printshort id="fmOpenRead"/></dd>
<dt>fmOpenWrite</dt><dd><printshort id="fmOpenWrite"/></dd>
<dt>fmOpenReadWrite</dt><dd><printshort id="fmOpenReadWrite"/></dd>
</dl>
<p>
Under Windows and Unix, the above mode can be or-ed with one of the following sharing/locking flags:
</p>
<dl>
<dt>fmShareCompat</dt><dd><printshort id="fmShareCompat"/></dd>
<dt>fmShareExclusive</dt><dd><printshort id="fmShareExclusive"/></dd>
<dt>fmShareDenyWrite</dt><dd><printshort id="fmShareDenyWrite"/></dd>
<dt>fmShareDenyRead</dt><dd><printshort id="fmShareDenyRead"/></dd>
<dt>fmShareDenyNone</dt><dd><printshort id="fmShareDenyNone"/></dd>
</dl>
<p>
If the file has been successfully opened, it can be read  from or written to
(depending on the <var>Mode</var> parameter) with the <link id="FileRead"/> and
<var>FileWrite</var> functions.
</p>
<remark>
Remark that you cannot open a file if it doesn't exist yet, i.e. it will not
be created for you. If you want tp create a new file, or overwrite an old
one, use the <link id="FileCreate"/> function.
</remark>
<p>
There are some limitations to the sharing modes.
</p>
<ol>
<li>Sharing modes are only available on Unix and Windows platforms.</li>
<li>Unix only support sharing modes as of 2.4.0.</li>
<li>fmShareDenyRead only works under Windows at this time, and will always
 result in an error on Unix platforms because its file locking APIs do not
 support this concept.</li>
<li>File locking is advisory on Unix platforms. This means that the locks
 are only checked when a file is opened using a file locking mode. In other
 cases, existing locks are simply ignored. In particular, this means that
 <var>fmShareDenyNone</var> has no effect under Unix, because this can only
 be implemented as ``use no locking'' on those platforms. As a result, opening
 a file using this mode will always succeed under Unix as far as the locking
 is concerned, even if the file has already been opened using
 <var>fmShareExclusive</var>.</li>
<li>Under Solaris, closing a single file handle associated with a file will
result in all locks on that file (even via other handles) being destroyed 
due to the behaviour of the underlying API (fcntl). Because of the same reason, on Solaris you cannot use
<var>fmShareDenyWrite</var> in combination with <var>fmOpenWrite</var>, nor <var>fmShareExclusive</var> 
in combination with <var>fmOpenRead</var> although both work with fmOpenReadWrite.</li>   
</ol>
<p>
For an example, see <link id="FileCreate"/>
</p>
</descr>
<errors>
On Error, <var>THandle(-1)</var> is returned.
</errors>
<seealso>
<link id="fmOpenRead"/>
<link id="fmOpenWrite"/>
<link id="fmOpenReadWrite"/>
<link id="fmShareDenyWrite"/>
<link id="fmShareExclusive"/>
<link id="fmShareDenyRead"/>
<link id="fmShareDenyNone"/>
<link id="fmShareCompat"/>
<link id="FileClose"/>
<link id="FileWrite"/>
<link id="FileCreate"/>
<link id="FileRead"/>,
<link id="FileTruncate"/>
<link id="FileSeek"/>
</seealso>
</element>

<element name="FileRead">
<short>Read data from a filehandle in a buffer.</short>
<descr>
<p>
<var>FileRead</var> reads <var>Count</var> bytes from file-handle <var>Handle</var> and
stores them into <var>Buffer</var>. Buffer must be at least <var>Count</var> bytes
long. No checking on this is performed, so be careful not to overwrite any
memory.  <var>Handle</var> must be the result of a <link id="FileOpen"/> call.
</p>
<p>
The function returns the number of bytes actually read, or -1 on error.
</p>
<p>
For an example, see <link id="FileCreate"/>
</p>
</descr>
<errors>
On error, -1 is returned.
</errors>
<seealso>
<link id="FileClose"/>
<link id="FileWrite"/>
<link id="FileCreate"/>
<link id="FileOpen"/>,
<link id="FileTruncate"/>
<link id="FileSeek"/>
</seealso>
</element>


<element name="FileSearch">
<short>Search for a file in a path.</short>
<descr>
<p>
<var>FileSearch</var> looks for the file <var>Name</var> in <var>DirList</var>, where
dirlist is a list of directories, separated by semicolons or colons.
It returns the full filename of the first match found. The optional <var>Options</var>
parameter may be specified to influence the behaviour of the search
algorithm. It is a set of the following options:
</p>
<dl>
<dt>sfoImplicitCurrentDir</dt><dd><printshort id="TFileSearchoption.sfoImplicitCurrentDir"/></dd>
<dt>sfoStripQuotes</dt><dd><printshort id="TFileSearchOption.sfoStripQuotes"/></dd>
</dl>
<p>
A deprecated form of the function allowed to specify using the boolean <var>ImplicitCurrentDir</var>
parameter whether the current directory was searched implicitly or not. By default,
the current directory is searched.
</p>
</descr>
<errors>
On error, an empty string is returned.
</errors>
<seealso>
<link id="ExpandFileName"/>
<link id="FindFirst"/>
</seealso>
<example file="sysutex/ex41"/>
</element>

<element name="FileSeek">
<short>Set the current file position on a file handle.</short>
<descr>
<p>
<var>FileSeek</var> sets the file pointer on position <var>Offset</var>, starting from
<var>Origin</var>. Origin can be one of the following values:
</p>
<dl>
<dt>fsFromBeginning</dt>
<dd><var>Offset</var> is relative to the first byte of the file. This
position is zero-based. i.e. the first byte is at offset 0.
</dd>
<dt>fsFromCurrent</dt><dd><var>Offset</var> is relative to the current position.</dd>
<dt>fsFromEnd</dt>
<dd><var>Offset</var> is relative to the end of the file. 
This means that <var>Offset</var> can only be zero or negative in this case.
</dd>
</dl>
<p>
If successfull, the function returns the new file position, relative to the
beginning of the file.
</p>
<remark>
The abovementioned constants do not exist in Delphi.
</remark>
</descr>
<errors>
On error, -1 is returned.
</errors>
<seealso>
<link id="FileClose"/>
<link id="FileWrite"/>
<link id="FileCreate"/>
<link id="FileOpen"/>
<link id="FileRead"/>
<link id="FileTruncate"/>
</seealso>
<example file="sysutex/ex37"/>
</element>

<element name="FileSetAttr">
<short>Set the attributes of a file.</short>
<descr>
<p>
<var>FileSetAttr</var> sets the attributes of <var>FileName</var> to <var>Attr</var>.
If the function was successful, 0 is returned, -1 otherwise.
<var>Attr</var> can be set to an OR-ed combination of the pre-defined
<var>faXXX</var> constants.
</p>
<p>
This function is not implemented on Unixes.
</p>
</descr>
<errors>
On error, -1 is returned (always on Unixes).
</errors>
<seealso>
<link id="FileGetAttr"/>
<link id="FileGetDate"/>
<link id="FileSetDate"/>.
</seealso>
</element>


<element name="FileSetDate">
<short>Set the date of a file.</short>
<descr>
<p>
<var>FileSetDate</var> sets the file date of the open file with handle <var>Handle</var>
or to <var>Age</var>, where <var>Age</var> is a DOS date-and-time stamp value.
</p>
<p>
Alternatively, the filename may be specified with the <var>FileName</var> argument.
This variant of the call is mandatory on unices, since there is no OS support for 
setting a file timestamp based on a handle. (the handle may not be a real file at all).
</p>
<p>
The function returns zero if successfull. 
</p>
</descr>
<errors>
On Unix, the handle variant always returns -1, since this is impossible to implement.
On Windows and DOS, a negative error code is returned.
</errors>
<seealso>
</seealso>
</element>


<element name="FileTruncate">
<short>Truncate an open file to a given size.</short>
<descr>
<p>
<var>FileTruncate</var> truncates the file with handle <var>Handle</var> to
<var>Size</var> bytes. The file must have been opened for writing prior
to this call. The function returns <var>True</var> is successful, <var>False</var>
otherwise.
</p>
<p>
For an example, see <link id="FileCreate"/>.
</p>
</descr>
<errors>
On error, the function returns <var>False</var>.
</errors>
<seealso>
<link id="FileClose"/>
<link id="FileWrite"/>
<link id="FileCreate"/>
<link id="FileOpen"/>
<link id="FileRead"/>
<link id="FileSeek"/>
</seealso>
</element>


<element name="FileWrite">
<short>Write data from a buffer to a given filehandle.</short>
<descr>
<p>
<var>FileWrite</var> writes <var>Count</var> bytes from <var>Buffer</var> to the file with
handle <var>Handle</var>. Prior to this call, the file must have been opened
for writing. <var>Buffer</var> must be at least <var>Count</var> bytes large, or
a memory access error may occur.
</p>
<p>
The function returns the number of bytes written, or -1 in case of an
error.
</p>
<p>
For an example, see <link id="FileCreate"/>.
</p>
</descr>
<errors>
In case of error, -1 is returned.
</errors>
<seealso>
<link id="FileClose"/>
<link id="FileCreate"/>
<link id="FileOpen"/>
<link id="FileRead"/>
<link id="FileTruncate"/>
<link id="FileSeek"/>
</seealso>
</element>


<element name="FindClose">
<short>Close a find handle</short>
<descr>
<p>
<var>FindClose</var> ends a series of <link id="FindFirst"/>/<link id="FindNext"/> calls,
and frees any memory used by these calls. It is <em>absolutely</em> necessary
to do this call, or huge memory losses may occur.
</p>
<p>
For an example, see <link id="FindFirst"/>.
</p>
</descr>
<errors>
None.
</errors>
<seealso>
<link id="FindFirst"/>
<link id="FindNext"/>
</seealso>
</element>


<element name="FindFirst">
<short>Start a file search and return a findhandle</short>
<descr>
<p>
<var>FindFirst</var> looks for files that match the name (possibly with
wildcards) in <var>Path</var> and extra attributes <var>Attr</var>. It then fills up the
<var>Rslt</var> record with data gathered about the file. It returns 0 if a file
matching the specified criteria is found, a nonzero value (-1 on Unix-like platforms)
otherwise.
</p>
<p>
<var>Attr</var> is an or-ed combination of the following constants:
</p>
<dl>
<dt>faReadOnly</dt><dd>The file is read-only.</dd>
<dt>faHidden</dt><dd>The file is hidden. (On unix, this means that the filename starts with a dot)</dd>
<dt>faSysFile</dt><dd>The file is a system file (On unix, this means that the file is a character,
block or FIFO file).</dd>
<dt>faVolumeId</dt><dd>Drive volume Label. Not possible under unix, and on
Windows-like systems, this works only for plan FAT (not Fat32 of VFAT) filesystems.</dd>
<dt>faDirectory</dt><dd>File is a directory.</dd>
<dt>faArchive</dt><dd>file needs to be archived. Not possible on Unix</dd>
</dl>
<p>
It is a common misconception that <var>Attr</var> specifies a set of attributes 
which must be matched in order for a file to be included in the list. This is not 
so: The value of <var>Attr</var> specifies <em>additional</em> attributes, this means
that the returned files are either normal files or have an attribute which
is present in <var>Attr</var>.</p>
<p>
Specifically: specifying <var>faDirectory</var> as a value for <var>Attr</var>
does not mean that only directories will be returned. Normal files
<em>and</em> directories will be returned.
</p>
<p>
The <var>Rslt</var> record can be fed to subsequent calls to <var>FindNext</var>, in
order to find other files matching the specifications.
</p>
<remark> 
A successful <var>FindFirst</var> call must <em>always</em> be followed by a
<link id="FindClose">FindClose</link> call with the same <var>Rslt</var> record. Failure to do so will
result in memory leaks. If the findfirst call failed (i.e. returned a nonzero handle) there is no need 
to call <var>FindClose</var>.
</remark>
</descr>
<errors>
On error the function returns -1 on Unix-like platforms, a nonzero error code on Windows.
</errors>
<seealso>
<link id="FindClose"/>{FindCloseSys}, <link id="FindNext"/>.
</seealso>
<example file="sysutex/ex43"/>
</element>



<element name="FindNext">
<short>Find the next entry in a findhandle.</short>
<descr>
<p>
<var>FindNext</var> finds a next occurrence of a search sequence initiated by
<var>FindFirst</var>. If another record matching the criteria in Rslt is found, 0
is returned, a nonzero constant is returned otherwise.
</p>
<remark>
The last <var>FindNext</var> call must <em>always</em> be followed by a
<var>FindClose</var> call with the same <var>Rslt</var> record. Failure to do so will
result in memory loss.
</remark>
<p>
For an example, see <link id="FindFirst"/>
</p>
</descr>
<errors>
On error (no more file is found), a nonzero constant is returned.
</errors>
<seealso>
<link id="FindFirst"/>
<link id="FindClose"/>
</seealso>
</element>


<element name="GetDirs">
<short>Return a list of directory names from a path.</short>
<descr>
<var>GetDirs</var> splits DirName in a null-byte separated list of directory names,
<var>Dirs</var> is an array of <var>PChars</var>, pointing to these directory names.
The function returns the number of directories found, or -1 if none were found.
DirName must contain only OSDirSeparator as Directory separator chars.
</descr>
<errors>
None.
</errors>
<seealso>
<link id="ExtractRelativePath"/>
</seealso>
<example file="sysutex/ex45"/>
</element>



<element name="RenameFile">
<short>Rename a file.</short>
<descr>
<var>RenameFile</var> renames a file from <var>OldName</var> to <var>NewName</var>. The
function returns <var>True</var> if successful, <var>False</var> otherwise.
For safety, the new name must be a full path specification, including the directory,
otherwise it will be assumed to be a filename relative to the current working
directory.

<em>Remark:</em> The implementation of <var>RenameFile</var> relies on the
undelying OS's support for renaming/moving a file. Whether or not a file can
be renamed accros disks or partitions depends entirely on the OS. On
unix-like OS-es, the rename function will fail when used accross partitions.
On Windows, it will work.
</descr>
<errors>
On Error, <var>False</var> is returned.
</errors>
<seealso>
<link id="DeleteFile"/>
</seealso>
<example file="sysutex/ex44"/>
</element>


<element name="SetDirSeparators">
<short>Set the directory separators to the known directory separators.</short>
<descr>
<var>SetDirSeparators</var> returns <var>FileName</var> with all possible
DirSeparators replaced by <var>OSDirSeparator</var>.
</descr>
<errors>
None.
</errors>
<seealso>
<link id="ExpandFileName"/>
<link id="ExtractFilePath"/>
<link id="ExtractFileDir"/>
</seealso>
<example file="sysutex/ex47"/>
</element>


<element name="StrAlloc">
<short>Allocate a null-terminated string on the heap.</short>
<descr>
<p>
<var>StrAlloc</var> reserves memory on the heap for a string with length <var>Len</var>,
terminating <var>#0</var> included, and returns a pointer to it.
</p>
<p>
Additionally, <var>StrAlloc</var> allocates 4 extra bytes to store the size of
the allocated memory. Therefore this function is NOT compatible with the
<link id="#rtl.strings.StrAlloc">StrAlloc</link> function of the <var>Strings</var> unit.
</p>
<p>
For an example, see <link id="StrBufSize"/>.
</p>
</descr>
<errors>
None.
</errors>
<seealso>
<link id="StrBufSize"/>
<link id="StrDispose"/>
<link id="#rtl.strings.StrAlloc">StrAlloc</link>
</seealso>
</element>


<element name="StrBufSize">
<short>Return the size of a null-terminated string allocated on the heap.</short>
<descr>
<var>StrBufSize</var> returns the memory allocated for <var>Str</var>. This function
ONLY gives the correct result if <var>Str</var> was allocated using
<link id="StrAlloc">StrAlloc</link>.
</descr>
<errors>
If no more memory is available, a runtime error occurs.
</errors>
<seealso>
<link id="StrAlloc">StrAlloc</link>
<link id="StrDispose"/>
</seealso>
<example file="sysutex/ex46"/>
</element>




<element name="StrDispose">
<short>Dispose of a null-terminated string on the heap.</short>
<descr>
<p>
<var>StrDispose</var> frees any memory allocated for <var>Str</var>. This function
will only function correctly if <var>Str</var> has been allocated on the heap, for example 
using <link id="StrAlloc">StrAlloc</link> or <link id="StrNew">StrNew</link>  from the <file>SysUtils</file> unit.
</p>
<p>
For an example, see <link id="StrBufSize"/>.
</p>
</descr>
<errors>
If an invalid pointer is passed, or a pointer not allocated with
<var>StrAlloc</var>, an error may occur.
</errors>
<seealso>
<link id="StrBufSize"/>
<link id="StrAlloc"/>
<link id="StrNew"/>
</seealso>
</element>


<element name="StrPCopy">
<short>Copy an ansistring to a null-terminated string.</short>
<descr>
<p>
<var>StrPCopy</var> Converts the Ansistring in <var>Source</var> to a Null-terminated
string, and copies it to <var>Dest</var>. <var>Dest</var> needs enough room to contain
the string <var>Source</var>, i.e. <var>Length(Source)+1</var> bytes.
</p>
</descr>
<errors>
No checking is performed to see whether <var>Dest</var> points to enough memory
to contain <var>Source</var>.
</errors>
<seealso>
<link id="StrPLCopy"/>
<link id="StrPas"/>
</seealso>
</element>


<element name="StrPLCopy">
<short>Copy a limited number of characters from an ansistring to a
null-terminated string.</short>
<descr>
<var>StrPLCopy</var> Converts maximally <var>MaxLen</var> characters of the
Ansistring in <var>Source</var> to a Null-terminated  string, and copies
it to <var>Dest</var>. <var>Dest</var> needs enough room to contain
the  characters.
</descr>
<errors>
No checking is performed to see whether <var>Dest</var> points to enough memory
to contain L characters of <var>Source</var>.
</errors>
<seealso>
<link id="StrPCopy"/>.
</seealso>
</element>


<element name="StrPas">
<short>Convert a null-terminated string to an ansistring.</short>
<descr>
<p>
Converts a null terminated string in <var>Str</var> to an Ansitring, and returns
this string. This string is NOT truncated at 255 characters as is the system
unit's version.
</p>
</descr>
<errors>
None.
</errors>
<seealso>
<link id="StrPCopy"/>
<link id="StrPLCopy"/>
</seealso>
</element>


<element name="AdjustLineBreaks">
<short>Convert possible line-endings to the currently valid line ending.</short>
<descr>
<var>AdjustLineBreaks</var> will change all occurrences of <var>#13</var> and
<var>#10</var> characters with the correct line-ending characters for the
current platform. This is <var>#13#10</var> on Windows and Dos. On Unix-like 
platforms, this is <var>#10</var> and for Mac OS X it is <var>#13</var>.
</descr>
<errors>
None.
</errors>
<seealso>
<link id="AnsiCompareStr"/>
<link id="AnsiCompareText"/>
</seealso>
<example file="sysutex/ex48"/>
</element>


<element name="AnsiCompareStr">
<short>Compare 2 ansistrings, case sensitive, ignoring accents characters.</short>
<descr>
<p>
<var>AnsiCompareStr</var> compares two strings and returns the following
result:
</p>
<dl>
<dt>&lt; 0</dt><dd>if <var>S1&lt;S2</var>.</dd>
<dt>0</dt><dd>if <var>S1=S2</var>.</dd>
<dt>&gt; 0</dt><dd>if <var>S1&gt;S2</var>.</dd>
</dl>
<p>
The comparision takes into account Ansi characters, i.e. it takes
care of strange accented characters. Contrary to <link id="AnsiCompareText"/>,
the comparision is case sensitive.
</p>
<remark>
A widestring manager must be installed in order for this function to work
correctly with various character sets.
</remark>
</descr>
<errors>
None.
</errors>
<seealso>
<link id="AdjustLineBreaks"/>
<link id="AnsiCompareText"/>
</seealso>
<example file="sysutex/ex49"/>
</element>

<element name="AnsiCompareText">
<short>Compare 2 ansistrings, case insensitive, ignoring accents characters.</short>
<descr>
<p>
<var>AnsiCompareText</var> compares two strings and returns the following
result:
</p>
<dl>
<dt>&lt;0</dt><dd>if <var>S1&lt;S2</var>.</dd>
<dt>0</dt><dd>if <var>S1=S2</var>.</dd>
<dt>&gt;0</dt><dd>if <var>S1&gt;S2</var>.</dd>
</dl>
<p>
the comparision takes into account Ansi characters, i.e. it takes
care of strange accented characters. Contrary to <link id="AnsiCompareStr"/>,
the comparision is case insensitive.
</p>
<remark>
A widestring manager must be installed in order for this function to work
correctly with various character sets.
</remark>
</descr>
<errors>
None.
</errors>
<seealso>
<link id="AdjustLineBreaks"/>
<link id="AnsiCompareText"/>
</seealso>
<example file="sysutex/ex50"/>
</element>

<element name="AnsiExtractQuotedStr">
<short>Removes the first quoted string from a string.</short>
<descr>
<var>AnsiExtractQuotedStr</var> returns the first quoted string in
<var>Src</var>, and deletes the result from <var>Src</var>. The resulting
string has with <var>Quote</var> characters removed from the beginning and 
end of the string (if they are present), and double <var>Quote</var> 
characters replaced by a single <var>Quote</var> characters. 
As such, it revereses the action of <link id="AnsiQuotedStr"/>.
</descr>
<errors>
None.
</errors>
<seealso>
<link id="AnsiQuotedStr"/>
</seealso>
<example file="sysutex/ex51"/>
</element>

<element name="AnsiLastChar">
<short>Return a pointer to the last character of a string.</short>
<descr>
<p>
This function returns a pointer to the last character of <var>S</var>.
</p>
<remark>
A widestring manager must be installed in order for this function to work
correctly with various character sets. If none is installed, this function 
is the same as <var>@S[Length[S]]</var>.
</remark>
</descr>
<errors>
None.
</errors>
<seealso>
<link id="AnsiStrLastChar"/>
</seealso>
<example file="sysutex/ex52"/>
</element>



<element name="AnsiLowerCase">
<short>Return a lowercase version of a string.</short>
<descr>
<p>
<var>AnsiLowerCase</var> converts the string <var>S</var> to lowercase characters
and returns the resulting string.
It takes into account the operating system language
settings when doing this, so special characters are converted correctly as
well.
</p>
<remark>
A widestring manager must be installed in order for this function to work
correctly with various character sets.
</remark>
</descr>
<errors>
None.
</errors>
<seealso>
<link id="AnsiUpperCase"/>
<link id="AnsiStrLower"/>
<link id="AnsiStrUpper"/>
</seealso>
<example file="sysutex/ex53"/>
</element>



<element name="AnsiQuotedStr">
<short>Return a quoted version of a string.</short>
<descr>
<p>
<var>AnsiQuotedString</var> quotes the string <var>S</var> and returns the result.
This means that it puts the <var>Quote</var> character at both the beginning and
end of the string and replaces any occurrence of <var>Quote</var> in <var>S</var>
with 2 <var>Quote</var> characters. The action of <var>AnsiQuotedString</var> can be
reversed by <link id="AnsiExtractQuotedStr"/>.
</p>
<p>
For an example, see <link id="AnsiExtractQuotedStr"/>
</p>
</descr>
<errors>
None.
</errors>
<seealso>
<link id="AnsiExtractQuotedStr"/>
</seealso>
</element>


<element name="AnsiStrComp">
<short>Compare two null-terminated strings. Case sensitive.</short>
<descr>
<p>
<var>AnsiStrComp</var> compares 2 <var>PChar</var> strings, and returns the following
result:
</p>
<dl>
<dt>&lt;0</dt><dd>if <var>S1&lt;S2</var>.</dd>
<dt>0</dt><dd>if <var>S1=S2</var>.</dd>
<dt>&gt;0</dt><dd>if <var>S1>S2</var>.</dd>
</dl>
<p>
The comparision of the two strings is case-sensitive.
</p>
<remark>
A widestring manager must be installed in order for this function to work
correctly with various character sets.
</remark>
</descr>
<errors>
None.
</errors>
<seealso>
<link id="AnsiCompareText"/>
<link id="AnsiCompareStr"/>
</seealso>
<example file="sysutex/ex54"/>
</element>

<element name="AnsiStrIComp">
<short>Compare two null-terminated strings. Case insensitive.</short>
<descr>
<p>
<var>AnsiStrIComp</var> compares 2 <var>PChar</var> strings, and returns the following
result:
</p>
<dl>
<dt>&lt;0</dt><dd>if <var>S1&lt;S2</var>.</dd>
<dt>0</dt><dd>if <var>S1=S2</var>.</dd>
<dt>>0</dt><dd>if <var>S1>S2</var>.</dd>
</dl>
<p>
The comparision of the two strings is case-insensitive.
</p>
<remark>
A widestring manager must be installed in order for this function to work
correctly with various character sets.
</remark>
</descr>
<errors>
None.
</errors>
<seealso>
<link id="AnsiCompareText"/>
<link id="AnsiCompareStr"/>
</seealso>
<example file="sysutex/ex55"/>
</element>

<element name="AnsiStrLastChar">
<short>Return a pointer to the last character of a string.</short>
<descr>
<p>
Return a pointer to the last character of the null-terminated string.
</p>
<remark>
A widestring manager must be installed in order for this function to work
correctly with various character sets. If none is installed, this function 
is the same as <var>@S[Length[S]]</var>.
</remark>
</descr>
<errors>
None.
</errors>
<seealso>
<link id="AnsiCompareText"/>
<link id="AnsiCompareStr"/>
</seealso>
<example file="sysutex/ex56"/>
</element>

<element name="AnsiStrLIComp">
<short>Compares a given number of characters of a string, case insensitive.</short>
<descr>
<p>
<var>AnsiStrLIComp</var> compares the first <var>Maxlen</var> characters of
2 <var>PChar</var> strings, <var>S1</var> and <var>S2</var>, and returns the following
result:
</p>
<dl>
<dt>&lt;0</dt><dd>if <var>S1&lt;S2</var>.</dd>
<dt>0</dt><dd>if <var>S1=S2</var>.</dd>
<dt>&gt;0</dt><dd>if <var>S1&gt;S2</var>.</dd>
</dl>
<p>
The comparision of the two strings is case-insensitive.
</p>
<remark>
A widestring manager must be installed in order for this function to work
correctly with various character sets.
</remark>
</descr>
<errors>
None.
</errors>
<seealso>
<link id="AnsiCompareText"/>
<link id="AnsiCompareStr"/>
</seealso>
<example file="sysutex/ex57"/>
</element>


<element name="AnsiStrLower">
<short>Convert a null-terminated string to all-lowercase characters.</short>
<descr>
<p>
<var>AnsiStrLower</var> converts the PChar <var>Str</var> to lowercase characters
and returns the resulting pchar. Note that <var>Str</var> itself is modified,
not a copy, as in the case of <link id="AnsiLowerCase"/>.
It takes into account the operating system language
settings when doing this, so special characters are converted correctly as
well.
</p>
<remark>
A widestring manager must be installed in order for this function to work
correctly with various character sets.
</remark>
</descr>
<errors>
None.
</errors>
<seealso>
<link id="AnsiStrUpper"/>
<link id="AnsiLowerCase"/>
</seealso>
<example file="sysutex/ex59"/>
</element>

<element name="AnsiStrUpper">
<short>Convert a null-terminated string to all-uppercase characters.</short>
<descr>
<p>
<var>AnsiStrUpper</var> converts the <var>PChar</var> <var>Str</var> to uppercase characters
and returns the resulting string. Note that <var>Str</var> itself is modified,
not a copy, as in the case of <link id="AnsiUpperCase"/>.
It takes into account the operating system language
settings when doing this, so special characters are converted correctly as
well.
</p>
<remark>
A widestring manager must be installed in order for this function to work
correctly with various character sets.
</remark>
</descr>
<errors>
None.
</errors>
<seealso>
<link id="AnsiUpperCase"/>
<link id="AnsiStrLower"/>
<link id="AnsiLowerCase"/>
</seealso>
<example file="sysutex/ex60"/>
</element>



<element name="AnsiUpperCase">
<short>Return an uppercase version of a string, taking into account special
characters.</short>
<descr>
<p>
<var>AnsiUpperCase</var> converts the string <var>S</var> to uppercase characters
and returns the resulting string. It takes into account the operating system language
settings when doing this, so special characters are converted correctly as
well.
</p>
<remark>
A widestring manager must be installed in order for this function to work
correctly with various character sets.
</remark>
</descr>
<errors>
None.
</errors>
<seealso>
<link id="AnsiStrUpper"/>
<link id="AnsiStrLower"/>
<link id="AnsiLowerCase"/>
</seealso>
<example file="sysutex/ex61"/>
</element>


<element name="AppendStr">
<short>Append one ansistring to another.</short>
<descr>
<p>
<var>AppendStr</var> appends <var>S</var> to Dest.
</p>
<p>
This function is provided for Delphi
compatibility only, since it is completely equivalent to <var>Dest:=Dest+S</var>.
</p>
</descr>
<errors>
None.
</errors>
<seealso>
<link id="AssignStr"/>
<link id="NewStr"/>
<link id="DisposeStr"/>
</seealso>
<example file="sysutex/ex62"/>
</element>



<element name="AssignStr">
<short>Assigns an ansistring to a null-terminated string.</short>
<descr>
<p>
<var>AssignStr</var> allocates <var>S</var> to <var>P</var>. The old value of <var>P</var> is
disposed of.
</p>
<p>
This function is provided for Delphi compatibility only. <var>AnsiStrings</var>
are managed on the heap and should be preferred to the mechanism of
dynamically allocated strings.
</p>
</descr>
<errors>
None.
</errors>
<seealso>
<link id="NewStr"/>
<link id="AppendStr"/>
<link id="DisposeStr"/>
</seealso>
<example file="sysutex/ex63"/>
</element>



<element name="BCDToInt">
<short>Convert a BCD coded integer to a normal integer.</short>
<descr>
<var>BCDToInt</var> converts a <var>BCD</var> coded integer to a normal integer.
</descr>
<errors>
None.
</errors>
<seealso>
<link id="StrToInt"/>
<link id="IntToStr"/>
</seealso>
<example file="sysutex/ex64"/>
</element>




<element name="CompareMem">
<short>Compare two memory areas.</short>
<descr>
<p>
<var>CompareMem</var> compares, byte by byte, 2 memory areas pointed
to by <var>P1</var> and <var>P2</var>, for a length of <var>L</var> bytes.
</p>
<p>
The function returns <var>True</var> if all <var>L</var> bytes are the same, and
<var>False</var> otherwise.
</p>
</descr>
<errors>
</errors>
<seealso>
</seealso>
</element>


<element name="CompareStr">
<short>Compare 2 ansistrings case-sensitively, ignoring special characters.</short>
<descr>
<p>
<var>CompareStr</var> compares two strings, <var>S1</var> and <var>S2</var>,
and returns the following
result:
</p>
<dl>
<dt>&lt;0</dt><dd>if <var>S1&lt;S2</var>.</dd>
<dt>0</dt><dd>if <var>S1=S2</var>.</dd>
<dt>&gt;0</dt><dd>if <var>S1&gt;S2</var>.</dd>
</dl>
<p>
The comparision of the two strings is case-sensitive.
The function does not take internationalization settings into account, it
simply compares ASCII values.
</p>
</descr>
<errors>
None.
</errors>
<seealso>
<link id="AnsiCompareText"/>
<link id="AnsiCompareStr"/>
<link id="CompareText"/>
</seealso>
<example file="sysutex/ex65"/>
</element>



<element name="CompareText">
<short>Compare 2 ansistrings case insensitive.</short>
<descr>
<p>
<var>CompareText</var> compares two strings, <var>S1</var> and <var>S2</var>,
and returns the following
result:
</p>
<dl>
<dt>&lt;0</dt><dd>if <var>S1&lt;S2</var>.</dd>
<dt>0</dt><dd>if <var>S1=S2</var>.</dd>
<dt>&gt;0</dt><dd>if <var>S1&gt;S2</var>.</dd>
</dl>
<p>
The comparision of the two strings is case-insensitive.
The function does not take internationalization settings into account, it
simply compares ASCII values.
</p>
</descr>
<errors>
None.
</errors>
<seealso>
<link id="AnsiCompareText"/>
<link id="AnsiCompareStr"/>
<link id="CompareStr"/>
</seealso>
<example file="sysutex/ex66"/>
</element>

<element name="DisposeStr">
<short>Dispose an ansistring from the heap.</short>
<descr>
<p>
<var>DisposeStr</var> removes the dynamically allocated string <var>S</var> from the
heap, and releases the occupied memory.
</p>
<p>
This function is provided for Delphi compatibility only. <var>AnsiStrings</var>
are managed on the heap and should be preferred to the mechanism of
dynamically allocated strings.
</p>
<p>
For an example, see <link id="DisposeStr"/>.
</p>
</descr>
<errors>
None.
</errors>
<seealso>
<link id="NewStr"/>
<link id="AppendStr"/>
<link id="AssignStr"/>
</seealso>
</element>


<element name="FloatToStr">
<short>Convert a float value to a string using a fixed format.</short>
<descr>
<p>
<var>FloatToStr</var> converts the floating point variable <var>Value</var> to a
string representation.  It will choose the shortest possible notation of the
two following formats:
</p>
<dl>
<dt>Fixed format</dt><dd>will represent the string in fixed notation,
</dd><dt>Decimal format</dt><dd>will represent the string in scientific
notation.</dd>
</dl>
<p>
More information on these formats can be found in <link id="FloatToStrF"/>.
<var>FloatToStr</var> is completely equivalent to the following call:
</p>
<code>
FloatToStrF(Value, ffGeneral,15, 0);
</code>
</descr>
<errors>
None.
</errors>
<seealso>
<link id="FloatToStrF"/>
<link id="FormatFloat"/>
<link id="StrToFloat"/>
</seealso>
<example file="sysutex/ex67"/>
</element>

<element name="FloatToStrF">
<short>Convert a float value to a string using a given format.</short>
<descr>
<p>
<var>FloatToStrF</var> converts the floating point number <var>value</var> to a string
representation, according to the settings of the parameters <var>Format</var>,
<var>Precision</var> and <var>Digits</var>.
</p>
<p>
The meaning of the <var>Precision</var> and <var>Digits</var> parameter depends on the
<var>Format</var> parameter. The format is controlled mainly by the <var>Format</var>
parameter. It can have one of the following values:
</p>
<dl>
<dt>ffcurrency</dt>
<dd>Money format. <var>Value</var> is converted to a string using
the global variables <var>CurrencyString</var>, <var>CurrencyFormat</var> and
<var>NegCurrFormat</var>. The <var>Digits</var> paramater specifies the number of digits
following the decimal point and should be in the range -1 to 18. If Digits
equals <var>-1</var>, <var>CurrencyDecimals</var> is assumed. The <var>Precision</var> parameter is ignored.
</dd>
<dt>ffExponent</dt>
<dd>Scientific format. <var>Value</var> is converted to a
string using scientific notation: 1 digit before the decimal point, possibly
preceded by a minus sign if <var>Value</var> is negative. The number of
digits after the decimal point is controlled by <var>Precision</var> and must lie
in the range 0 to 15.
</dd>
<dt>ffFixed</dt>
<dd>Fixed point format. <var>Value</var> is converted to a string
using fixed point notation. The result is composed of all digits of the
integer part of <var>Value</var>, preceded by a minus sign if <var>Value</var> is
negative. Following the integer part is <var>DecimalSeparator</var> and then the
fractional part of <var>Value</var>, rounded off to <var>Digits</var> numbers.
If the number is too large then the result will be in scientific notation.
</dd>
<dt>ffGeneral</dt>
<dd>General number format. The argument is converted to a
string using <var>ffExponent</var> or <var>ffFixed</var> format, depending on wich one
gives the shortest string. There will be no trailing zeroes. If <var>Value</var>
is less than <var>0.00001</var> or if the number of decimals left of the decimal
point is larger than <var>Precision</var> then scientific notation is used, and
<var>Digits</var> is the minimum number of digits in the exponent. Otherwise
<var>Digits</var> is ignored.
</dd>
<dt>ffnumber</dt>
<dd>Is the same as <var>ffFixed</var>, except that thousand separators
are inserted in the resulting string.
</dd>
</dl>
</descr>
<errors>
None.
</errors>
<seealso>
<link id="FloatToStr"/>
<link id="FloatToText"/>
</seealso>
<example file="sysutex/ex68"/>
</element>

<element name="FloatToText">
<short>Return a string representation of a float, with a given format.</short>
<descr>
<p>
<var>FloatToText</var> converts the floating point variable <var>Value</var> to a
string representation and stores it in <var>Buffer</var>.  The conversion is
governed by <var>format</var>, <var>Precisison</var> and <var>Digits</var>.
more information on these parameters can be found in <link id="FloatToStrF"/>.
<var>Buffer</var> should point to enough space to hold the result. No checking on
this is performed.
</p>
<p>
The result is the number of characters that was copied in <var>Buffer</var>.
</p>
</descr>
<errors>
None.
</errors>
<seealso>
<link id="FloatToStr"/>
<link id="FloatToStrF"/>
</seealso>
<example file="sysutex/ex69"/>
</element>

<element name="FmtStr">
<short>Format a string with given arguments.</short>
<descr>
<var>FmtStr</var> calls <link id="Format"/> with <var>Fmt</var> and <var>Args</var> as arguments,
and stores the result in <var>Res</var>. For more information on how the
resulting string is composed, see <link id="Format"/>.
</descr>
<errors>
In case of error, a <link id="EConvertError"/> exception is raised.
</errors>
<seealso>
<link id="Format"/>
<link id="FormatBuf"/>
<link id="EConvertError"/>
</seealso>
<example file="sysutex/ex70"/>
</element>

<element name="Format">
<short>Format a string with given arguments.</short>
<descr>
<p>
Format replaces all placeholders in<var>Fmt</var> with the arguments passed in
<var>Args</var> and returns the resulting string. A placeholder looks as follows:
</p>
<code>
'%' [[Index]':'] ['-'] [Width] ['.' Precision] ArgType
</code>
<p>
elements between single quotes must be typed as shown without the quotes,
and elements between square brackets <var>[ ]</var> are optional. The meaning
of the different elements are shown below:
</p>
<dl>
<dt>'%'</dt>
<dd>starts the placeholder. If you want to insert a literal
<var>%</var> character, then you must insert two of them : <var>%%</var>.
</dd>
<dt>Index ':'</dt>
<dd>takes the <var>Index</var>-th element in the argument array
as the element to insert. If <var>index</var> is omitted, then the zeroth argument
is taken.
</dd>
<dt>'-'</dt>
<dd>tells <var>Format</var> to left-align the inserted text. The default
behaviour is to right-align inserted text. This can only take effect if the
<var>Width</var> element is also specified.
</dd>
<dt>Width</dt>
<dd>the inserted string must have at least <var>Width</var>
characters. If not, the inserted string will be padded with spaces. By
default, the string is left-padded, resulting in a right-aligned string.
This behaviour can be changed by the usage of the <var>'-'</var> character.
</dd>
<dt>'.' Precision</dt>
<dd>Indicates the precision to be used when converting
the argument. The exact meaning of this parameter depends on <var>ArgType</var>.
</dd>
</dl>
<p>
The <var>Index</var>, <var>Width</var> and <var>Precision</var> parameters can be replaced
by <var>*</var>, in which case their value will be read from the next element in
the <var>Args</var> array. This value must be an integer, or an
<link id="EConvertError"/> exception will be raised.
</p>
<p>
The argument type is determined from <var>ArgType</var>. It can have one of the
following values (case insensitive):
</p>
<dl>
<dt>D</dt>
<dd>
Decimal format. The next argument in the <var>Args</var> array should be
an integer. The argument is converted to a decimal string. If precision is
specified, then the string will have at least <var>Precision</var> digits in it.
If needed, the string is (left) padded with zeroes.
</dd>
<dt>E</dt>
<dd>
<p>
Scientific format. The next argument in the <var>Args</var> array should
be a Floating point value. The argument is converted to a decimal string
using scientific notation, using <link id="FloatToStrF"/>, where the optional
precision is used to specify the total number of decimals. (defalt a valueof
15 is used). The exponent is formatted using maximally 3 digits.
</p>
<p>
In short, the <var>E</var> specifier formats it's argument as follows:
</p>
<code>
FloatToStrF(Argument,ffexponent,Precision,3)
</code>
</dd>
<dt>F</dt>
<dd>
<p>Fixed point format. The next argument in the <var>Args</var> array
should be a floating point value. The argument is converted to a
decimal string, using fixed notation (see <link id="FloatToStrF"/>).
<var>Precision</var> indicates the number of digits following the
decimal point.
</p>
<p>
In short, the <var>F</var> specifier formats it's argument as follows:
</p>
<code>
FloatToStrF(Argument,ffFixed,ffixed,9999,Precision)
</code>
</dd>
<dt>G</dt>
<dd>
<p>
 General number format. The next argument in the <var>Args</var> array
should be a floating point value. The argument is converted to a decimal
string using fixed point notation or scientific notation, depending on which
gives the shortest result. <var>Precision</var> is used to determine the number
of digits after the decimal point.
</p>
<p>
In short, the <var>G</var> specifier formats it's argument as follows:
</p>
<code>
FloatToStrF(Argument,ffGeneral,Precision,3)
</code>
</dd>
<dt>M</dt>
<dd>
<p>Currency format. the next argument in the <var>Args</var> array must
be a floating point value. The argument is converted to a decimal string
using currency notation. This means that fixed-point notation is used, but
that the currency symbol is appended. If precision is specified, then
then it overrides the <var>CurrencyDecimals</var> global variable used in the
<link id="FloatToStrF"/>
</p>
<p>
In short, the <var>M</var> specifier formats it's argument as follows:
</p>
<code>
FloatToStrF(Argument,ffCurrency,9999,Precision)
</code>
</dd>
<dt>N</dt>
<dd>Number format. This is the same as fixed point format, except that
thousand separators are inserted in the resulting string.
</dd>
<dt>P</dt>
<dd>Pointer format. The next argument in the <var>Args</var> array must be a
pointer (typed or untyped). The pointer value is converted to a string of
length 8, representing the hexadecimal value of the pointer.
</dd>
<dt>S</dt>
<dd>String format. The next argument in the <var>Args</var> array must be
a string. The argument is simply copied to the result string. If
<var>Precision</var> is specified, then only <var>Precision</var> characters are
copied to the result string.
</dd>
<dt>U</dt>
<dd>
Unsigned decimal format. The next argument in the <var>Args</var> array should be
an unsigned integer. The argument is converted to a decimal string. If precision is
specified, then the string will have at least <var>Precision</var> digits in it.
If needed, the string is (left) padded with zeroes.
</dd>
<dt>X</dt>
<dd>hexadecimal format. The next argument in the <var>Args</var> array must
be an integer. The argument is converted to a hexadecimal string with just
enough characters to contain the value of the integer. If <var>Precision</var>
is specified then the resulting hexadecimal representation will have at
least <var>Precision</var> characters in it (with a maximum value of 32).
</dd>
</dl>
</descr>
<errors>
<p>
In case of error, an <var>EConvertError</var> exception is raised. Possible
errors are:
</p>
<ol>
<li>Errors in the format specifiers.</li>
<li>The next argument is not of the type needed by a specifier.</li>
<li>The number of arguments is not sufficient for all format specifiers.</li>
</ol>
</errors>
<seealso>
<link id="FormatBuf"/>
<link id="EConvertError"/>
</seealso>
<example file="sysutex/ex71"/>
</element>

<element name="FormatBuf">
<short>Format a string with given arguments and store the result in a buffer.</short>
<descr>
<var>FormatBuf</var> calls <link id="Format"/> and stores the result in <var>Buf</var>.
</descr>
<seealso>
<link id="Format"/>
</seealso>
<example file="sysutex/ex72"/>
</element>

<element name="FormatFloat">
<short>Format a float according to a certain mask.</short>
<descr>
<p>
<var>FormatFloat</var> formats the floating-point value given by <var>Value</var> using 
the format specifications in <var>Format</var>. The format specifier can give
format specifications for positive, negative or zero values (separated by 
a semicolon).
</p>
<p>
If the formatspecifier is empty or the value needs more than 18 digits to
be correctly represented, the result is formatted with a call to 
<link id="FloatToStrF"/> with the <var>ffGeneral</var> format option.
</p>
<p>
The following format specifiers are supported:
</p>
<dl>
<dt>0</dt>
<dd>is a digit place holder. If there is a corresponding digit in 
the value being formatted, then it replaces the 0. If not, the 0 is left
as-is.
</dd>
<dt>#</dt>
<dd>is also a digit place holder. If there is a corresponding digit in
the value being formatted, then it replaces the #. If not, it is removed.
by a space.
</dd>
<dt>.</dt>
<dd>determines the location of the decimal point. Only the first '.'
character is taken into account. If the value contains digits after the
decimal point, then it is replaced by the value of the <var>DecimalSeparator</var>
character.
</dd>
<dt>,</dt>
<dd>determines the use of the thousand separator character in the
output string. If the format string contains one or more ',' charactes, 
then thousand separators will be used. The <var>ThousandSeparator</var> character
is used.
</dd>
<dt>E+</dt>
<dd>determines the use of scientific notation. If 'E+' or 'E-' (or
their lowercase counterparts) are present then scientific notation is used.
The number of digits in the output string is determined by the number of
<var>0</var> characters after the '<var>E+</var>'
</dd>
<dt>;</dt>
<dd>This character separates sections for positive, negative, and zero numbers in the
format string.	
</dd>
</dl>
</descr>
<errors>
If an error occurs, an exception is raised.
</errors>
<seealso>
<link id="FloatToStr"/>
</seealso>
<example file="sysutex/ex89"/>
</element>


<element name="IntToHex">
<short>Convert an integer value to a hexadecimal string.</short>
<descr>
<var>IntToHex</var> converts <var>Value</var> to a hexadecimal string
representation. The result will contain at least <var>Digits</var>
characters. If <var>Digits</var> is less than the needed number of characters,
the string will NOT be truncated. If <var>Digits</var> is larger than the needed
number of characters, the result is padded with zeroes.
</descr>
<errors>
None.
</errors>
<seealso>
<link id="IntToStr"/>, <var>StrToInt</var>
</seealso>
<example file="sysutex/ex73"/>
</element>



<element name="IntToStr">
<short>Convert an integer value to a decimal string.</short>
<descr>
<var>IntToStr</var> coverts <var>Value</var> to it's string representation.
The resulting string has only as much characters as needed to represent
the value. If the value is negative a minus sign is prepended to the
string.
</descr>
<errors>
None.
</errors>
<seealso>
<link id="IntToHex"/>
<link id="StrToInt"/>
</seealso>
<example file="sysutex/ex74"/>
</element>



<element name="IsValidIdent">
<short>Check whether a string is a valid identifier name.</short>
<descr>
<var>IsValidIdent</var> returns <var>True</var> if <var>Ident</var> can be used as a
compoent name. It returns <var>False</var> otherwise. <var>Ident</var> must consist of
a letter or underscore, followed by a combination of letters, numbers or
underscores to be a valid identifier.
</descr>
<errors>
None.
</errors>
<seealso>
</seealso>
<example file="sysutex/ex75"/>
</element>



<element name="LastDelimiter">
<short>Return the last occurrence of a set of delimiters in a string.</short>
<descr>
<var>LastDelimiter</var> returns the <em>last</em> occurrence of any character in
the set <var>Delimiters</var> in the string <var>S</var>.
</descr>
<errors>
</errors>
<seealso>
</seealso>
<example file="sysutex/ex88"/>
</element>

<element name="LeftStr">
<short>Return a number of characters starting at the left of a string.</short>
<descr>
<var>LeftStr</var> returns the <var>Count</var> leftmost characters of <var>S</var>.
It is equivalent to a call to <var>Copy(S,1,Count)</var>.
</descr>
<errors>
None.
</errors>
<seealso>
<link id="RightStr"/>
<link id="TrimLeft"/>
<link id="TrimRight"/>
<link id="Trim"/>
</seealso>
<example file="sysutex/ex76"/>
</element>



<element name="LoadStr">
<short>Load a string from the resource tables.</short>
<descr>
This function is not yet implemented. resources are not yet supported.
</descr>
<errors>
</errors>
<seealso>
</seealso>
</element>

<element name="LowerCase">
<short>Return a lowercase version of a string.</short>
<descr>
<p>
<var>LowerCase</var> returns the lowercase equivalent of <var>S</var>. Ansi characters
are not taken into account, only ASCII codes below 127 are converted. It is
completely equivalent to the lowercase function of the system unit, and is
provided for compatibility only.
</p>
<p>
<var>Lowercase</var> does not change the number of characters (or bytes) in
an ansistring or shortstring.
</p>
</descr>
<errors>
None.
</errors>
<seealso>
<link id="AnsiLowerCase"/>
<link id="UpperCase"/>
<link id="AnsiUpperCase"/>
</seealso>
<example file="sysutex/ex77"/>
</element>



<element name="NewStr">
<short>Allocate a new ansistring on the heap.</short>
<descr>
<p>
<var>NewStr</var> assigns a new dynamic string on the heap, copies <var>S</var> into
it, and returns a pointer to the newly assigned string.
</p>
<p>
This function is obsolete, and shouldn't be used any more. The
<var>AnsiString</var> mechanism also allocates ansistrings on the heap, and
should be preferred over this mechanism.
</p>
<p>
For an example, see <link id="AssignStr"/>.
</p>
</descr>
<errors>
If not enough memory is present, an EOutOfMemory exception will be raised.
</errors>
<seealso>
<link id="AssignStr"/>
<link id="DisposeStr"/>
</seealso>
</element>


<element name="QuotedStr">
<short>Return a quotes version of a string.</short>
<descr>
<var>QuotedStr</var> returns the string <var>S</var>, quoted with single quotes. This means
that <var>S</var> is enclosed in single quotes, and every single quote in <var>S</var>
is doubled. It is equivalent to a call to <var>AnsiQuotedStr(s, '''')</var>.
</descr>
<errors>
None.
</errors>
<seealso>
<link id="AnsiQuotedStr"/>
<link id="AnsiExtractQuotedStr"/>.
</seealso>
<example file="sysutex/ex78"/>
</element>


<element name="RightStr">
<short>Return a number of characters from a string, starting at the end.</short>
<descr>
<p>
<var>RightStr</var> returns the <var>Count</var> rightmost characters of <var>S</var>.
It is equivalent to a call to <var>Copy(S,Length(S)+1-Count,Count)</var>.
</p>
<p>
If <var>Count</var> is larger than the actual length of <var>S</var> only the real
length will be used.
</p>
</descr>
<errors>
None.
</errors>
<seealso>
<link id="LeftStr"/>
<link id="Trim"/>
<link id="TrimLeft"/>
<link id="TrimRight"/>
</seealso>
<example file="sysutex/ex79"/>
</element>



<element name="StrFmt">
<short>Format a string with given arguments, store the result in a buffer.</short>
<descr>
<var>StrFmt</var> will format <var>fmt</var> with <var>Args</var>, as the <link id="Format"/>
function does, and it will store the result in <var>Buffer</var>. The function
returns <var>Buffer</var>. <var>Buffer</var> should point to enough space to contain
the whole result.
</descr>
<errors>
for a list of errors, see <link id="Format"/>.
</errors>
<seealso>
<link id="StrLFmt"/>
<link id="FmtStr"/>
<link id="Format"/>
<link id="FormatBuf"/>
</seealso>
<example file="sysutex/ex80"/>
</element>



<element name="StrLFmt">
<short>Format a string with given arguments, but with limited length.</short>
<descr>
<var>StrLFmt</var> will format <var>fmt</var> with <var>Args</var>, as the <link id="Format"/>
function does, and it will store maximally <var>Maxlen characters</var> of the
result in <var>Buffer</var>. The function returns <var>Buffer</var>. <var>Buffer</var>
should point to enough space to contain <var>MaxLen</var> characters.
</descr>
<errors>
for a list of errors, see <link id="Format"/>.
</errors>
<seealso>
<link id="StrFmt"/>
<link id="FmtStr"/>
<link id="Format"/>
<link id="FormatBuf"/>
</seealso>
<example file="sysutex/ex81"/>
</element>


<element name="StrToFloat">
<short>Convert a string to a floating-point value.</short>
<descr>
<p>
<var>StrToFloat</var> converts the string <var>S</var> to a floating point value.
<var>S</var> should contain a valid string representation of a floating point 
value (either in decimal or scientific notation). The
<var>thousandseparator</var> character may however not be used.
</p>
<p>
Up to and including version 2.2.2 of the compiler, if the string contains a
decimal value, then the decimal separator character can either be a '.' or the
value of the <var>DecimalSeparator</var> variable.
</p>
<p>
As of version 2.3.1, the string may contain only the <var>DecimalSeparator</var> 
character. The dot ('.') can no longer be used instead of the
<var>DecimalSeparator</var>.
</p>
</descr>
<errors>
If the string <var>S</var> doesn't contain a valid floating point string, then an
exception will be raised.
</errors>
<seealso>
<link id="TextToFloat"/>
<link id="FloatToStr"/>
<link id="FormatFloat"/>
<link id="StrToInt"/>
</seealso>
<example file="sysutex/ex90"/>
</element>



<element name="StrToInt">
<short>Convert a string to an integer value.</short>
<descr>
<p>
<var>StrToInt</var> will convert the string <var>S</var>to an integer.
If the string contains invalid characters or has an invalid format,
then an <link id="EConvertError"/> is raised.
</p>
<p>
To be successfully converted, a string can contain a combination
of <var>numerical</var> characters, possibly preceded by a minus sign (<var>-</var>).
Spaces are not allowed.
</p>
<p>
The string <var>S</var> can contain a number in decimal, hexadecimal, binary
or octal format, as described in the language reference. For enumerated
values, the string must be the name of the enumerated value. The name is
searched case insensitively.
</p>
<p>
For hexadecimal values, the prefix '0x' or 'x' (case insensitive) may be
used as well. 
</p>
</descr>
<errors>
In case of error, an <var>EConvertError</var> is raised.
</errors>
<seealso>
<link id="IntToStr"/>
<link id="StrToIntDef"/>
<link id="EConvertError"/>
</seealso>
<example file="sysutex/ex82"/>
</element>



<element name="StrToIntDef">
<short>Convert a string to an integer value, with a default value.</short>
<descr>
<p>
<var>StrToIntDef</var> will convert a string to an integer. If the string contains
invalid characters or has an invalid format, then <var>Default</var> is returned.
</p>
<p>
To be successfully converted, a string can contain a combination of
<var>numerical</var> characters, possibly preceded by a minus sign (<var>-</var>).
Spaces are not allowed.
</p>
</descr>
<errors>
None.
</errors>
<seealso>
<link id="IntToStr"/>
<link id="StrToInt"/>
</seealso>
<example file="sysutex/ex83"/>
</element>


<element name="TextToFloat">
<short>Convert a buffer to a float value.</short>
<descr>
<p>
<var>TextToFloat</var> converts the string in <var>Buffer</var> to a floating point 
value. <var>Buffer</var> should contain a valid stroing representation of a 
floating point value (either in decimal or scientific notation). 
If the buffer contains a decimal value, then the decimal separator 
character can either be a '.' or the value of the <var>DecimalSeparator</var> 
variable.
</p>
<p>
The function returns <var>True</var> if the conversion was successful.
</p>
</descr>
<errors>
If there is an invalid character in the buffer, then the function returns
<var>False</var>
</errors>
<seealso>
<link id="StrToFloat"/>
<link id="FloatToStr"/>
<link id="FormatFloat"/>
</seealso>
<example file="sysutex/ex91"/>
</element>

<element name="Trim">
<short>Trim whitespace from the ends of a string.</short>
<descr>
<p>
<var>Trim</var> strips blank characters (spaces and control characters) at the beginning and 
end of <var>S</var> and returns the resulting string. All characters with ordinal values less 
than or equal to <var>32</var> (a space) are stripped.
</p>
<p>
If the string contains only spaces, an empty string is returned.
</p>
</descr>
<errors>
None.
</errors>
<seealso>
<link id="TrimLeft"/>
<link id="TrimRight"/>
</seealso>
<example file="sysutex/ex84"/>
</element>

<element name="TrimLeft">
<short>Trim whitespace from the beginning of a string.</short>
<descr>
<p>
<var>Trim</var> strips blank characters (spaces and control characters) at the beginning  
of <var>S</var> and returns the resulting string. All characters with ordinal values less 
than or equal to <var>32</var> (a space) are stripped.
</p>
<p>
If the string contains only spaces, an empty string is returned.
</p>
</descr>
<errors>
None.
</errors>
<seealso>
<link id="Trim"/>
<link id="TrimRight"/>
</seealso>
<example file="sysutex/ex85"/>
</element>

<element name="TrimRight">
<short>Trim whitespace from the end of a string.</short>
<descr>
<p>
<var>Trim</var> strips blank characters (spaces and control characters) at the
end of <var>S</var> and returns the resulting string. All characters with ordinal 
values less  than or equal to <var>32</var> (a space) are stripped.
</p>
<p>
If the string contains only spaces, an empty string is returned.
</p>
</descr>
<errors>
None.
</errors>
<seealso>
<link id="Trim"/>
<link id="TrimLeft"/>
</seealso>
<example file="sysutex/ex86"/>
</element>


<element name="UpperCase">
<short>Return an uppercase version of a string.</short>
<descr>
<var>UpperCase</var> returns the uppercase equivalent of <var>S</var>. Ansi characters
are not taken into account, only ASCII codes below 127 are converted. It is
completely equivalent to the <var>UpCase</var> function of the system unit, and is
provided for compatiibility only.
</descr>
<errors>
None.
</errors>
<seealso>
<link id="AnsiLowerCase"/>
<link id="LowerCase"/>
<link id="AnsiUpperCase"/>
</seealso>
<example file="sysutex/ex87"/>
</element>

<element name="Unix">
<short>Unix unit.</short>
</element>

<element name="errors">
<short>Error descriptions.</short>
</element>

<element name="sysconst">
<short>Error and other message strings.</short>
</element>

<element name="GetLastOSError">
<short>Return the last code from the OS.</short>
<descr>
<p>
<var>GetLastOSError</var> returns the error code from the last operating
system call. It does not reset this code. In general, it should be called
when an operating system call reported an error condition. In that case,
<var>GetLastOSError</var> gives extended information about the error.
</p>
<p>
No assumptions should be made about the resetting of the error code by
subsequent OS calls. This may be platform dependent.
</p>
</descr>
<seealso>
<link id="RaiseLastOSError"/>
</seealso>
</element>

<!-- procedure Visibility: default -->
<element name="RaiseLastOSError">
<short>Raise an exception with the last Operating System error code.</short>
<descr>
<var>RaiseLastOSError</var> raises an <link id="EOSError"/> exception with
the error code returned by <var>GetLastOSError</var>. If the Error code is
nonzero, then the corresponding error message will be returned. If the error
code is zero, a standard message will be returned.
</descr>
<errors>
This procedure may not be implemented on all platforms. If it is not, then a
normal <link id="Exception"/> will be raised.
</errors>
<seealso>
<link id="EOSError"/>
<link id="GetLastOSError"/>
<link id="Exception"/>
</seealso>
</element>

<!-- function Visibility: default -->
<element name="GetEnvironmentVariable">
<short>Return the value of an environment variable.</short>
<descr>
<p>
<var>GetEnvironmentVariable</var> returns the value of the <var>EnvVar</var>
environment variable. If the specified variable does not exist or
<var>EnvVar</var> is empty, an empty string is returned.
</p>
</descr>
<seealso>
<link id="GetEnvironmentString"/>
<link id="GetEnvironmentVariableCount"/>
<example file="sysutex/ex93"/>
</seealso>

</element>

<!-- function Visibility: default -->
<element name="GetEnvironmentVariableCount">
<short>Return the number of variables in the environment.</short>
<descr>
<p>
<var>GetEnvironmentVariableCount</var> returns the number of variables in
the environment. The number is 1 based, but the result may be zero if there
are no environment variables.
</p>
</descr>
<errors>
If there is no environment, -1 may be returned.
</errors>
<seealso>
<link id="GetEnvironmentString"/>
<link id="GetEnvironmentVariable"/>
</seealso>
<example file="sysutex/ex92"/>
</element>

<element name="GetEnvironmentString">
<short>Return an environment variable by index.</short>
<descr>
<p>
<var>GetEnvironmentString</var> returns the <var>Index</var>-th environment
variable. The index is 1 based, and is bounded from above by the result of <link
id="GetEnvironmentVariableCount"/>.
</p>
<p>
For an example, <link id="GetEnvironmentVariableCount"/>.
</p>
<remark>
Note that on Windows, environment strings can start with an equal sign (=).
This is a trick used to pass the current working directory to a newly created
proces. In this case, extracting the variable name as the characters before
the first equal sign will result in an empty name.
</remark>
</descr>
<errors>
If there is no environment, an empty string is returned.
</errors>
<seealso>
<link id="GetEnvironmentVariable"/>
<link id="GetEnvironmentVariableCount"/>
</seealso>
</element>

<!-- procedure Visibility: default -->
<element name="Sleep">
<short>Suspend execution of a program for a certain time.</short>
<descr>
<p>
<var>Sleep</var> suspends the execution of the program for
the specified number of milliseconds (<var>milliseconds</var>). 
After the specified period has expired, program execution resumes.
</p>
<remark>The indicated time is not exact, i.e. it is a minimum time. No
guarantees are made as to the exact duration of the suspension. 
</remark>
</descr>
</element>

<!-- function Visibility: default -->
<element name="ExecuteProcess">
<short>Execute another process (program).</short>
<descr>
<p>
<var>ExecuteProcess</var> will execute the program in <var>Path</var>,
passing it the arguments in <var>ComLine</var>. <var>ExecuteProcess</var>
will then wait for the program to finish, and will return the exit code of
the executed program. In case <var>ComLine</var> is a single string, it will
be split out in an array of strings, taking into account common whitespace
and quote rules.
</p>
<p>
The program specified in <var>Path</var> is not searched in the searchpath 
specified in the <var>PATH</var> environment variable, so the full path to the 
executable must be specified in <var>Path</var>, although some operating systems 
may perform this search anyway (notably, windows)
</p>
<p>
<var>Flags</var> can be used to control the passing of file handles: if
<var>ExecInheritsHandles</var> is included, the file handles of the current
process will be passed on to the newly executed process.
</p>
</descr>
<errors>
In case the program could not be executed or an other error occurs, 
an <link id="EOSError"/> exception  will be raised.
</errors>
<seealso>
<link id="TExecuteFlags"/>
<link id="EOSError"/>
</seealso>
</element>

<!-- function Visibility: default -->
<element name="GetAppConfigDir">
<short>Return the appropriate directory for the application's configuration files.</short>
<descr>
<p>
<var>GetAppConfigDir</var> returns the name of a directory in which the
application should store its configuration files on the current OS. 
If the parameter <var>Global</var> is <var>True</var> then the directory 
returned is a global
directory, i.e. valid for all users on the system. If the parameter
<var>Global</var> is false, then the directory is specific for the user who
is executing the program. On systems that do not support multi-user
environments, these two directories may be the same.
</p>
<p>
The directory which is returned is the name of the directory where the application is
supposed to store files. This does not mean that the directory exists, or
that the user can write in this directory (especially if
<var>Global</var>=<var>True</var>). It just returns the name of the
appropriate location. Also note that the returned name always contains an ending
path delimiter.
</p>
<p>
On systems where the operating system provides a call to determine this
location, this call will be used. On systems where there is no such call, 
an algorithm is used which reflects common practice on that system.
</p>
<p>
The application name is deduced from the binary name via the <link id="ApplicationName"/>
call, but can be configured by means of the <link id="OnGetApplicationName"/> callback.
</p>
<p>
If <link id="VendorName"/> is not-empty, then <var>VendorName</var> will also be
inserted before the application-specific directory.
</p>
</descr>
<errors>
None.
</errors>
<seealso>
<link id="GetAppConfigFile"/>
<link id="ApplicationName"/>
<link id="OnGetApplicationName"/>
<link id="CreateDir"/>
<link id="SysConfigDir"/>
<link id="VendorName"/>
</seealso>
</element>

<!-- function Visibility: default -->
<element name="GetAppConfigFile">
<short>Return an appropriate name for an application configuration file.</short>
<descr>
<p>
<var>GetAppConfigFile</var> returns the name of a file in which the
application can store its configuration parameters. The exact name and
location of the file depends on the customs of the operating system.
</p>
<p>
The <var>Global</var> parameter determines whether it is a global 
configuration file (value <var>True</var>) or a personal configuration
file (value <var>False</var>). 
</p>
<p>
The parameter <var>SubDir</var>, in case it is set to <var>True</var>, will 
insert the name of a directory before the filename. This can be used in case 
the application needs to store other data than configuration data in an application-specific
directory. Default behaviour is to set this to <var>False</var>. 
</p>
<p>
Note that on Windows, even when <var>Subdir</var> is <var>False</var>, 
a subdirectory is created for the application configuration files, as per the windows
specifications. Specifying <var>true</var> will create a subdirectory of the
application settings subdirectory.
</p>
<p> 
The default file extension of the returned file is: <var>.cfg</var>
</p>
<p>
No assumptions should be made about the existence or writeability of this 
file, or the directory where the file should reside. It is best to call
<link id="ForceDirectories"/> prior to opening a file with the resulting
filename.
</p>
<p>
On systems where the operating system provides a call to determine the
location of configuration files, this call will be used. On systems 
where there is no such call, an algorithm is used which reflects common 
practice on that system.
</p>
<p>
The application name is deduced from the binary name via the <link id="ApplicationName"/>
call, but can be configured by means of the <link id="OnGetApplicationName"/> callback.
</p>
<p>
If <link id="VendorName"/> is not-empty, then <var>VendorName</var> will 
be inserted in the path for the config file directory.
</p>
</descr>
<errors>
None.
</errors>
<seealso>
<link id="GetAppConfigDir"/>
<link id="OnGetApplicationName"/>
<link id="ApplicationName"/>
<link id="CreateDir"/>
<link id="ConfigExtension"/>
<link id="SysConfigDir"/>
<link id="VendorName"/>
</seealso>
</element>

<!-- function Visibility: default -->
<element name="ApplicationName">
<short>Return a default application name</short>
<descr>
<p>
<var>ApplicationName</var> returns the name of the current application.
Standard this is equal to the filename part minus extension of <var>ParamStr(0)</var>, 
but it can be customized by setting the <link id="OnGetApplicationName"/> callback.
</p>
<p>
Note that the returned value is only the <var>name</var> portion. It does
not contain any path or file extension.
</p>
</descr>
<errors>
None.
</errors>
<seealso>
<link id="GetAppConfigDir"/>
<link id="OnGetApplicationName"/>
<link id="GetAppConfigFile"/>
<link id="ConfigExtension"/>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="ConfigExtension">
<short>Default application configuration file extension.</short>
<descr>
<var>ConfigExtension</var> is the default extension used by the
<link id="GetAppConfigFile"/> call. It can be set to any valid extension for
the current OS.
</descr>
<errors>
</errors>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="SysConfigDir">
<short>System configuration directory.</short>
<descr>
<p>
<var>SysConfigDir</var> is the default system configuration directory. It is
set at application startup by the <file>sysutils</file> initialization
routines.
</p>
<p>
This directory may be returned by the <link id="GetAppConfigDir"/> call on
some systems.
</p>
</descr>
<errors>
</errors>
<seealso>
<link id="GetAppConfigDir"/>
</seealso>
</element>

<!-- function type Visibility: default -->
<element name="TGetAppNameEvent">
<short>Callback type to get customized application name.</short>
<descr>
This callback type is used by the <link id="OnGetApplicationName"/> to
return an alternative application name.
</descr>
<errors>
</errors>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="OnGetApplicationName">
<short>Callback to get a customized application name.</short>
<descr>
<p>
By default, the configuration file routines <link id="GetAppConfigDir"/> and
<link id="GetAppConfigFile"/> use a default application name to construct a
directory or filename. This callback can be used to provide an alternative
application name.
</p>
<p>
Since the result of this callback will be used to construct a filename, care 
should be taken that the returned name does not contain directory separator
characters or characters that cannot appear in a filename.
</p>
</descr>
<errors>
</errors>
<seealso>
<link id="TGetAppNameEvent"/>
<link id="ApplicationName"/>
<link id="GetAppConfigDir"/>
<link id="GetAppConfigFile"/>
</seealso>
</element>

<!-- pointer type Visibility: default -->
<element name="PDayTable">
<short>Pointer to TDayTable type.</short>
</element>

<!-- array type Visibility: default -->
<element name="TDayTable">
<short>Array of day names.</short>
</element>

<!-- constant Visibility: default -->
<element name="HoursPerDay">
<short>Number of hours in a day.</short>
</element>

<!-- constant Visibility: default -->
<element name="MinsPerHour">
<short>Number of minutes per hour.</short>
</element>

<!-- constant Visibility: default -->
<element name="SecsPerMin">
<short>Number of seconds per minute</short>
</element>

<!-- constant Visibility: default -->
<element name="MSecsPerSec">
<short>Number of milliseconds per second</short>
</element>

<!-- constant Visibility: default -->
<element name="MinsPerDay">
<short>Number of minutes per day.</short>
</element>

<!-- constant Visibility: default -->
<element name="SecsPerDay">
<short>Number of seconds per day</short>
</element>

<!-- constant Visibility: default -->
<element name="MSecsPerDay">
<short>Number of milliseconds per day</short>
</element>

<!-- constant Visibility: default -->
<element name="DateDelta">
<short>Days between 1/1/0001 and 12/31/1899</short>
</element>

<!-- constant Visibility: default -->
<element name="UnixDateDelta">
<short>Number of days between 1.1.1900 and 1.1.1970</short>
</element>

<!-- constant Visibility: default -->
<element name="MonthDays">
<short>Array with number of days in the months for leap and non-leap years.</short>
</element>

<!-- constant Visibility: default -->
<element name="TwoDigitYearCenturyWindow">
<short>Window to determine what century 2 digit years are in.</short>
</element>

<!-- record type Visibility: default -->
<element name="TSystemTime">
<short>System time structure</short>
<descr>The System time structure contains the date/time in a
human-understandable format.
</descr>
</element>

<!-- variable Visibility: default -->
<element name="TSystemTime.Year">
<short>Year part</short>
</element>

<!-- variable Visibility: default -->
<element name="TSystemTime.Month">
<short>Month part</short>
</element>

<!-- variable Visibility: default -->
<element name="TSystemTime.Day">
<short>Day of month part</short>
</element>

<!-- variable Visibility: default -->
<element name="TSystemTime.Hour">
<short>Hour of the day</short>
</element>

<!-- variable Visibility: default -->
<element name="TSystemTime.Minute">
<short>Minute of the hour</short>
</element>

<!-- variable Visibility: default -->
<element name="TSystemTime.Second">
<short>Second of the minute</short>
</element>

<!-- variable Visibility: default -->
<element name="TSystemTime.MilliSecond">
<short>Milliseconds in the second</short>
</element>

<!-- record type Visibility: default -->
<element name="TTimeStamp">
<short>TimeStamp structure</short>
<descr>
<var>TTimeStamp</var> contains a timestamp, with the date and time parts
specified as separate <var>TDateTime</var> values.
</descr>
</element>

<!-- variable Visibility: default -->
<element name="TTimeStamp.Time">
<short>Time part</short>
</element>

<!-- variable Visibility: default -->
<element name="TTimeStamp.Date">
<short>Date part</short>
</element>

<!-- function Visibility: default -->
<element name="TryEncodeDate">
<short>Try to encode a date, and indicate success.</short>
<descr>
<var>TryEncodeDate</var> will check the validity of the <var>Year</var>,
<var>Month</var> and <var>Day</var> arguments, and if they are all valid,
then they will be encoded as a <var>TDateTime</var> value and returned in
<var>Date</var>. The function will return <var>True</var> in this case. If an
invalid argument is passed, then <var>False</var> will be returned.
</descr>
<errors>
None. If an error occurs during the encoding, <var>False</var> is returned.
</errors>
<seealso>
<link id="EncodeDate"/>
<link id="DecodeDateFully"/>
<link id="DecodeDate"/>
<link id="TryEncodeTime"/>
</seealso>
</element>

<!-- function Visibility: default -->
<element name="TryEncodeTime">
<short>Try to encode a time, and indicate success.</short>
<descr>
<var>TryEncodeTime</var> will check the validity of the <var>Hour</var>,
<var>Min</var>, <var>Sec</var> and <var>MSec</var> arguments, and will
encode them in a <var>TDateTime</var> value which is returned in
<var>Time</var>. If the arguments are valid, then <var>True</var> is returned,
otherwise <var>False</var> is returned.
</descr>
<errors>
None. If an error occurs during the encoding, <var>False</var> is returned.
</errors>
<seealso>
<link id="EncodeTime"/>
<link id="DecodeTime"/>
<link id="TryEncodeDate"/>
</seealso>
</element>

<!-- function Visibility: default -->
<element name="DecodeDateFully">
<short>Decode a date with additional date of the week.</short>
<descr>
<var>DecodeDateFully</var>, like <link id="DecodeDate"/>, decodes 
<var>DateTime</var> in its parts and returns these in <var>Year</var>, 
<var>Month</var>, <var>Day</var> but in addition returns the day of 
the week in <var>DOW</var>.
</descr>
<errors>
None.
</errors>
<seealso>
<link id="EncodeDate"/>
<link id="TryEncodeDate"/>
<link id="DecodeDate"/>
</seealso>
</element>

<!-- procedure Visibility: default -->
<element name="GetLocalTime">
<short>Get the local time.</short>
<descr>
<var>GetLocalTime</var> returns the system time in a <link id="TSystemTime"/>
format.
</descr>
<errors>
None.
</errors>
<seealso>
<link id="Now"/>
<link id="Date"/>
<link id="Time"/>
<link id="TSystemTime"/>
</seealso>
</element>

<!-- pointer type Visibility: default -->
<element name="PString">
<short>Pointer to a ansistring</short>
</element>

<!-- enumeration type Visibility: default -->
<element name="TFloatFormat">
<short>Formats for the FloatToText function.</short>
<descr>
<var>TFloatFormat</var> is used to determine how a float value should be
formatted in the <link id="FloatToText"/> function.
</descr>
<seealso>
<link id="FloatToText"/>
<link id="FloatToStrF"/>
</seealso>
</element>

<!-- enumeration value Visibility: default -->
<element name="TFloatFormat.ffGeneral">
<short>General number format.</short>
</element>

<!-- enumeration value Visibility: default -->
<element name="TFloatFormat.ffExponent">
<short>Scientific format.</short>
</element>

<!-- enumeration value Visibility: default -->
<element name="TFloatFormat.ffFixed">
<short>Fixed point format.</short>
</element>

<!-- enumeration value Visibility: default -->
<element name="TFloatFormat.ffNumber">
<short>Fixed point format with thousand separatord</short>
</element>

<!-- enumeration value Visibility: default -->
<element name="TFloatFormat.ffCurrency">
<short>Monetary format.</short>
</element>

<!-- enumeration type Visibility: default -->
<element name="TFloatValue">
<short>Type of float to return in the buffer for TextToFloat.</short>
<descr>
<var>TFloatValue</var> determines which kind of value should be returned in
the (untyped) buffer used by the <link id="TextToFloat"/> function.
</descr>
<seealso>
<link id="TextToFloat"/>
</seealso>
</element>

<!-- enumeration value Visibility: default -->
<element name="TFloatValue.fvExtended">
<short>Extended value</short>
</element>

<!-- enumeration value Visibility: default -->
<element name="TFloatValue.fvCurrency">
<short>Currency value</short>
</element>

<!-- enumeration value Visibility: default -->
<element name="TFloatValue.fvSingle">
<short>Single value</short>
</element>

<!-- enumeration value Visibility: default -->
<element name="TFloatValue.fvReal">
<short>Real value</short>
</element>

<!-- enumeration value Visibility: default -->
<element name="TFloatValue.fvDouble">
<short>Double value</short>
</element>

<!-- enumeration value Visibility: default -->
<element name="TFloatValue.fvComp">
<short>Comp value</short>
</element>

<!-- set type Visibility: default -->
<element name="TReplaceFlags">
<short>Flags for StringReplace function</short>
<descr>
<var>TReplaceFlags</var> determines the behaviour of the 
<link id="StringReplace"/> function.
</descr>
<seealso>
<link id="StringReplace"/>.
</seealso>
</element>

<!-- enumeration value Visibility: default -->
<element name="TReplaceFlags.rfReplaceAll">
<short>Replace all occurrences of the search string with the replacement string.</short>
</element>

<!-- enumeration value Visibility: default -->
<element name="TReplaceFlags.rfIgnoreCase">
<short>Search case insensitive.</short>
</element>

<!-- record type Visibility: default -->
<element name="TFloatRec">
<short>Record descriing a float value</short>
<descr>
<var>TFloatRec</var> is used to descibe a floating point value by the
<link id="FloatToDecimal"/> function.
</descr>
<seealso>
<link id="FloatToDecimal"/>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TFloatRec.Exponent">
<short>Exponent part</short>
</element>

<!-- variable Visibility: default -->
<element name="TFloatRec.Negative">
<short>Sign part</short>
</element>

<!-- variable Visibility: default -->
<element name="TFloatRec.Digits">
<short>Digits of fraction</short>
</element>

<!-- constant Visibility: default -->
<element name="MinDateTime">
<short>Minimum <var>TDateTime</var> value.</short>
</element>

<!-- constant Visibility: default -->
<element name="MaxDateTime">
<short>Maximum <var>TDateTime</var> value.</short>
</element>

<!-- constant Visibility: default -->
<element name="MinCurrency">
<short>Minimum Currency value</short>
</element>

<!-- constant Visibility: default -->
<element name="MaxCurrency">
<short>Maximum currency value</short>
</element>

<!-- enumeration type Visibility: default -->
<element name="TTextLineBreakStyle">
<short>Line break style</short>
<descr>
<var>TTextLineBreakStyle</var> describes the style of linebreaks to be used
in the <link id="AdjustLineBreaks"/> function.
</descr>
<seealso>
<link id="AdjustLineBreaks"/>
</seealso>
</element>

<!-- enumeration value Visibility: default -->
<element name="TTextLineBreakStyle.tlbsLF">
<short>Linefeed only</short>
</element>
<element name="TTextLineBreakStyle.tlbsCR">
<short>Carriage-return only</short>
</element>

<!-- enumeration value Visibility: default -->
<element name="TTextLineBreakStyle.tlbsCRLF">
<short>Carriage-return and linefeed characters</short>
</element>

<!-- constant Visibility: default -->
<element name="DefaultTextLineBreakStyle">
<short>Default line break style for the current platform.</short>
</element>

<!-- constant Visibility: default -->
<element name="LeadBytes">
<short>Lead bytes in Multi-Byte character sets</short>
<descr>
<var>LeadBytes</var> contains the set of bytes that serve as lead byte in a
MBCS string.
</descr>
</element>

<!-- constant Visibility: default -->
<element name="EmptyStr">
<short>Empty String Constant</short>
</element>

<!-- constant Visibility: default -->
<element name="NullStr">
<short>Pointer to an empty string</short>
</element>

<!-- constant Visibility: default -->
<element name="EmptyWideStr">
<short>Empty wide string.</short>
</element>

<!-- function Visibility: default -->
<element name="CompareMemRange">
<short>Compare 2 memory locations</short>
<descr>
<p>
<var>CompareMemRange</var> compares the 2 memory locations pointed to by
<var>P1</var> and <var>P2</var> byte per byte. It stops comparing after
<var>Length</var> bytes have been compared, or when it has encountered 2
different bytes. The result is then
</p>
<dl>
<dt>&gt;0</dt><dd>if a byte in range <var>P1</var> was found that is bigger than the
corresponding byte in range <var>P2</var>.</dd>
<dt>0</dt><dd>if all bytes in range <var>P1</var> are the same as the corresponding 
bytes in range <var>P2</var>.</dd>
<dt>&lt;0</dt><dd>if a byte in range <var>P1</var> was found that is less than the
corresponding byte in range <var>P2</var>.</dd>
</dl>
</descr>
<errors>
None.
</errors>
<seealso>
<link id="SameText"/>
</seealso>
</element>

<!-- function Visibility: default -->
<element name="SameText">
<short>Checks whether 2 strings are the same (case insensitive)</short>
<descr>
<var>SameText</var> calls <link id="CompareText"/> with <var>S1</var> and
<var>S2</var> as parameters and returns <var>True</var> if the result of
that call is zero, or <var>False</var> otherwise.
</descr>
<errors>
None.
</errors>
<seealso>
<link id="CompareText"/>
<link id="AnsiSameText"/>
<link id="AnsiSameStr"/>
</seealso>
</element>

<!-- function Visibility: default -->
<element name="AnsiSameText">
<short>Checks whether 2 strings are the same (case insensitive)</short>
<descr>
<var>SameText</var> calls <link id="AnsiCompareText"/> with <var>S1</var> and
<var>S2</var> as parameters and returns <var>True</var> if the result of
that call is zero, or <var>False</var> otherwise.
</descr>
<errors>
</errors>
<seealso>
<link id="AnsiCompareText"/>
<link id="SameText"/>
<link id="AnsiSameStr"/>
</seealso>
</element>

<!-- function Visibility: default -->
<element name="AnsiSameStr">
<short>Checks whether 2 strings are the same (case sensitive)</short>
<descr>
<p>
<var>SameText</var> calls <link id="AnsiCompareStr"/> with <var>S1</var> and
<var>S2</var> as parameters and returns <var>True</var> if the result of
that call is zero, or <var>False</var> otherwise.
</p>
<remark>
A widestring manager must be installed in order for this function to work
correctly with various character sets.
</remark>
</descr>
<errors>
None.
</errors>
<seealso>
<link id="AnsiCompareStr"/>
<link id="SameText"/>
<link id="AnsiSameText"/>
</seealso>
</element>

<!-- function Visibility: default -->
<element name="AnsiStrLComp">
<short>Compare a limited number of characters of 2 strings</short>
<descr>
<p>
<var>AnsiStrLComp</var> functions the same as <link id="AnsiStrComp"/>, but
compares at most <var>MaxLen</var> characters. If the first <var>MaxLen</var> 
characters in both strings are the same, then zero is returned. 
</p>
<p>
Note that this function processes embedded null characters, treating them
as a normal character.
</p>
</descr>
<errors>
None.
</errors>
<seealso>
<link id="AnsiStrComp"/>
<link id="AnsiStrIComp"/>
<link id="AnsiStrLIComp"/>
</seealso>
</element>

<!-- function Visibility: default -->
<element name="TryStrToInt">
<short>Try to convert a string to an integer, and report on success.</short>
<descr>
<var>TryStrToInt</var> tries to convert the string <var>S</var> to an
integer, and returns <var>True</var> if this was succesful. In that case the
converted integer is returned in <var>I</var>. If the conversion failed,
(an invalid string, or the value is out of range) then <var>False</var> is returned.
</descr>
<errors>
None. On error, <var>False</var> is returned.
</errors>
<seealso>
<link id="StrToInt"/>
<link id="TryStrToInt64"/>
<link id="StrToIntDef"/>
<link id="StrToInt64"/>
<link id="StrToInt64Def"/>
</seealso>
</element>

<!-- function Visibility: default -->
<element name="StrToInt64">
<short>Convert a string to an Int64 value.</short>
<descr>
<p>
<var>StrToInt64</var> converts the string <var>S</var> to a Int64 value, and
returns this value. The string can only contain numerical characters, and
optionally a minus sign as the first character. Whitespace is not allowed.
</p>
<p>
Hexadecimal values (starting with the $ character) are supported.
</p>
</descr>
<errors>
On error, a <link id="EConvertError"/> exception is raised.
</errors>
<seealso>
<link id="TryStrToInt64"/>
<link id="StrToInt64Def"/>
<link id="StrToInt"/>
<link id="TryStrToInt"/>
<link id="StrToIntDef"/>
</seealso>
</element>

<!-- function Visibility: default -->
<element name="TryStrToInt64">
<short>Try to convert a string to an int64 value, and report on success.</short>
<descr>
<p>
<var>TryStrToInt64</var> tries to convert the string <var>S</var> to a Int64 value, and
returns this value in <var>I</var> if successful. If the conversion was
succesful, the function result is <var>True</var>, or <var>False</var>
otherwise.
The string can only contain numerical characters, and
optionally a minus sign as the first character. Whitespace is not allowed.
</p>
<p>
Hexadecimal values (starting with the $ character) are supported.
</p>
</descr>
<errors>
None. On error, <var>False</var> is returned.
</errors>
<seealso>
<link id="StrToInt64"/>
<link id="StrToInt64Def"/>
<link id="StrToInt"/>
<link id="TryStrToInt"/>
<link id="StrToIntDef"/>
</seealso>
</element>

<!-- function Visibility: default -->
<element name="StrToInt64Def">
<short>Convert a string to an Int64 value, with a default value</short>
<descr>
<var>StrToInt64Def</var> tries to convert the string <var>S</var> to a Int64
value, and returns this value. If the conversion fails for some reason, the
value <var>Default</var> is returned instead.
</descr>
<errors>
None. On error, the <var>Default</var> value is returned.
</errors>
<seealso>
<link id="StrToInt64"/>
<link id="TryStrToInt64"/>
<link id="StrToInt"/>
<link id="TryStrToInt"/>
<link id="StrToIntDef"/>
</seealso>
</element>

<!-- function Visibility: default -->
<element name="StrToFloatDef">
<short>Convert a string to a float, with a default value.</short>
<descr>
<var>StrToFloatDef</var> tries to convert the string <var>S</var> to a
floating point value, and returns this value. If the conversion fails for
some reason, the value <var>Default</var> is returned instead.
</descr>
<errors>
None. On error, the <var>Default</var> value is returned.
</errors>
<seealso>
</seealso>
</element>

<!-- function Visibility: default -->
<element name="FloatToDateTime">
<short>Convert a float to a <var>TDateTime</var> value.</short>
<descr>
<var>FloatToDateTime</var> converts the <var>Value</var> floating point
value to a <var>TDateTime</var> value. It checks whether <var>Value</var> is
in the valid range of dates (determined by <link id="MinDateTime"/> and
<link id="MaxDateTime"/>). If not, an <link id="EConvertError"/> exception
is raised.
</descr>
<errors>
If <var>Value</var> is out of range, an <link id="EConvertError"/> exception
is raised.
</errors>
<seealso>
<link id="EConvertError"/>
<link id="MinDateTime"/>
<link id="MaxDateTime"/>
</seealso>
</element>

<!-- function Visibility: default -->
<element name="FloattoCurr">
<short>Convert a float to a Currency value.</short>
<descr>
<var>FloatToCurr</var> converts the <var>Value</var> floating point
value to a <var>Currency</var> value. It checks whether <var>Value</var> is
in the valid range of currencies (determined by <link id="MinCurrency"/> and
<link id="MaxCurrency"/>). If not, an <link id="EConvertError"/> exception
is raised.
</descr>
<errors>
If <var>Value</var> is out of range, an <link id="EConvertError"/> exception
is raised.
</errors>
<seealso>
<link id="EConvertError"/>
<link id="TryFloatToCurr"/>
<link id="MinCurrency"/>
<link id="MaxCurrency"/>
</seealso>
</element>

<!-- function Visibility: default -->
<element name="TryFloatToCurr">
<short>Try to convert a float value to a currency value and report on success.</short>
<descr>
<var>TryFloatToCurr</var> tries convert the <var>Value</var> floating point
value to a <var>Currency</var> value. If successful, the function returns
<var>True</var> and the resulting currency value is returned in
<var>AResult</var>. It checks whether <var>Value</var> is
in the valid range of currencies (determined by <link id="MinCurrency"/> and
<link id="MaxCurrency"/>). If not, <var>False</var> is returned.
</descr>
<errors>
If <var>Value</var> is out of range, <var>False</var> is returned.
</errors>
<seealso>
<link id="FloatToCurr"/>
<link id="MinCurrency"/>
<link id="MaxCurrency"/>
</seealso>
</element>

<!-- function Visibility: default -->
<element name="CurrToStr">
<short>Convert a currency value to a string.</short>
<descr>
<p>
<var>CurrToStr</var> will convert a currency value to a string with a
maximum of 15 digits, and precision 2. Calling <var>CurrToStr</var> 
is equivalent to calling <link id="FloatToStrF"/>:
</p>
<code>
  FloatToStrF(Value,ffNumber,15,2);
</code>
</descr>
<errors>
None.
</errors>
<seealso>
<link id="FloatToStrF"/>
<link id="StrToCurr"/>
</seealso>
</element>

<!-- function Visibility: default -->
<element name="StrToCurr">
<short>Convert a string to a currency value</short>
<descr>
<var>StrToCurr</var> converts a string to a currency value and returns the
value. The string
should contain a valid currency amount, without currency symbol. If the
conversion fails, an <link id="EConvertError"/> exception is raised.
</descr>
<errors>
On error, an <link id="EConvertError"/> exception is raised.
</errors>
<seealso>
<link id="CurrToStr"/>
<link id="StrToCurrDef"/>
</seealso>
</element>

<!-- function Visibility: default -->
<element name="StrToCurrDef">
<short>Convert a string to a currency value, using a default value</short>
<descr>
<var>StrToCurrDef</var> converts a string to a currency value and returns the
value. The string should contain a valid currency amount, without currency 
symbol. If the conversion fails, the fallback <var>Default</var> value is returned.
</descr>
<errors>
On error, the <var>Default</var> value is returned.
</errors>
<seealso>
<link id="CurrToStr"/>
<link id="StrToCurr"/>
</seealso>
</element>

<!-- function Visibility: default -->
<element name="StrToBool">
<short>Convert a string to a boolean value</short>
<descr>
<var>StrToBool</var> will convert the string <var>S</var> to a boolean
value. The string <var>S</var> can contain one of <var>'True'</var>,
<var>'False'</var> (case is ignored) or a numerical value. If it contains a
numerical value, 0 is converted to <var>False</var>, all other values result
in <var>True</var>. If the string <var>S</var> contains no valid boolean,
then  an <link id="EConvertError"/> exception is raised.
</descr>
<errors>
On error, an <link id="EConvertError"/> exception is raised.
</errors>
<seealso>
<link id="BoolToStr"/>
</seealso>
</element>

<!-- function Visibility: default -->
<element name="BoolToStr">
<short>Convert a boolean value to a string.</short>
<descr>
<var>BoolToStr</var> converts the boolean <var>B</var> to one of
the strings <var>'TRUE'</var> or <var>'FALSE'</var>
</descr>
<errors>
None.
</errors>
<seealso>
<link id="StrToBool"/>
</seealso>
</element>

<!-- function Visibility: default -->
<element name="StringReplace">
<short>Replace occurrences of one substring with another in a string.</short>
<descr>
<var>StringReplace</var> searches the string <var>S</var> for
occurrences of the string <var>OldPattern</var> and, if it is found,
replaces it with <var>NewPattern</var>. It returns the resulting string. The
behaviour of <var>StringReplace</var> can be runed with <var>Flags</var>,
which is of type <link id="TReplaceFlags"/>. Standard behaviour is to
replace only the first occurrence of <var>OldPattern</var>, and to search
case sensitively.
</descr>
<errors>
None.
</errors>
<seealso>
<link id="TReplaceFlags"/>
<link id="WideStringReplace"/>
</seealso>
</element>

<!-- function Visibility: default -->
<element name="FloatToTextFmt">
<short>Convert a float value to a string using a given mask.</short>
<descr>
<p>
<var>FloatToTextFmt</var> returns a textual representation of
<var>Value</var> in the memory location pointed to by <var>Buffer</var>. it
uses the formatting specification in <var>Format</var> to do this. The
return value is the number of characters that were written in the buffer.
</p>
<p>
For a list of valid formatting characters, see <link id="FormatFloat"/>
</p>
</descr>
<errors>
No length checking is performed on the buffer. The buffer should point to
enough memory to hold the complete string. If this is not the case, an
access violation may occur.
</errors>
<seealso>
<link id="FormatFloat"/>
</seealso>
</element>

<!-- procedure Visibility: default -->
<element name="FloatToDecimal">
<short>Convert a float value to a <var>TFloatRec</var> value.</short>
<descr>
<var>FloatToDecimal</var> converts the float <var>Value</var> to a
float description in the <var>Result</var> <link id="TFloatRec"/> format.
It will store <var>Precision</var> digits in the <var>Digits</var> field, of
which at most <var>Decimal</var> decimals.
</descr>
<errors>
None.
</errors>
<seealso>
<link id="TFloatRec"/>
</seealso>
</element>

<!-- function Visibility: default -->
<element name="IsDelimiter">
<short>Check whether a given string is a delimiter character.</short>
<descr>
<var>IsDelimiter</var> checks whether the <var>Index</var>-th character in the
string <var>S</var> is a delimiter character as passed in
<var>Delimiters</var>. If <var>Index</var> is out of range, <var>False</var>
is returned.
</descr>
<errors>
None.
</errors>
<seealso>
<link id="LastDelimiter"/>
</seealso>
</element>

<!-- enumeration type Visibility: default -->
<element name="TMbcsByteType">
<short>Type of multi-byte character set.</short>
<descr>
</descr>
<errors>
</errors>
<seealso>
</seealso>
</element>

<!-- enumeration value Visibility: default -->
<element name="TMbcsByteType.mbSingleByte">
<short>Single bytes</short>
</element>

<!-- enumeration value Visibility: default -->
<element name="TMbcsByteType.mbLeadByte">
<short>Uses lead-byte</short>
</element>

<!-- enumeration value Visibility: default -->
<element name="TMbcsByteType.mbTrailByte">
<short>Uses trailing byte</short>
</element>

<!-- function Visibility: default -->
<element name="ByteType">
<short>Return the type of byte in an ansistring for a multi-byte character set</short>
<descr>
<var>ByteType</var> returns the type of byte in the ansistring <var>S</var>
at (1-based) position <var>Index</var>. 
</descr>
<errors>
No checking on the index is performed.
</errors>
<seealso>
<link id="TMbcsByteType"/>
<link id="StrByteType"/>
</seealso>

</element>

<!-- function Visibility: default -->
<element name="StrByteType">
<short>Return the type of byte in a null-terminated string for a multi-byte character set</short>
<descr>
<var>StrByteType</var> returns the type of byte in the null-terminated
string <var>Str</var> at (0-based) position <var>Index</var>. 
</descr>
<errors>
No checking on the index is performed.
</errors>
<seealso>
<link id="TMbcsByteType"/>
<link id="ByteType"/>
</seealso>
</element>

<!-- function Visibility: default -->
<element name="ByteToCharLen">
<short>Convert a length in bytes to a length in characters.</short>
<descr>
<var>ByteToCharLen</var> returns the number of bytes in <var>S</var>, but
limits the result to <var>MaxLen</var>
</descr>
<errors>
This function does not take into account MBCS yet.
</errors>
<seealso>
<link id="CharToByteLen"/>
<link id="ByteToCharIndex"/>
</seealso>
</element>

<!-- function Visibility: default -->
<element name="CharToByteLen">
<short>Convert a length in characters to a length in bytes.</short>
<descr>
<var>CharToByteLen</var> returns the number of bytes in <var>S</var>, but
limits the result to <var>MaxLen</var>
</descr>
<errors>
This function does not take into account MBCS yet.
</errors>
<seealso>
<link id="ByteToCharLen"/>
<link id="ByteToCharIndex"/>
</seealso>
</element>

<!-- function Visibility: default -->
<element name="ByteToCharIndex">
<short>Convert a character index in Bytes to an Index in characters</short>
<descr>
<var>ByteToCharIndex</var> returns the index (in characters) of the
<var>Index</var>-th byte in <var>S</var>.
</descr>
<errors>
This function does not take into account MBCS yet.
</errors>
<seealso>
<link id="CharToByteLen"/>
<link id="ByteToCharLen"/>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="SwitchChars">
<short>Characters which start a command-line switch</short>
<descr>
The characters in this set will be used by the <link id="FindCmdLineSwitch"/> 
function to determine whether a command-line
argument is a switch (an option) or a value. If the first character of an
argument is in <var>SwitchChars</var>, it will be considered an option or
switch.
</descr>
<errors>
</errors>
<seealso>
<link id="FindCmdLineSwitch"/>
</seealso>
</element>

<!-- set type Visibility: default -->
<element name="TSysCharSet">
<short>Set of characters.</short>
<descr>
Generic set of characters type.
</descr>
<errors>
</errors>
<seealso>
</seealso>
</element>

<!-- function Visibility: default -->
<element name="FindCmdLineSwitch">
<short>Check whether a certain switch is present on the command-line.</short>
<descr>
<var>FindCmdLineSwitch</var> will check all command-line arguments for the
presence of the option <var>Switch</var>. It will return <var>True</var> if
it was found, <var>False</var> otherwise. Characters that appear in
<var>Chars</var> (default is <link id="SwitchChars"/>) are assumed to
indicate an option (switch). If the parameter <var>IgnoreCase</var> is
<var>True</var>, case will be ignored when looking for the switch. Default
is to search case sensitive.
</descr>
<errors>
None.
</errors>
<seealso>
<link id="SwitchChars"/>
</seealso>
</element>

<!-- alias type Visibility: default -->
<element name="THandle">
<short>File Handle type.</short>
<descr>
<var>THandle</var> refers to the definition of <var>THandle</var> in the
system unit, and is provided for backward compatibility only.
</descr>
</element>

<!-- procedure type Visibility: default -->
<element name="TProcedure">
<short>Procedural type</short>
<descr>
<var>TProcedure</var> is a general definition of a procedural callback.
</descr>
</element>

<!-- alias type Visibility: default -->
<element name="TFileName">
<short>Filename type</short>
<descr>
<var>TFileName</var> is used in the <link id="TSearchRec"/> definition.
</descr>
<seealso>
<link id="TSearchRec"/>
</seealso>
</element>

<!-- set type Visibility: default -->
<element name="TIntegerSet">
<short>Set with size of integer.</short>
<descr>
<var>TIntegerSet</var> is a generic integer subrange set definition whose
size fits in a single integer.
</descr>
</element>

<!-- record type Visibility: default -->
<element name="LongRec">
<short>Record describing a longint value</short>
<descr>
<var>LongRec</var> can be used to extract the parts of an long Integer: the
high and low word, or the 4 separate bytes as a zero-based array of bytes.
Note that the meaning of High and Low parts are different on various CPUs.
</descr>
<seealso>
<link id="WordRec"/>
<link id="Int64Rec"/>
</seealso>
</element>

<!-- record type Visibility: default -->
<element name="WordRec">
<short>Record describing a word value.</short>
<descr>
<var>LongRec</var> can be used to extract the parts of a word: the
high and low byte. Note that the meaning of the High and Low parts
are different on various CPUs.
</descr>
<seealso>
<link id="LongRec"/>
<link id="Int64Rec"/>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="WordRec.Lo">
<short>Low byte of the word.</short>
</element>

<!-- variable Visibility: default -->
<element name="WordRec.Hi">
<short>High byte of the word</short>
</element>

<!-- record type Visibility: default -->
<element name="Int64Rec">
<short>Record describing an Int64 value</short>
<descr>
<var>Int64Rec</var> can be used to extract the parts of a Int64: the
high and low cardinal, or a zero-based array of 4 words, or a zero based
array of 8 bytes. Note that the meaning of the High and Low parts
are different on various CPUs.
</descr>
<seealso>
<link id="LongRec"/>
<link id="WordRec"/>
</seealso>
</element>

<!-- pointer type Visibility: default -->
<element name="PByteArray">
<short>Pointer to an array of byte.</short>
<descr>
Generic pointer to <link id="TByteArray"/>. Use to access memory regions as
a byte array.
</descr>
<seealso>
<link id="TByteArray"/>
<link id="PWordArray"/>
<link id="TWordArray"/>
</seealso>
</element>

<!-- array type Visibility: default -->
<element name="TByteArray">
<short>Array of bytes</short>
<descr>
<var>TByteArray</var> is a generic array definition, mostly for use as a
base type of the <link id="PByteArray"/> type.
</descr>
<seealso>
<link id="PByteArray"/>
<link id="PWordArray"/>
<link id="TWordArray"/>
</seealso>
</element>

<!-- pointer type Visibility: default -->
<element name="PWordArray">
<short>Pointer to an array of word.</short>
<descr>
Generic pointer to <link id="TWordArray"/>. Use to access memory regions as
a word array.
</descr>
<seealso>
<link id="TWordArray"/>
<link id="PByteArray"/>
<link id="TByteArray"/>
</seealso>
</element>

<!-- array type Visibility: default -->
<element name="TWordArray">
<short>Array of word (Unsigned 16 bit integer)</short>
<descr>
<var>TWordArray</var> is a generic array definition, mostly for use as a
base type of the <link id="PWordArray"/> type.
</descr>
<errors>
</errors>
<seealso>
<link id="PWordArray"/>
<link id="PByteArray"/>
<link id="TByteArray"/>
</seealso>
</element>


<!-- object Visibility: default -->
<element name="Exception">
<short>Base class of all exceptions.</short>
<descr>
<var>Exception</var> is the base class for all exception handling routines
in the RTL and FCL. While it is possible to raise an exception with any
class descending from <var>TObject</var>, it is recommended to use
<var>Exception</var> as the basis of exception class objects:
the <var>Exception</var> class introduces properties to associate a message
and a help context with the exception being raised. What is more, the
<file>SysUtils</file> unit sets the necessary hooks to catch and display
unhandled exceptions: in such cases, the message displayed to the end user, 
will be the message stored in the exception class.
</descr>
<seealso>
<link id="ExceptObject"/>
<link id="ExceptAddr"/>
<link id="ExceptionErrorMessage"/>
<link id="ShowException"/>
<link id="Abort"/>
</seealso>
</element>

<!-- constructor Visibility: public -->
<element name="Exception.Create">
<short>Constructs a new exception object with a given message.</short>
<var>Create</var> allocates a new exception object on the heap, and stores
<var>Msg</var> in the <link id="Exception.Message">Message</link> property.
<errors>
Construction may fail if there is not enough memory on the heap.
</errors>
<seealso>
<link id="Exception.CreateFmt"/>
<link id="Exception.Message"/>
</seealso>
</element>

<!-- constructor Visibility: public -->
<element name="Exception.CreateFmt">
<short>Constructs a new exception object and formats a new message.</short>
<p>
<var>CreateFmt</var> allocates a new exception object on the heap, and
fills the  <link id="Exception.Message">Message</link> property with the result of a call to <link
id="Format"/> with <var>Msg</var> and <var>Args</var> as arguments.
</p>
<p>Using <var>CreateFmt</var> is equivalent to using the following code:</p>
<code>
  Exception.Create(Format(Msg,Args));
</code>
<errors>
Construction may fail if there is not enough memory on the heap.
</errors>
<seealso>
<link id="Exception.Create"/>
<link id="Exception.Message"/>
<link id="Format"/>
</seealso>
</element>

<!-- constructor Visibility: public -->
<element name="Exception.CreateRes">
<short>Constructs a new exception object and gets the message from a resource.</short>
<p>
<var>CreateRes</var> allocates a new exception object on the heap, and stores
fetches the resource string <var>ResString</var> from the resources and
stores it in the <link id="Exception.Message">Message</link> property.
</p>
<remark>
Resources are not yet implemented in Free Pascal.
</remark>
<errors>
Construction may fail if there is not enough memory on the heap.
</errors>
<seealso>
<link id="Exception.Create"/>
<link id="Exception.CreateFmt"/>
<link id="Exception.CreateResFmt"/>
<link id="Exception.Message"/>
</seealso>
</element>

<!-- constructor Visibility: public -->
<element name="Exception.CreateResFmt">
<short>Constructs a new exception object and formats the message from a
reasource.</short>
<descr>
<var>CreateResFmt</var> does the same as <link
id="Exception.CreateFmt">CreateFmt</link>, but fetches
the message from the resource string <var>ResString</var>.
</descr>
<errors>
Construction may fail if there is not enough memory on the heap.
</errors>
<seealso>
<link id="Exception.Create"/>
<link id="Exception.CreateFmt"/>
<link id="Exception.CreateRes"/>
<link id="Exception.Message"/>
</seealso>
</element>

<!-- constructor Visibility: public -->
<element name="Exception.CreateHelp">
<short>Constructs a new exception object and sets the help context.</short>
<descr>
<var>CreateHelp</var> does the same as the <link
id="Exception.Create">Create</link> constructor,
but additionally stores <var>AHelpContext</var> in the <link
id="Exception.HelpContext">HelpContext</link> property.
</descr>
<seealso>
<link id="Exception.Create"/>
</seealso>
</element>

<!-- constructor Visibility: public -->
<element name="Exception.CreateFmtHelp">
<short>Constructs a new exception object and sets the help context and
formats the message</short>
<descr>
<var>CreateFmtHelp</var> does the same as the <link
id="Exception.CreateFmt">CreateFmt</link> constructor,
but additionally stores <var>AHelpContext</var> in the <link
id="Exception.HelpContext">HelpContext</link> property.
</descr>
<seealso>
<link id="Exception.CreateFmt"/>
</seealso>
</element>

<!-- constructor Visibility: public -->
<element name="Exception.CreateResHelp">
<short>Constructs a new exception object and sets the help context and
gets the message from a resource</short>
<descr>
<var>CreateResHelp</var> does the same as the <link
id="Exception.CreateRes">CreateRes</link> constructor,
but additionally stores <var>AHelpContext</var> in the <link
id="Exception.HelpContext">HelpContext</link> property.
</descr>
<seealso>
<link id="Exception.CreateRes"/>
</seealso>
</element>

<!-- constructor Visibility: public -->
<element name="Exception.CreateResFmtHelp">
<short>Constructs a new exception object and sets the help context and
formats the message from a resource</short>
<descr>
<var>CreateResFmtHelp</var> does the same as the <link
id="Exception.CreateResFmt">CreateResFmt</link> constructor,
but additionally stores <var>AHelpContext</var> in the <link
id="Exception.HelpContext">HelpContext</link> property.
</descr>
<seealso>
<link id="Exception.CreateResFmt"/>
</seealso>
</element>

<!-- property Visibility: public -->
<element name="Exception.helpcontext">
<short>Help context associated with the exception.</short>
<descr>
<var>HelpContext</var> is the help context associated with the exception,
and can be used to provide context-sensitive help when the exception error
message is displayed. It should be set in the exception constructor.
</descr>
<seealso>
<link id="Exception.CreateHelp"/>
<link id="Exception.Message"/>
</seealso>
</element>

<!-- property Visibility: public -->
<element name="Exception.message">
<short>Message associated with the exception.</short>
<descr>
<var>Message</var> provides additional information about the exception. It
is shown to the user in e.g. the <link id="ShowException"/> routine, and
should be set in the constructor when the exception is raised.
</descr>
<seealso>
<link id="Exception.Create"/>
<link id="Exception.HelpContext"/>
</seealso>
</element>

<!-- "class of" type Visibility: default -->
<element name="ExceptClass">
<short>Exception Class reference</short>
<descr>
<var>ExceptClass</var> is a <link id="Exception"/> class reference.
</descr>
<seealso>
<link id="Exception"/>
</seealso>
</element>

<!-- object Visibility: default -->
<element name="EExternal">
<short>External Exception.</short>
<descr>
<var>EExternal</var> is the base exception for all external exceptions, as
reported by the CPU or operating system, as opposed to internal exceptions,
which are raised by the program itself. The <file>SysUtils</file> unit
converts all operating system errors to descendents of <var>EExternal</var>.
</descr>
<seealso>
<link id="EInterror"/>
<link id="EExternal"/>
<link id="EMathError"/>
<link id="EExternalException"/>
<link id="EAccessViolation"/>
<link id="EPrivilege"/>
<link id="EStackOverflow"/>
<link id="EControlC"/>
</seealso>
</element>

<!-- object Visibility: default -->
<element name="EIntError">
<short>Integer operation error.</short>
<descr>
<var>EInterror</var> is used when the operating system or CPU signals an
integer operation error, e.g., an overflow.
</descr>
</element>

<!-- object Visibility: default -->
<element name="EDivByZero">
<short>Division by zero error.</short>
<descr>
<var>EDivByZero</var> is used when the operating system or CPU signals a
division by zero error.
</descr>
<link id="EIntError"/>
<link id="ERangeError"/>
<link id="EIntOverflow"/>
</element>

<!-- object Visibility: default -->
<element name="ERangeError">
<short>Range check error.</short>
<descr>
<var>ERangeError</var> is raised by the Free Pascal runtime library if
range checking is on, and a range check error occurs.
</descr>
<seealso>
<link id="EIntError"/>
<link id="EDivByZero"/>
<link id="EIntOverflow"/>
</seealso>
</element>

<!-- object Visibility: default -->
<element name="EIntOverflow">
<short>Integer overflow error.</short>
<descr>
<var>EIntOverflow</var> is used when the operating system or CPU signals a
integer overflow error.
</descr>
<seealso>
<link id="EIntError"/>
<link id="EDivByZero"/>
<link id="ERangeError"/>
</seealso>
</element>

<!-- object Visibility: default -->
<element name="EMathError">
<short>Mathematical error</short>
<descr>
<var>EMathError</var> is used when the operating system or CPU signals a
floating point overflow error.
</descr>
<seealso>
<link id="EIntError"/>
<link id="EIntOverflow"/>
<link id="EDivByZero"/>
<link id="ERangeError"/>
</seealso>
</element>

<!-- object Visibility: default -->
<element name="EInvalidOp">
<short>Invalid operation.</short>
<descr>
<var>EInvalidOp</var> is raised when an invalid operation is encountered.
</descr>
</element>

<!-- object Visibility: default -->
<element name="EZeroDivide">
<short>Division by zero error.</short>
<descr>
<var>EZeroDivide</var> occurs when a float division by zero occurs.
</descr>
<seealso>
<link id="EIntError"/>
<link id="EIntOverflow"/>
<link id="EDivByZero"/>
<link id="ERangeError"/>
</seealso>
</element>

<!-- object Visibility: default -->
<element name="EOverflow">
<short>Float overflow error.</short>
<descr>
<var>EOverflow</var> occurs when a float operation overflows. (i.e. result
is too big to represent).
</descr>
<seealso>
<link id="EIntError"/>
<link id="EIntOverflow"/>
<link id="EDivByZero"/>
<link id="ERangeError"/>
<link id="EUnderFlow"/>
</seealso>
</element>

<!-- object Visibility: default -->
<element name="EUnderflow">
<short>Float underflow error</short>
<descr>
<var>EOverflow</var> occurs when a float operation underflows (i.e. result
is too small to represent).
</descr>
<seealso>
<link id="EIntError"/>
<link id="EIntOverflow"/>
<link id="EDivByZero"/>
<link id="ERangeError"/>
<link id="EOverFlow"/>
</seealso>
</element>

<!-- object Visibility: default -->
<element name="EInOutError">
<short>Input/Output error</short>
<descr>
<var>EInOutError</var> is raised when a IO routine of Free Pascal returns an
error. The error is converted to an <var>EInOutError</var> only if the
input/output checking feature of FPC is turned on. The error code of the
input/output operation is returned in <link
id="EInOutError.ErrorCode">ErrorCode</link>.
</descr>
<seealso>
<link id="EInOutError.ErrorCode"/>
</seealso>
</element>

<!-- variable Visibility: public -->
<element name="EInOutError.ErrorCode">
<short>Error code for Input/Output operation.</short>
<descr>
<var>ErrorCode</var> contains the error code from the I/O operation which
raised the <link id="EInoutError"/> exception. An explanation of the error
codes can be found in the user's manual.
</descr>
</element>

<!-- object Visibility: default -->
<element name="EHeapMemoryError">
<short>Heap memory error</short>
<descr>
<var>EHeapMemoryError</var> is raised when an error occurs in heap
(dynamically allocated) memory.
</descr>
<seealso>
<link id="EHeapException"/>
<link id="EoutOfMemory"/>
<link id="EInvalidPointer"/>
</seealso>
</element>

<!-- alias type Visibility: default -->
<element name="EHeapException">
<short>Heap exception</short>
<descr>
<var>EHeapMemoryError</var> is raised when an error occurs in the heap
management routines.
</descr>
<seealso>
<link id="EHeapMemoryError"/>
<link id="EoutOfMemory"/>
<link id="EInvalidPointer"/>
</seealso>
</element>

<!-- object Visibility: default -->
<element name="EExternalException">
<short>External exception</short>
<descr>
<var>EExternalException</var> is raised when an external routine raises an
exception.
</descr>
<seealso>
<link id="EExternal"/>
</seealso>
</element>

<!-- object Visibility: default -->
<element name="EInvalidPointer">
<short>Invalid pointer operation</short>
<descr>
<var>EInvalidPointer</var> is raised when an invalid heap pointer is used.
</descr>
<seealso>
<link id="EHeapException"/>
<link id="EHeapMemoryError"/>
<link id="EOutOfMemory"/>
</seealso>
</element>

<!-- object Visibility: default -->
<element name="EOutOfMemory">
<short>Out of memory error.</short>
<descr>
<var>EOutOfMemory</var> occurs when memory can no longer be allocated on the
heap. An instance of <var>EOutOfMemory</var> is allocated on the heap at
program startup, so it is available when needed.
</descr>
<seealso>
<link id="EHeapException"/>
<link id="EHeapMemoryError"/>
<link id="EInvalidPointer"/>
</seealso>
</element>

<!-- object Visibility: default -->
<element name="EInvalidCast">
<short>Invalid typecast error.</short>
<descr>
<var>EInvalidCast</var> is raised when an invalid typecast error (using the
<var>as</var> operator) is encountered.
</descr>
<seealso>
<link id="EIntfCastError"/>
</seealso>
</element>

<!-- object Visibility: default -->
<element name="EVariantError">
<short>Variant error.</short>
<descr>
<var>EVariantError</var> is raised by the internal variant routines.
</descr>
</element>

<element name="EVariantError.ErrCode">
<short>Variant error code.</short>
<descr>
<var>ErrCode</var> is the error code describing the actual error.
</descr>
</element>

<element name="EVariantError.CreateCode">
<short>Create an instance of <var>EVariantError</var> with a particular error code.</short>
<descr>
<var>CreateCode</var> calls the inherited constructor, and sets the <link
id="EVariantError.ErrCode">ErrCode</link> property to <var>Code</var>.
</descr>
<seealso>
<link id="EVariantError.ErrCode">ErrCode</link>
</seealso>
</element>

<!-- object Visibility: default -->
<element name="EAccessViolation">
<short>Access Violation error</short>
<descr>
<var>EAccessViolation</var> is raised when the OS reports an Access
Violation, i.e. when invalid memory is accessed.
</descr>
<seealso>
<link id="EObjectCheck"/>
</seealso>
</element>

<!-- object Visibility: default -->
<element name="EPrivilege">
<short>Privileged instruction error.</short>
<descr>
<var>EPrivilege</var> is raised when the OS reports that an invalid
instruction was executed.
</descr>
</element>

<!-- object Visibility: default -->
<element name="EStackOverflow">
<short>Stack overflow error.</short>
<descr>
<var>EStackOverflow</var> occurs when the stack has grown too big (e.g. by
infinite recursion).
</descr>
</element>

<!-- object Visibility: default -->
<element name="EControlC">
<short>Control-C (abort) was pressed on the console.</short>
<descr>
<var>EControlC</var> is raised when the user has pressed CTRL-C in a
console application.
</descr>
</element>

<!-- object Visibility: default -->
<element name="EConvertError">
<short>Conversion error.</short>
<descr>
<var>EConvertError</var> is raised by the various conversion routines in the
<file>SysUtils</file> unit. The message will contain more specific error
information.
</descr>
</element>

<!-- object Visibility: default -->
<element name="EAbort">
<short>Abort error.</short>
<descr>
<var>Abort</var> is raised by the <link id="Abort"/> procedure. It is not
displayed in GUI applications, and serves only to immediately abort the current
procedure, and return control to the main program loop. 
</descr>
<seealso>
<link id="Abort"/>
</seealso>
</element>

<!-- object Visibility: default -->
<element name="EAbstractError">
<short>Abstract error.</short>
<descr>
<var>EAbstractError</var> is raised when an abstract error occurs, i.e. when
an unimplemented abstract method is called.
</descr>
</element>

<!-- object Visibility: default -->
<element name="EAssertionFailed">
<short>Assertion failed error.</short>
<descr>
<var>EAssertionFailed</var> is raised when an application that is compiled
with assertions, encounters an invalid assertion. 
</descr>
<errors>
</errors>
<seealso>
</seealso>
</element>

<!-- object Visibility: default -->
<element name="EPropReadOnly">
<short>Read-only property error.</short>
<descr>
<var>EPropReadOnly</var> is raised when an attempt is made to write to a
read-only property.
</descr>
<link id="EPropWriteOnly"/>
</element>

<!-- object Visibility: default -->
<element name="EPropWriteOnly">
<short>Write-only property error.</short>
<descr>
<var>EPropWriteOnly</var> is raised when an attempt is made to read from a
write-only property.
</descr>
<seealso>
<link id="EPropReadOnly"/>
</seealso>
</element>

<!-- object Visibility: default -->
<element name="EIntfCastError">
<short>Invalid interface cast error.</short>
<descr>
<var>EIntfCastError</var> is raised when an invalid interface cast is
encountered.
</descr>
<seealso>
<link id="EInvalidCast"/>
</seealso>
</element>

<!-- object Visibility: default -->
<element name="EInvalidContainer">
<short>Invalid container error.</short>
<descr>
<var>EInvalidContainer</var> is not yet used by Free Pascal, and is provided
for Delphi compatibility only.
</descr>
</element>

<!-- object Visibility: default -->
<element name="EInvalidInsert">
<short>Invalid insert error.</short>
<descr>
<var>EInvalidInsert</var> is not yet used by Free Pascal, and is provided
for Delphi compatibility only.
</descr>
</element>

<!-- object Visibility: default -->
<element name="EPackageError">
<short>Package error.</short>
<descr>
<var>EPackageError</var> is not yet used by Free Pascal, and is provided
for Delphi compatibility only.
</descr>
</element>

<!-- object Visibility: default -->
<element name="EOSError">
<short>Operating system error.</short>
<descr>
<var>EOSError</var> is raised when some Operating System call fails. The
<link id="EOSError.ErrorCode">ErrorCode</link> property contains the
operating system error code.
</descr>
<seealso>
<link id="EOSError.ErrorCode"/>
</seealso>
</element>

<!-- variable Visibility: public -->
<element name="EOSError.ErrorCode">
<short>Operating system error code.</short>
<descr>
<var>ErrorCode</var> contains the error code reported by the operating
system for the call which caused the <link id="EOSError"/> to be raised.
</descr>
<seealso>
<link id="EOSError"/>
</seealso>
</element>

<!-- object Visibility: default -->
<element name="ESafecallException">
<short>SafeCall exception.</short>
<descr>
<var>ESafecallException</var> is not yet used by Free Pascal, and is provided
for Delphi compatibility only.
</descr>
</element>

<!-- object Visibility: default -->
<element name="ENoThreadSupport">
<short>No Thread support error.</short>
<descr>
<var>ENoThreadSupport</var> is raised when some thread routines are invoked,
and thread support was not enabled when the program was compiled. 
</descr>
</element>

<!-- function Visibility: default -->
<element name="ExceptObject">
<short>Current Exception object.</short>
<descr>
<var>ExceptObject</var> returns the currently treated exception object when
an exception is raised, and the stack is unwound.
</descr>
<errors>
If there is no exception, the function returns <var>Nil</var>
</errors>
<seealso>
<link id="ExceptAddr"/>
<link id="ExceptionErrorMessage"/>
<link id="ShowException"/>
</seealso>
</element>

<!-- function Visibility: default -->
<element name="ExceptAddr">
<short>Current exception address.</short>
<descr>
<var>ExceptAddr</var> returns the address from the currently treated
exception object when an exception is raised, and the stack is unwound.
</descr>
<seealso>
<link id="ExceptObject"/>
<link id="ExceptionErrorMessage"/>
<link id="ShowException"/>
</seealso>
</element>

<!-- function Visibility: default -->
<element name="ExceptionErrorMessage">
<short>Return a message describing the exception.</short>
<descr>
<p>
<var>ExceptionErrorMessage</var> creates a string that describes the
exception object <var>ExceptObject</var> at address <var>ExceptAddr</var>.
It can be used to display exception messages. The string will be stored in
the memory pointed to by <var>Buffer</var>, and will at most have
<var>Size</var> characters.
</p>
<p>
The routine checks whether <var>ExceptObject</var> is a <link
id="Exception"/> object or not, and adapts the output accordingly.
</p>
</descr>
<seealso>
<link id="ExceptObject"/>
<link id="ExceptAddr"/>
<link id="ShowException"/>
</seealso>
</element>

<!-- procedure Visibility: default -->
<element name="ShowException">
<short>Show the current exception to the user.</short>
<descr>
<p>
<var>ShowException</var> shows a message stating that a <var>ExceptObject</var>
was raised at address <var>ExceptAddr</var>. It uses <link
id="ExceptionErrorMessage"/> to create the message, and is aware of the fact
whether the application is a console application or a GUI application. For a
console application, the message is written to standard error output. For a
GUI application, <link id="OnShowException"/> is executed.
</p>
</descr>
<errors>
<p>
If, for a GUI application, <link id="OnShowException"/> is not set, no
message will be displayed to the user.
</p>
<p>
The exception message can be at most 255 characters long: It is possible
that no memory can be allocated on the heap, so ansistrings are not
available, so a shortstring is used to display the message.
</p>
</errors>
<seealso>
<link id="ExceptObject"/>
<link id="ExceptAddr"/>
<link id="ExceptionErrorMessage"/>
</seealso>
</element>

<!-- procedure Visibility: default -->
<element name="Abort">
<short>Abort program execution.</short>
<descr>
<var>Abort</var> raises an <link id="EAbort"/> exception.
</descr>
<seealso>
<link id="EAbort"/>
</seealso>
</element>

<!-- procedure Visibility: default -->
<element name="OutOfMemoryError">
<short>Raise an <var>EOutOfMemory</var> exception</short>
<descr>
<var>OutOfMemoryError</var> raises an <link id="EOutOfMemory"/> exception,
with an exception object that has been allocated on the heap at program
startup. The program should neved create an <link id="EOutOfMemory"/>
exception, but always call this routine.
</descr>
<seealso>
<link id="EOutOfMemory"/>
</seealso>
</element>

<!-- procedure Visibility: default -->
<element name="Beep">
<short>Sound the system bell.</short>
<descr>
<var>Beep</var> sounds the system bell, if one is available. The actual beep
is produced by the <link id="OnBeep"/> callback. The <var>Sysutils</var>
unit itself contains no implementation of this call.
</descr>
</element>

<!-- function Visibility: default -->
<element name="SysErrorMessage">
<short>Format a system error message.</short>
<descr>
<var>SysErrorMessage</var> returns a string that describes the operating
system error code <var>ErrorCode</var>.
</descr>
<errors>
This routine may not be implemented on all platforms.
</errors>
<seealso>
<link id="EOSError"/>
</seealso>
</element>

<!-- function type Visibility: default -->
<element name="TTerminateProc">
<short>Terminate procedure procedural variable.</short>
<descr>
<var>TTerminateProc</var> is the procedural type which should be used when
adding exit procedures. 
</descr>
<seealso>
<link id="AddTerminateProc"/>
</seealso>
</element>

<!-- procedure Visibility: default -->
<element name="AddTerminateProc">
<short>Add a procedure to the exit chain.</short>
<descr>
<var>AddTerminateProc</var> adds <var>TermProc</var> to the list of exit
procedures. When the program exits, the list of exit procedures is run over,
and all procedures are called one by one, in the reverse order that they
were added to the exit chain.
</descr>
<errors>
If no memory is available on the heap, an exception may be raised.
</errors>
<seealso>
<link id="TTerminateProc"/>
<link id="CallTerminateProcs"/>
</seealso>
</element>

<!-- function Visibility: default -->
<element name="CallTerminateProcs">
<short>Call the exit chain procedures.</short>
<descr>
<var>CallTerminateProcs</var> is run on program exit. It executes all
terminate procedures that were added to the exit chain with <link
id="AddTerminateProc"/>, and does this in reverse order. 
</descr>
<errors>
If one of the exit procedure raises an exception, it is <em>not</em> caught, 
and the remaining exit procedures will not be executed.
</errors>
<seealso>
<link id="TTerminateProc"/>
<link id="AddTerminateProc"/>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="OnShowException">
<short>Callback to show unhandled exceptions.</short>
<descr>
<var>OnShowException</var> is the callback that <link id="ShowException"/>
uses to display a message in a GUI application. For GUI applications, this
variable should always be set. Note that no memory may be available when
this callback is called, so the callback should already have all resources 
it needs, when the callback is set.
</descr>
<seealso>
<link id="ShowException"/>
<link id="ExceptionErrorMessage"/>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="filerecnamelength">
<short>Length of filerec filename field.</short>
<descr>
<var>filerecnamelength</var> describes the length of the <link
id="FileRec"/> filename field.
</descr>
</element>

<!-- record type Visibility: default -->
<element name="FileRec">
<short>Record describing an untyped file.</short>
<descr>
<p>
<var>FileRec</var> describes a untyped file. This record is made available
so it can be used to implement drivers for other than the normal file system
file records.
</p>
</descr>
<seealso>
<link id="TFileRec"/>
<link id="TextRec"/>
<link id="TTextRec"/>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="FileRec.Handle">
<short>Operating system file handle.</short>
</element>

<!-- variable Visibility: default -->
<element name="FileRec.Mode">
<short>Current file mode.</short>
</element>

<!-- variable Visibility: default -->
<element name="FileRec.RecSize">
<short>Record data size</short>
</element>

<!-- variable Visibility: default -->
<element name="FileRec._private">
<short>Private data. Do not use</short>
</element>

<!-- variable Visibility: default -->
<element name="FileRec.UserData">
<short>User data. Only use when implementing new type.</short>
</element>

<!-- variable Visibility: default -->
<element name="FileRec.name">
<short>File name</short>
</element>

<!-- constant Visibility: default -->
<element name="TextRecNameLength">
<short>Length of text file record filename field</short>
</element>

<!-- constant Visibility: default -->
<element name="TextRecBufSize">
<short>Buffer size of text file record.</short>
<var>TextRecBufSize</var> is the size of the default buffer in <link
id="TextRec"/>
</element>

<!-- array type Visibility: default -->
<element name="TextBuf">
<short>Text record buffer array type</short>
<descr>
<var>TextBuf</var> is the type for the default buffer in <link
id="TextRec"/>
</descr>
</element>

<!-- record type Visibility: default -->
<element name="TextRec">
<short>Record describing a text file type</short>
<descr>
<p>
<var>TextRec</var> describes a text file. This record is made available
so it can be used to implement drivers for other than the normal file system
file records.
</p>
<p>
To implement a driver, an <var>Assign</var> procedure must be implemented,
which fills in the various fields of the record. Most notably, the callback
functions must be filled in appropriately. 
After this, the normal file operations will handle all necessary calls to the
various callbacks.
</p>
</descr>
<seealso>
<link id="TTextRec"/>
<link id="TFileRec"/>
<link id="FileRec"/>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TextRec.Handle">
<short>Operating system handle for file.</short>
</element>

<!-- variable Visibility: default -->
<element name="TextRec.Mode">
<short>Open mode</short>
</element>

<!-- variable Visibility: default -->
<element name="TextRec.bufsize">
<short>Size of buffer.</short>
</element>

<!-- variable Visibility: default -->
<element name="TextRec._private">
<short>Private data. Do not use.</short>
</element>

<!-- variable Visibility: default -->
<element name="TextRec.bufpos">
<short>Current buffer position.</short>
</element>

<!-- variable Visibility: default -->
<element name="TextRec.bufend">
<short>Current buffer end.</short>
</element>

<!-- variable Visibility: default -->
<element name="TextRec.bufptr">
<short>Pointer to current buffer.</short>
</element>

<!-- variable Visibility: default -->
<element name="TextRec.openfunc">
<short>File open function. Allocates handle.</short>
</element>

<!-- variable Visibility: default -->
<element name="TextRec.inoutfunc">
<short>Read/write function</short>
</element>

<!-- variable Visibility: default -->
<element name="TextRec.flushfunc">
<short>Flush buffer function</short>
</element>

<!-- variable Visibility: default -->
<element name="TextRec.closefunc">
<short>Close handle function.</short>
</element>

<!-- variable Visibility: default -->
<element name="TextRec.UserData">
<short>User data for text rec.</short>
</element>

<!-- variable Visibility: default -->
<element name="TextRec.name">
<short>File name</short>
</element>

<!-- variable Visibility: default -->
<element name="TextRec.buffer">
<short>Default buffer.</short>
</element>

<!-- constant Visibility: default -->
<element name="HexDisplayPrefix">
<short>String to prepend to hexadecimal values</short>
<descr>
<var>HexDisplayPrefix</var> is used by the formatting routines to indicate
that the number which follows the prefix is in Hexadecimal notation.
</descr>
<errors>
Currently unused in Free Pascal.
</errors>
</element>

<!-- constant Visibility: default -->
<element name="PathDelim">
<short>Path (directory) delimiter.</short>
<descr>
<var>PathDelim</var> refers to the system unit's <var>DirectorySeparator</var>
constant, it is for Delphi compatibility only.
</descr>
<seealso>
<link id="DriveDelim"/>
<link id="PathSep"/>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="DriveDelim">
<short>Drive letter delimiter</short>
<descr>
<var>DriveDelim</var> refers to the system unit's <var>DriveSeparator</var>
constant, it is for Delphi compatibility only.
</descr>
<seealso>
<link id="PathDelim"/>
<link id="PathSep"/>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="PathSep">
<short>Path separator. (Separates paths in search path lists)</short>
<descr>
<var>PathSep</var> refers to the system unit's <var>PathSeparator</var>
constant, it is for Delphi compatibility only.
</descr>
<seealso>
<link id="PathDelim"/>
<link id="DriveDelim"/>
</seealso>
</element>

<!-- alias type Visibility: default -->
<element name="TFileRec">
<short>Record describing an untyped file.</short>
<descr>
Alias for <link id="FileRec"/> for Delphi compatibility.
</descr>
</element>

<!-- alias type Visibility: default -->
<element name="TTextRec">
<short>Record describing a text file.</short>
<descr>
Alias for <link id="TextRec"/> for Delphi compatibility.
</descr>
</element>

<!-- array type Visibility: default -->
<element name="TCaseTranslationTable">
<short>Type for case conversion tables.</short>
<descr>
<var>TCaseTranslationTable</var> is the type for a lookup table that can
convert 255 ascii characters.
</descr>
<seealso>
<link id="UpperCaseTable"/>
<link id="LowerCaseTable"/>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="UpperCaseTable">
<short>Table for conversion of characters to uppercase.</short>
<descr>
<var>UpperCaseTable</var> is used by the <link id="UpperCase"/> routine (and
friends) to convert a string to all-uppercase characters. It is filled with
the appropriate entries by the <file>SysUtils</file> unit initialization routines.
</descr>
<seealso>
<link id="TCaseTranslationTable"/>
<link id="LowerCaseTable"/>
<link id="UpperCase"/>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="LowerCaseTable">
<short>Table for conversion of characters to lowercase.</short>
<descr>
<var>LowerCaseTable</var> is used by the <link id="LowerCase"/> routine (and
friends) to convert a string to all-lowercase characters. It is filled with
the appropriate entries by the <file>SysUtils</file> unit initialization
routines.
</descr>
<seealso>
<link id="TCaseTranslationTable"/>
<link id="UpperCaseTable"/>
<link id="LowerCase"/>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="DateSeparator">
<short>Date separator character (subject to locale).</short>
<descr>
<p>
<var>DateSeparator</var> is the character used by various date/time
conversion routines as the character that separates the day from the month
and the month from the year in a date notation. It is used by the date
formatting routines. The initialization routines of
the <file>SysUtils</file> unit initialize this string with a value conforming to
the regional preferences of the user or system regional default.
</p>
<p>
This constant is deprecated. You should use <link
id="DefaultFormatSettings">DefaultFormatSettings.DateSeparator</link> instead.
</p>
</descr>
<seealso>
<link id="LongDateFormat"/>
<link id="FormatDateTime"/>
<link id="DateSeparator"/>
<link id="DefaultFormatSettings"/>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="ShortDateFormat">
<short>Short Date Format string (subject to locale).</short>
<descr>
<p>
<var>ShortDateFormat</var> contains a template to format a date in a short
format. It is used by the date formatting routines. The initialization routines of
the <file>SysUtils</file> unit initialize this string with a value conforming to
the regional preferences of the user or system regional default.
</p>
<p>
This constant is deprecated. You should use <link
id="DefaultFormatSettings">DefaultFormatSettings.ShortDateFormat</link> instead.
</p>

</descr>
<seealso>
<link id="LongDateFormat"/>
<link id="FormatDateTime"/>
<link id="DateSeparator"/>
<link id="DefaultFormatSettings"/>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="LongDateFormat">
<short>Long date format string (subject to locale).</short>
<descr>
<p>
<var>LongDateFormat</var> contains a template to format a date in a long
format. It is used by the date formatting routines. The initialization routines of
the <file>SysUtils</file> unit initialize this string with a value conforming to
the regional preferences of the user or system regional default.
</p>
<p>
This constant is deprecated. You should use <link
id="DefaultFormatSettings">DefaultFormatSettings.LongDateFormat</link> instead.
</p>
</descr>
<seealso>
<link id="ShortDateFormat"/>
<link id="FormatDateTime"/>
<link id="DateSeparator"/>
<link id="DefaultFormatSettings"/>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="ShortMonthNames">
<short>Names of months, abbreviated form.</short>
<descr>
<p>
<var>ShortMonthNames</var> is an array with the abbreviated names of months.
It is used by the date formatting routines. The initialization routines of
the <file>SysUtils</file> unit initialize this string with a value conforming to
the regional preferences of the user or system regional default.
</p>
<p>
This constant is deprecated. You should use <link
id="DefaultFormatSettings">DefaultFormatSettings.ShortMonthNames</link> instead.
</p>
</descr>
<seealso>
<link id="ShortDateFormat"/>
<link id="FormatDateTime"/>
<link id="LongMonthNames"/>
<link id="ShortDayNames"/>
<link id="DefaultFormatSettings"/>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="LongMonthNames">
<short>Full names of months.</short>
<descr>
<p>
<var>LongMonthNames</var> is an array with the full names of months.
It is used by the date formatting routines. The initialization routines of
the <file>SysUtils</file> unit initialize this string with a value conforming to
the regional preferences of the user or system regional default.
</p>
<p>
This constant is deprecated. You should use <link id="DefaultFormatSettings">DefaultFormatSettings.LongMonthNames</link> instead.
</p>
</descr>
<seealso>
<link id="ShortDateFormat"/>
<link id="FormatDateTime"/>
<link id="ShortMonthNames"/>
<link id="DefaultFormatSettings"/>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="ShortDayNames">
<short>Names of days, abbreviated form.</short>
<descr>
<p>
<var>ShortDayNames</var> is an array with the abbreviated names of days.
It is used by the date formatting routines. The initialization routines of
the <file>SysUtils</file> unit initialize this string with a value conforming to
the regional preferences of the user or system regional default.
</p>
<p>
The array is indexed by values as returned by the DayOfWeek function.
</p>
<p>
This constant is deprecated. You should use <link
id="DefaultFormatSettings">DefaultFormatSettings.ShortDayNames</link> instead.
</p>

</descr>
<seealso>
<link id="ShortDateFormat"/>
<link id="FormatDateTime"/>
<link id="LongDayNames"/>
<link id="ShortMonthNames"/>
<link id="DayOfWeek"/>
<link id="DefaultFormatSettings"/>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="LongDayNames">
<short>Full names of days.</short>
<descr>
<p>
<var>LongDayNames</var> is an array with the full names of days.
It is used by the date formatting routines. The initialization routines of
the <file>SysUtils</file> unit initialize this string with a value conforming to
the regional preferences of the user or system regional default.
</p>
<p>
The array is indexed by values as returned by the DayOfWeek function.
</p>
<p>
This constant is deprecated. You should use <link
id="DefaultFormatSettings">DefaultFormatSettings.LongDayNames</link> instead.
</p>
</descr>
<seealso>
<link id="ShortDateFormat"/>
<link id="FormatDateTime"/>
<link id="ShortDayNames"/>
<link id="ShortMonthNames"/>
<link id="DayOfWeek"/>
<link id="DefaultFormatSettings"/>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="ShortTimeFormat">
<short>Short time format string (subject to locale).</short>
<descr>
<p>
<var>ShortTimeFormat</var> contains a template to format a time in a short
notation. It is used by the time formatting routines. The initialization routines of
the <file>SysUtils</file> unit initialize this string with a value conforming to
the regional preferences of the user or system regional default.
</p>
<p>
This constant is deprecated. You should use <link
id="DefaultFormatSettings">DefaultFormatSettings.ShortTimeFormat</link> instead.
</p>
</descr>
<seealso>
<link id="LongTimeFormat"/>
<link id="FormatDateTime"/>
<link id="TimeSeparator"/>
<link id="DefaultFormatSettings"/>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="LongTimeFormat">
<short>Long time format string (subject to locale)</short>
<descr>
<p>
<var>LongTimeFormat</var> contains a template to format a time in full
notation. It is used by the time formatting routines. The initialization routines of
the <file>SysUtils</file> unit initialize this string with a value conforming to
the regional preferences of the user or system regional default.
</p>
<p>
This constant is deprecated.
You should use <link
id="DefaultFormatSettings">DefaultFormatSettings.LongTimeFormat</link> instead.
</p>

</descr>
<seealso>
<link id="ShortTimeFormat"/>
<link id="FormatDateTime"/>
<link id="TimeSeparator"/>
<link id="DefaultFormatSettings"/>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="TimeSeparator">
<short>Time separator character.</short>
<descr>
<var>TimeSeparator</var> is used by the time formatting routines to separate
the hours from the minutes and the minutes from the seconds.
It is used by the time formatting routines. The initialization routines of
the <file>SysUtils</file> unit initialize this string with a value conforming to
the regional preferences of the user or system regional default.
</descr>
<seealso>
<link id="ShortTimeFormat"/>
<link id="FormatDateTime"/>
<link id="LongTimeFormat"/>
<link id="TimeAMString"/>
<link id="TimePMString"/>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="TimeAMString">
<short>AM indicator string.</short>
<descr>
<p>
<var>TimeAMString</var> is used to display the AM symbol in the time
formatting routines.
It is used by the time formatting routines. The initialization routines of
the <file>SysUtils</file> unit initialize this string with a value conforming to
the regional preferences of the user or system regional default.
</p>
<p>
This constant is deprecated.
You should use <link
id="DefaultFormatSettings">DefaultFormatSettings.TimeAMString</link> instead.
</p>
</descr>
<errors>
</errors>
<seealso>
<link id="ShortTimeFormat"/>
<link id="FormatDateTime"/>
<link id="LongTimeFormat"/>
<link id="TimePMString"/>
<link id="DefaultFormatSettings"/>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="TimePMString">
<short>PM indicator string.</short>
<descr>
<p>
<var>TimePMString</var> is used to display the PM symbol in the time
formatting routines.
It is used by the time formatting routines. The initialization routines of
the <file>SysUtils</file> unit initialize this string with a value conforming to
the regional preferences of the user or system regional default.
</p>
<p>
This constant is deprecated.
You should use <link
id="DefaultFormatSettings">DefaultFormatSettings.TimePMString</link> instead.
</p>
</descr>
<seealso>
<link id="ShortTimeFormat"/>
<link id="FormatDateTime"/>
<link id="LongTimeFormat"/>
<link id="TimeAMString"/>
<link id="DefaultFormatSettings"/>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="DecimalSeparator">
<short>Decimal point separator.</short>
<descr>
<p>
<var>DecimalSeparator</var> is used to display the decimal symbol in
floating point numbers or currencies.
It is used by the float formatting routines. The initialization routines of
the <file>SysUtils</file> unit initialize this string with a value conforming to
the regional preferences of the user or system regional default.
</p>
<p>
This constant is deprecated.
You should use <link id="DefaultFormatSettings">DefaultFormatSettings.DecimalSeparator</link> instead.
</p>
</descr>
<seealso>
<link id="ThousandSeparator"/>
<link id="Format"/>
<link id="FormatFloat"/>
<link id="FloatToStr"/>
<link id="DefaultFormatSettings"/>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="ThousandSeparator">
<short>Thousand grouping character.</short>
<descr>
<p>
<var>ThousandSeparator</var> is used to separate groups of thousands in 
floating point numbers or currencies. It is used by the float formatting routines.
The initialization routines of
the <file>SysUtils</file> unit initialize this string with a value conforming to
the regional preferences of the user or system regional default.
</p>
<p>
This constant is deprecated.
You should use <link id="DefaultFormatSettings">DefaultFormatSettings.ThousandSeparator</link> instead.
</p>
</descr>
<seealso>
<link id="DecimalSeparator"/>
<link id="Format"/>
<link id="FormatFloat"/>
<link id="FloatToStr"/>
<link id="DefaultFormatSettings"/>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="CurrencyDecimals">
<short>Number of decimals in currency amounts.</short>
<descr>
<p>
<var>CurrencyDecimals</var> is the number of decimals to be used when
formatting a currency. It is used by the float formatting routines.
The initialization routines of
the <file>SysUtils</file> unit initialize this string with a value conforming to
the regional preferences of the user or system regional default.
</p>
<p>
This constant is deprecated.
You should use <link id="DefaultFormatSettings">DefaultFormatSettings.CurrencyFormat</link> instead.
</p>
</descr>
<seealso>
<link id="Format"/>
<link id="DecimalSeparator"/>
<link id="DefaultFormatSettings"/>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="CurrencyFormat">
<short>Format string for currencies.</short>
<descr>
<p>
<var>CurrencyFormat</var> is the default format string for positive currencies.
It is used by the float formatting routines.
The initialization routines of
the <file>SysUtils</file> unit initialize this string with a value conforming to
the regional preferences of the user or system regional default.
</p>
<p>
This constant is deprecated.
You should use <link id="DefaultFormatSettings">DefaultFormatSettings.CurrencyFormat</link> instead.
</p>
</descr>
<seealso>
<link id="CurrencyDecimals"/>
<link id="NegCurrFormat"/>
<link id="CurrencyString"/>
<link id="Format"/>
<link id="FloatToText"/>
<link id="DefaultFormatSettings"/>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="NegCurrFormat">
<short>Format string for negative currencies.</short>
<descr>
<p>
<var>CurrencyFormat</var> is the default format string for negative currencies.
It is used by the float formatting routines.
The initialization routines of
the <file>SysUtils</file> unit initialize this string with a value conforming to
the regional preferences of the user or system regional default:
</p>
<dl>
<dt>0</dt><dd>Left parenthesis, currency symbol, amount, right parenthesis. Ex: ($1.2)</dd>
<dt>1</dt><dd>Negative sign, currency symbol, amount. Ex: -$1.2</dd>
<dt>2</dt><dd>Monetary symbol, negative sign, amount. Ex: $-1.2</dd>
<dt>3</dt><dd>Monetary symbol, amount, negative sign. Ex: $1.2-</dd>
<dt>4</dt><dd>Left parenthesis, amount, currency symbol, right parenthesis. Ex: (1.2$)</dd>
<dt>5</dt><dd>Negative sign, amount, currency symbol. Ex: -1.2$</dd>
<dt>5</dt><dd>6Amount, negative sign, currency symbol. Ex: 1.2-$</dd>
<dt>5</dt><dd>7Amount, currency symbol, negative sign. Ex: 1.2$-</dd>
<dt>5</dt><dd>8Negative sign, amount, space, currency symbol (as #5, adding a space before the currency symbol). Ex: -1.2 $</dd>
<dt>9</dt><dd>Negative sign, currency symbol, space, amount (as #1, adding a space after the currency symbol). Ex: -$ 1.2</dd>
<dt>10</dt><dd>Amount, space, currency symbol, negative sign (as #7, adding a space before the currency symbol). Ex: 1.2 $-</dd>
<dt>11</dt><dd>Monetary symbol, space, amount, negative sign (as #3, adding a space after the currency symbol). Ex: $ 1.2-</dd>
<dt>12</dt><dd>Monetary symbol, space, negative sign, amount (as #2, adding a space after the currency symbol). Ex: $ -1.2</dd>
<dt>13</dt><dd>Amount, negative sign, space, currency symbol (as #6, adding a space before the currency symbol). Ex: 1.2- $</dd>
<dt>14</dt><dd>Left parenthesis, currency symbol, space, amount, right parenthesis (as #0, adding a space after the currency symbol). Ex: ($ 1.2)</dd>
<dt>15</dt><dd>Left parenthesis, amount, space, currency symbol, right parenthesis (as ##4, adding a space before the currency symbol). Ex: (1.2 $)</dd>
</dl>
</descr>
<p> 
This constant is deprecated. You should use <link id="DefaultFormatSettings">DefaultFormatSettings.NegCurrFormat</link>
instead.
</p>

<seealso>
<link id="CurrencyDecimals"/>
<link id="CurrencyFormat"/>
<link id="CurrencyString"/>
<link id="Format"/>
<link id="FloatToText"/>
<link id="DefaultFormatSettings"/>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="CurrencyString">
<short>Name of currency.</short>
<descr>
<p>
<var>CurrencyString</var> is the currency symbol for the current locale.
It is used by the float formatting routines.
The initialization routines of
the <file>SysUtils</file> unit initialize this string with a value conforming to
the regional preferences of the user or system regional default.
</p>
<p> 
This constant is deprecated. You should use <link id="DefaultFormatSettings">DefaultFormatSettings.CurrencyString</link>
instead.
</p>
</descr>
<seealso>
<link id="CurrencyDecimals"/>
<link id="NegCurrFormat"/>
<link id="CurrencyFormat"/>
<link id="Format"/>
<link id="FloatToText"/>
<link id="DefaultFormatSettings"/>
</seealso>
</element>

<!-- function Visibility: default -->
<element name="strlen">
<short>Length of a null-terminated string.</short>
<descr>
Returns the length of the null-terminated string <var>P</var>.
If <var>P</var> equals <var>Nil</var> then zero (0) is returned.
</descr>
<errors>
None.
</errors>
<seealso>
<link id="StrNew"/>
</seealso>
<example file="stringex/ex1"/>
</element>

<!-- function Visibility: default -->
<element name="strcopy">
<short>Copy a null-terminated string</short>
<descr>
Copy the null terminated string in <var>Source</var> to <var>Dest</var>, and
returns a pointer to <var>Dest</var>. <var>Dest</var> needs enough room to contain
<var>Source</var>, i.e. <var>StrLen(Source)+1</var> bytes.
</descr>
<errors>
No length checking is performed.
</errors>
<seealso>
<link id="StrPCopy"/>
<link id="StrLCopy"/>
<link id="StrECopy"/>
</seealso>
<example file="stringex/ex4"/>
</element>

<!-- function Visibility: default -->
<element name="strlcopy">
<short>Copy a null-terminated string, limited in length.</short>
<descr>
Copies <var>MaxLen</var> characters from <var>Source</var> to <var>Dest</var>, and makes
<var>Dest</var> a null terminated string. 
</descr>
<errors>
No length checking is performed.
</errors>
<seealso>
<link id="StrCopy"/>
<link id="StrECopy"/>
</seealso>
<example file="stringex/ex5"/>
</element>

<!-- function Visibility: default -->
<element name="strecopy">
<short>Copy a null-terminated string, return a pointer to the end.</short>
<descr>
Copies the Null-terminated string in <var>Source</var> to <var>Dest</var>, and
returns a pointer to the end (i.e. the terminating Null-character) of the
copied string.
</descr>
<errors>
No length checking is performed.
</errors>
<seealso>
<link id="StrLCopy"/>
<link id="StrCopy"/>
</seealso>
<example file="stringex/ex6"/>
</element>

<!-- function Visibility: default -->
<element name="strend">
<short>Return a pointer to the end of a null-terminated string</short>
<descr>
Returns a pointer to the end of <var>P</var>. (i.e. to the terminating
null-character.
</descr>
<errors>
None.
</errors>
<seealso>
<link id="StrLen"/>
</seealso>
<example file="stringex/ex7"/>
</element>

<!-- function Visibility: default -->
<element name="strcat">
<short>Concatenate 2 null-terminated strings.</short>
<descr>
Attaches <var>Source</var> to <var>Dest</var> and returns <var>Dest</var>.
</descr>
<errors>
No length checking is performed.
</errors>
<seealso>
<link id="StrLCat"/>
</seealso>
<example file="stringex/ex11"/>
</element>

<!-- function Visibility: default -->
<element name="strcomp">
<short>Compare 2 null-terminated strings, case sensitive.</short>
<descr>
<p>
Compares the null-terminated strings <var>S1</var> and <var>S2</var>.
The result is 
</p>
<ul>
<li>A negative <var>Longint</var> when <var>S1&lt;S2</var>.
</li>
<li>0 when <var>S1=S2</var>.
</li>
<li>A positive <var>Longint</var> when <var>S1&gt;S2</var>.
</li>
</ul>
<p>
For an example, see <link id="StrLComp"/>.
</p>
</descr>
<errors>
None.
</errors>
<seealso>
<link id="StrLComp"/>
<link id="StrIComp"/>
<link id="StrLIComp"/>
</seealso>
</element>

<!-- function Visibility: default -->
<element name="strlcomp">
<short>Compare limited number of characters of 2 null-terminated strings</short>
<descr>
<p>
Compares maximum <var>L</var> characters of the null-terminated strings 
<var>S1</var> and <var>S2</var>. 
The result is 
</p>
<ul>
<li>A negative <var>Longint</var> when <var>S1&lt;S2</var>.
</li>
<li>0 when <var>S1=S2</var>.
</li>
<li>A positive <var>Longint</var> when <var>S1&gt;S2</var>.
</li>
</ul>
</descr>
<errors>
None.
</errors>
<seealso>
<link id="StrComp"/>
<link id="StrIComp"/>
<link id="StrLIComp"/>
</seealso>
<example file="stringex/ex8"/>
</element>

<!-- function Visibility: default -->
<element name="stricomp">
<short>Compare 2 null-terminated strings, case insensitive.</short>
<descr>
<p>
Compares the null-terminated strings <var>S1</var> and <var>S2</var>, ignoring case.
The result is 
</p>
<ul>
<li>A negative <var>Longint</var> when <var>S1&lt;S2</var>.
</li>
<li>0 when <var>S1=S2</var>.
</li>
<li>A positive <var>Longint</var> when <var>S1&gt;S2</var>.
</li>
</ul>
</descr>
<errors>
None.
</errors>
<seealso>
<link id="StrLComp"/>
<link id="StrComp"/>
<link id="StrLIComp"/>
</seealso>
<example file="stringex/ex8"/>
</element>

<!-- function Visibility: default -->
<element name="strmove">
<short>Move a null-terminated string to new location.</short>
<descr>
Copies <var>MaxLen</var> characters from <var>Source</var> to <var>Dest</var>. No
terminating null-character is copied.
Returns <var>Dest</var>
</descr>
<errors>
None.
</errors>
<seealso>
<link id="StrLCopy"/>
<link id="StrCopy"/>
</seealso>
<example file="stringex/ex10"/>
</element>

<!-- function Visibility: default -->
<element name="strlcat">
<short>Concatenate 2 null-terminated strings, with length boundary.</short>
<descr>
Adds <var>MaxLen</var> characters from <var>Source</var> to <var>Dest</var>, and adds a
terminating null-character. Returns <var>Dest</var>.
</descr>
<errors>
None.
</errors>
<seealso>
<link id="StrCat"/>
</seealso>
<example file="stringex/ex12"/>
</element>

<!-- function Visibility: default -->
<element name="strscan">
<short>Find first occurrence of a character in a null-terminated string.</short>
<descr>
Returns a pointer to the first occurrence of the character <var>C</var> in the
null-terminated string <var>P</var>. If <var>C</var> does not occur, returns
<var>Nil</var>.
</descr>
<errors>
None.
</errors>
<seealso>
<link id="StrRScan"/>
<link id="StrPos"/>
</seealso>
<example file="stringex/ex13"/>
</element>

<!-- function Visibility: default -->
<element name="strrscan">
<short>Find last occurrence of a character in a null-terminated string.</short>
<descr>
<p>
Returns a pointer to the last occurrence of the character <var>C</var> in the
null-terminated string <var>P</var>. If <var>C</var> does not occur, returns
<var>Nil</var>.
</p>
<p>
For an example, see <link id="StrScan"/>.
</p>
</descr>
<errors>
None.
</errors>
<seealso>
<link id="StrScan"/>
<link id="StrPos"/>
</seealso>
</element>

<!-- function Visibility: default -->
<element name="strlower">
<short>Convert null-terminated string to all-lowercase.</short>
<descr>
Converts <var>P</var> to an all-lowercase string. Returns <var>P</var>.
</descr>
<errors>
None.
</errors>
<seealso>
<link id="StrUpper"/>
</seealso>
<example file="stringex/ex14"/>
</element>

<!-- function Visibility: default -->
<element name="strupper">
<short>Convert null-terminated string to all-uppercase</short>
<descr>
<p>
Converts <var>P</var> to an all-uppercase string. Returns <var>P</var>.
</p>
<p>
For an example, see <link id="StrLower"/>
</p>
</descr>
<errors>
None.
</errors>
<seealso>
<link id="StrLower"/>
</seealso>
</element>

<!-- function Visibility: default -->
<element name="strlicomp">
<short>Compare limited number of characters in 2 null-terminated strings,
ignoring case.</short>
<descr>
<p>
Compares maximum <var>L</var> characters of the null-terminated strings <var>S1</var> 
and <var>S2</var>, ignoring case.
The result is 
</p>
<ul>
<li>A negative <var>Longint</var> when <var>S1&lt;S2</var>.
</li>
<li>0 when <var>S1=S2</var>.
</li>
<li>A positive <var>Longint</var> when <var>S1&gt;S2</var>.
</li>
</ul>
<p>
For an example, see <link id="StrIComp"/>
</p>
</descr>
<errors>
None.
</errors>
<seealso>
<link id="StrLComp"/>
<link id="StrComp"/>
<link id="StrIComp"/>
</seealso>
</element>

<!-- function Visibility: default -->
<element name="strpos">
<short>Find position of one null-terminated substring in another.</short>
<descr>
Returns a pointer to the first occurrence of <var>S2</var> in <var>S1</var>.
If <var>S2</var> does not occur in <var>S1</var>, returns <var>Nil</var>.
</descr>
<errors>
None.
</errors>
<seealso>
<link id="StrScan"/>
<link id="StrRScan"/>
</seealso>
<example file="stringex/ex15"/>
</element>

<!-- function Visibility: default -->
<element name="strnew">
<short>Allocate room for new null-terminated string.</short>
<descr>
Copies <var>P</var> to the Heap, and returns a pointer to the copy.
</descr>
<errors>
Returns <var>Nil</var> if no memory was available for the copy.
</errors>
<seealso>
<link id="StrCopy"/>
<link id="StrDispose"/>
</seealso>
<example file="stringex/ex16"/>
</element>

<!-- function Visibility: default -->
<element name="AnsiCompareFileName">
<short>Compare 2 filenames.</short>
<descr>
<p>
<var>AnsiCompareFileName</var> compares 2 filenames <var>S1</var> and
<var>S2</var>, and returns
</p>
<dl>
<dt>&lt; 0</dt>
<dd>if <var>S1</var>&lt;<var>S2</var>.</dd>
<dt>= 0</dt> <dd>if <var>S1=S2</var>.</dd>
<dt>&gt; 0</dt>
<dd>if <var>S1</var>&gt;<var>S2</var>.</dd>
</dl>
<p>
The function actually checks <var>FileNameCaseSensitive</var> and returns
the result of <link id="AnsiCompareStr"/> or <link id="AnsiCompareText"/> 
depending on whether <var>FileNameCaseSensitive</var> is <var>True</var> or
<var>False</var>
</p>
</descr>
<errors>
None.
</errors>
<seealso>
<link id="AnsiCompareStr"/>
<link id="AnsiCompareText"/>
<link id="AnsiLowerCaseFileName"/>
</seealso>
</element>

<!-- function Visibility: default -->
<element name="AnsiLowerCaseFileName">
<short>Convert filename to lowercase.</short>
<descr>
<p>
<var>AnsiLowerCaseFileName</var> simply returns the result of 
</p>
<code>
AnsiLowerCase(S);
</code>
</descr>
<seealso>
<link id="AnsiLowerCase"/>
<link id="AnsiCompareFileName"/>
<link id="AnsiUpperCaseFileName"/>
</seealso>
</element>

<!-- function Visibility: default -->
<element name="AnsiUpperCaseFileName">
<short>Convert filename to uppercase.</short>
<descr>
<p>
<var>AnsiUpperCaseFileName</var> simply returns the result of
</p>
<code>
AnsiUpperCase(S);
</code>
</descr>
<seealso>
<link id="AnsiUpperCase"/>
<link id="AnsiCompareFileName"/>
<link id="AnsiLowerCaseFileName"/>
</seealso>
</element>

<!-- function Visibility: default -->
<element name="AnsiPos">
<short>Return Position of one ansistring in another.</short>
<descr>
<var>AnsiPos</var> does the same as the standard <var>Pos</var> function.
</descr>
<seealso>
<link id="AnsiStrPos"/>
<link id="AnsiStrScan"/>
<link id="AnsiStrRScan"/>
</seealso>
</element>

<!-- function Visibility: default -->
<element name="AnsiStrPos">
<short>Return position of one null-terminated substring in another</short>
<descr>
<var>AnsiStrPos</var> returns a pointer to the first occurrence of
<var>SubStr</var> in <var>Str</var>. If <var>SubStr</var> does not occur in
<var>Str</var> then <var>Nil</var> is returned.
</descr>
<errors>
An access violation may occur if either <var>Str</var> or <var>SubStr</var>
point to invalid memory.
</errors>
<seealso>
<link id="AnsiPos"/>
<link id="AnsiStrScan"/>
<link id="AnsiStrRScan"/>
</seealso>
</element>

<!-- function Visibility: default -->
<element name="AnsiStrRScan">
<short>Find last occurrence of a character in a null-terminated string.</short>
<descr>
<var>AnsiStrPos</var> returns a pointer to the <em>last</em> occurrence of
the character <var>Chr</var> in <var>Str</var>. If <var>Chr</var> does not occur in
<var>Str</var> then <var>Nil</var> is returned.
</descr>
<errors>
An access violation may occur if <var>Str</var> points to invalid memory.
</errors>
<seealso>
<link id="AnsiPos"/>
<link id="AnsiStrScan"/>
<link id="AnsiStrPos"/>
</seealso>
</element>

<!-- function Visibility: default -->
<element name="AnsiStrScan">
<short>Find first occurrence of a character in a null-terminated string.</short>
<descr>
<var>AnsiStrPos</var> returns a pointer to the <em>first</em> occurrence of
the character <var>Chr</var> in <var>Str</var>. If <var>Chr</var> does not occur in
<var>Str</var> then <var>Nil</var> is returned.
</descr>
<errors>
An access violation may occur if <var>Str</var> points to invalid memory.
</errors>
<seealso>
<link id="AnsiPos"/>
<link id="AnsiStrScan"/>
<link id="AnsiStrPos"/>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="DirSeparators">
<short>Characters that are known directory separators.</short>
<descr>
<var>DirSeparators</var> is a set of characters which are known directory
separator characters on all supported platforms. This set is used by the
<link id="SetDirSeparators"/> call to correct pathnames for the current
platform.
</descr>
<seealso>
<link id="DoDirSeparators"/>
<link id="SetDirSeparators"/>
</seealso>
</element>

<!-- function Visibility: default -->
<element name="IncludeTrailingPathDelimiter">
<short>Add trailing directory separator to a pathname, if needed.</short>
<descr>
<p>
<var>IncludeTrailingPathDelimiter</var> adds a trailing path delimiter
character (<link id="PathDelim"/>) to <var>Path</var> if none is present
yet, and returns the result.
</p>
<p>
If <var>Path</var> is empty, a path delimiter is returned, for Delphi
compatibility.
</p>
</descr>
<seealso>
<link id="IncludeTrailingBackslash"/>
<link id="ExcludeTrailingPathDelimiter"/>
<link id="PathDelim"/>
<link id="IsPathDelimiter"/>
</seealso>
</element>

<!-- function Visibility: default -->
<element name="IncludeTrailingBackslash">
<short>Add trailing directory separator to a pathname, if needed.</short>
<descr>
<var>IncludeTrailingBackslash</var> is provided for backwards compatibility
with Delphi. Use <link id="IncludeTrailingPathDelimiter"/> instead.
</descr>
<seealso>
<link id="IncludeTrailingPathDelimiter"/>
<link id="ExcludeTrailingPathDelimiter"/>
<link id="PathDelim"/>
<link id="IsPathDelimiter"/>
</seealso>
</element>

<!-- function Visibility: default -->
<element name="ExcludeTrailingPathDelimiter">
<short>Strip trailing directory separator from a pathname, if needed.</short>
<descr>
<var>ExcludeTrailingPathDelimiter</var> removes the trailing path delimiter
character (<link id="PathDelim"/>) from <var>Path</var> if it is present,
and returns the result. 
</descr>
<seealso>
<link id="ExcludeTrailingBackslash"/>
<link id="IncludeTrailingPathDelimiter"/>
<link id="PathDelim"/>
<link id="IsPathDelimiter"/>
</seealso>
</element>

<!-- function Visibility: default -->
<element name="ExcludeTrailingBackSlash">
<short>Strip trailing directory separator from a pathname, if needed.</short>
<descr>
<var>ExcludeTrailingBackslash</var> is provided for backwards compatibility
with Delphi. Use <link id="ExcludeTrailingPathDelimiter"/> instead.
</descr>
<seealso>
<link id="IncludeTrailingPathDelimiter"/>
<link id="ExcludeTrailingPathDelimiter"/>
<link id="PathDelim"/>
<link id="IsPathDelimiter"/>
</seealso>
</element>

<!-- function Visibility: default -->
<element name="IsPathDelimiter">
<short>Is the character at the given position a pathdelimiter ?</short>
<descr>
<var>IsPathDelimiter</var> returns <var>True</var> if the character at
position <var>Index</var> equals <link id="PathDelim"/>, i.e. if it is a
path delimiter character for the current platform.
</descr>
<errors>
<link id="IncludeTrailingPathDelimiter"/>
<link id="ExcludeTrailingPathDelimiter"/>
<link id="PathDelim"/>
</errors>
<seealso>
</seealso>
</element>

<!-- function Visibility: default -->
<element name="SameFileName">
<short>Are two filenames referring to the same file ?</short>
<descr>
<var>SameFileName</var> returns <var>True</var> if calling <link
id="AnsiCompareFileName"/> with arguments <var>S1</var> and <var>S2</var>
returns 0, and returns <var>False</var> otherwise.
</descr>
<errors>
None.
</errors>
<seealso>
<link id="AnsiCompareFileName"/>
</seealso>
</element>

<!-- record type Visibility: default -->
<element name="TUnicodeSearchRec">
<short>Unicode searchrec record</short>
<descr>
<p>
<var>TRawbyteSearchRec</var> is a search handle description record using
multi-byte strings. It is initialized by a call to <link id="FindFirst"/> and can be used to do
subsequent calls to <link id="FindNext"/>. It contains the result of these
function calls. It must be used to close the search sequence with a call to
<link id="FindClose"/>.
</p>
<remark>
Not all fields of this record should be used. Some of the fields are for
internal use only. (<var>PathOnly</var> for example, is only provided for
Kylix compatibility)
</remark>
</descr>
<seealso>
<link id="TRawByteSearchRec"/>
<link id="TSearchRec"/>
<link id="FindFirst"/>
<link id="FindNext"/>
<link id="FindClose"/>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TUnicodeSearchRec.Time">
<short>Last modification timestamp</short>
</element>

<!-- variable Visibility: default -->
<element name="TUnicodeSearchRec.Size">
<short>File size in bytes</short>
</element>

<!-- variable Visibility: default -->
<element name="TUnicodeSearchRec.Attr">
<short>File Attributes</short>
</element>

<!-- variable Visibility: default -->
<element name="TUnicodeSearchRec.Name">
<short>File name, unicode aware (no path)</short>
</element>

<!-- variable Visibility: default -->
<element name="TUnicodeSearchRec.ExcludeAttr">
<short>For internal use only</short>
</element>

<!-- variable Visibility: default -->
<element name="TUnicodeSearchRec.FindHandle">
<short>Native file search handle. For internal use only, treat as opaque</short>
</element>

<!-- variable Visibility: default -->
<element name="TUnicodeSearchRec.Mode">
<short>File permissions (mode, Unix only)</short>
</element>

<!-- record type Visibility: default -->
<element name="TRawbyteSearchRec">
<short>Record describing a search handle or result (single-byte string version)</short>
<descr>
<p>
<var>TRawbyteSearchRec</var> is a search handle description record using
single-byte strings. It is initialized by a call to <link id="FindFirst"/> and can be used to do
subsequent calls to <link id="FindNext"/>. It contains the result of these
function calls. It must be used to close the search sequence with a call to
<link id="FindClose"/>.
</p>
<remark>
Not all fields of this record should be used. Some of the fields are for
internal use only. (<var>PathOnly</var> for example, is only provided for
Kylix compatibility)
</remark>
<remark>
Note that for files with unicode filenames this is a converted value from
the unicode filename. Depending on the codepage, this may or may not be a
correct rendering of the correct unicode filename.
</remark>
</descr>
<seealso>
<link id="FindFirst"/>
<link id="FindNext"/>
<link id="FindClose"/>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TRawbyteSearchRec.Time">
<short>Last modification timestamp</short>
</element>

<!-- variable Visibility: default -->
<element name="TRawbyteSearchRec.Size">
<short>File size in bytes</short>
</element>

<!-- variable Visibility: default -->
<element name="TRawbyteSearchRec.Attr">
<short>File attributes</short>
</element>

<!-- variable Visibility: default -->
<element name="TRawbyteSearchRec.Name">
<short>File name (single byte version)</short>
</element>

<!-- variable Visibility: default -->
<element name="TRawbyteSearchRec.ExcludeAttr">
<short>For internal use only</short>
</element>

<!-- variable Visibility: default -->
<element name="TRawbyteSearchRec.FindHandle">
<short>Native file search handle. For internal use only, treat as opaque</short>
</element>

<!-- variable Visibility: default -->
<element name="TRawbyteSearchRec.Mode">
<short>File permissions (mode, Unix only)</short>
</element>

<!-- record type Visibility: default -->
<element name="TSearchRec">
<short>Record describing a search handle or result</short>
<descr>
<p>
<var>TSearchRec</var> is a search handle description record. It is
initialized by a call to <link id="FindFirst"/> and can be used to do
subsequent calls to <link id="FindNext"/>. It contains the result of these
function calls. It must be used to close the search sequence with a call to
<link id="FindClose"/>. 
</p>
<remark>
Not all fields of this record should be used. Some of the fields are for
internal use only. (<var>PathOnly</var> for example, is only provided for
Kylix compatibility)
</remark>
</descr>
<seealso>
<link id="FindFirst"/>
<link id="FindNext"/>
<link id="FindClose"/>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TSearchRec.Time">
<short>Timestamp of the file.</short>
</element>

<!-- variable Visibility: default -->
<element name="TSearchRec.Size">
<short>Size of the file.</short>
</element>

<!-- variable Visibility: default -->
<element name="TSearchRec.Attr">
<short>Attributes of the file.</short>
</element>

<!-- variable Visibility: default -->
<element name="TSearchRec.Name">
<short>File name (no directory part)</short>
</element>

<!-- variable Visibility: default -->
<element name="TSearchRec.ExcludeAttr">
<short>Attributes to exclude from search (do not use).</short>
</element>

<!-- variable Visibility: default -->
<element name="TSearchRec.FindHandle">
<short>Internal OS handle (do not use).</short>
</element>

<!-- variable Visibility: default -->
<element name="TSearchRec.PathOnly">
<short>For kylix compatibility, on Unices only (do not use).</short>
</element>

<!-- constant Visibility: default -->
<element name="faReadOnly">
<short>Read-Only file.</short>
<descr>
Attribute of a file, meaning the file is read-only. 
Used in <link id="TSearchRec"/> and <link id="FindFirst"/>
</descr>
<seealso>
<link id="TSearchRec"/>
<link id="FindFirst"/>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="faHidden">
<short>Hidden file.</short>
<descr>Attribute of a file, meaning the file is hidden. On unix, this means
the filename starts with a dot character.</descr>
<descr>
Attribute of a file, meaning the file is read-only. 
Used in <link id="TSearchRec"/> and <link id="FindFirst"/>
</descr>
<seealso>
<link id="TSearchRec"/>
<link id="FindFirst"/>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="faSysFile">
<short>System file (Dos/Windows only)</short>
<descr>
Attribute of a file, meaning the file is a system file. 
Used in <link id="TSearchRec"/> and <link id="FindFirst"/>
</descr>
<seealso>
<link id="TSearchRec"/>
<link id="FindFirst"/>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="faVolumeId">
<short>Volume id (Fat filesystem, Dos/Windows only)</short>
<descr>
Attribute of a file, meaning the  entry contains the volume ID. 
Used in <link id="TSearchRec"/> and <link id="FindFirst"/>
</descr>
<seealso>
<link id="TSearchRec"/>
<link id="FindFirst"/>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="faDirectory">
<short>File is a directory</short>
<descr>
Attribute of a file, meaning the file is a directory. 
Used in <link id="TSearchRec"/> and <link id="FindFirst"/>
</descr>
<seealso>
<link id="TSearchRec"/>
<link id="FindFirst"/>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="faArchive">
<short>Archive bit is set</short>
<descr>
Attribute of a file, meaning the file has the archive bit set.
Used in <link id="TSearchRec"/> and <link id="FindFirst"/>
</descr>
<seealso>
<link id="TSearchRec"/>
<link id="FindFirst"/>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="faAnyFile">
<short>Match any file</short>
<descr>
Use this attribute in the <link id="FindFirst"/> call to find all matching
files.
</descr>
<seealso>
<link id="FindFirst"/>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="fmOpenRead">
<short>Open file in read-only mode</short>
<descr>
<var>fmOpenRead</var> is used in the <link id="FileOpen"/> call to open a
file in read-only mode.
</descr>
<seealso>
<link id="FileOpen"/>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="fmOpenWrite">
<short>Open file in write-only mode</short>
<descr>
<var>fmOpenWrite</var> is used in the <link id="FileOpen"/> call to open a
file in write-only mode.
</descr>
<seealso>
<link id="FileOpen"/>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="fmOpenReadWrite">
<short>Open file in read/write mode.</short>
<descr>
<var>fmOpenReadWrite</var> is used in the <link id="FileOpen"/> call to open a
file in read-write mode.
</descr>
<seealso>
<link id="FileOpen"/>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="fmShareCompat">
<short>Open file in DOS share-compatibility mode</short>
<descr>
<var>fmOpenShareCompat</var> is used in the <link id="FileOpen"/> call
OR-ed together with one of <link id="fmOpenReadWrite"/>, <link
id="fmOpenRead"/> or <link id="fmOpenWrite"/>,to open a
file in a sharing modus that is equivalent to sharing implemented in MS-DOS.
</descr>
<seealso>
<link id="FileOpen"/>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="fmShareExclusive">
<short>Lock file for exclusive use</short>
<descr>
<var>fmOpenShareExclusive</var> is used in the <link id="FileOpen"/> call
OR-ed together with one of <link id="fmOpenReadWrite"/>, <link
id="fmOpenRead"/> or <link id="fmOpenWrite"/>, to open a
file exclusively.
</descr>
<seealso>
<link id="FileOpen"/>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="fmShareDenyWrite">
<short>Lock file so other processes can only read.</short>
<descr>
<var>fmOpenShareDenyWrite</var> is used in the <link id="FileOpen"/> call
OR-ed together with one of <link id="fmOpenReadWrite"/>, <link
id="fmOpenRead"/> or <link id="fmOpenWrite"/>, to open a
file so other processes cannot write to it, they can only read.
</descr>
<seealso>
<link id="FileOpen"/>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="fmShareDenyRead">
<short>Lock file so other processes cannot read.</short>
<descr>
<p>
<var>fmOpenShareRead</var> is used in the <link id="FileOpen"/> call
OR-ed together with one of <link id="fmOpenReadWrite"/>, <link
id="fmOpenRead"/> or <link id="fmOpenWrite"/>, to open a
file so other processes cannot read from it.
</p>
<p>
This constant only works on Windows, because other operating systems do not
support this constants.
</p>
</descr>
<seealso>
<link id="FileOpen"/>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="fmShareDenyNone">
<short>Do not lock file.</short>
<descr>
<var>fmShareDenyNone</var> is used in the <link id="FileOpen"/> call
OR-ed together with one of <link id="fmOpenReadWrite"/>, <link
id="fmOpenRead"/> or <link id="fmOpenWrite"/>, to open a
file so other processes can read/write the file as well.
</descr>
<seealso>
<link id="FileOpen"/>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="fsFromBeginning">
<short>Start seek operation from beginning of file.</short>
<descr>
<var>fsFromBeginning</var> is used to indicate in the <link id="FileSeek"/>
call that a seek operation should be started at the start of the file.
</descr>
<seealso>
<link id="FileSeek"/>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="fsFromCurrent">
<short>Start seek operation from current position in file.</short>
<descr>
<var>fsFromBeginning</var> is used to indicate in the <link id="FileSeek"/>
call that a seek operation should be started at the current position in the file.
</descr>
<seealso>
<link id="FileSeek"/>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="fsFromEnd">
<short>Start seek operation from end of file.</short>
<descr>
<var>fsFromBeginning</var> is used to indicate in the <link id="FileSeek"/>
call that a seek operation should be started at the last position in the file.
</descr>
<seealso>
<link id="FileSeek"/>
</seealso>
</element>

<!-- function Visibility: default -->
<element name="DirectoryExists">
<short>Check whether a directory exists in the file system.</short>
<descr>
<var>DirectoryExists</var> checks whether <var>Directory</var> exists in the
filesystem and is actually a directory. If this is the case, the function
returns <var>True</var>, otherwise <var>False</var> is returned.
</descr>
<seealso>
<link id="FileExists"/>
</seealso>
</element>

<!-- function Visibility: default -->
<element name="FileIsReadOnly">
<short>Check whether a file is read-only.</short>
<descr>
<var>FileIsReadOnly</var> checks whether <var>FileName</var> exists in the
filesystem and is a read-only file. If this is the case, the function
returns <var>True</var>, otherwise <var>False</var> is returned.
</descr>
<seealso>
<link id="FileExists"/>
</seealso>
</element>

<!-- function Visibility: default -->
<element name="GetFileHandle">
<short>Extract OS handle from an untyped file or text file.</short>
<descr>
<var>GetFileHandle</var> returns the operating system handle for the file
descriptor <var>F</var>. It can be used in various file operations which are
not directly supported by the pascal language.
</descr>
</element>

<!-- function Visibility: default -->
<element name="InterLockedIncrement">
<short>Thread-safe integer increment.</short>
<descr>
<var>InterlockedIncrement</var> increments <var>Target</var> in a
thread-safe way, and returns the new value of <var>Target</var>
</descr>
<seealso>
<link id="InterlockedDecrement"/>
<link id="InterlockedExchange"/>
<link id="InterlockedExchangeAdd"/>
</seealso>
</element>

<!-- function Visibility: default -->
<element name="InterLockedDecrement">
<short>Thread-safe integer decrement</short>
<descr>
<var>InterlockedDecrement</var> decrements <var>Target</var> in a
thread-safe way, and returns the new value of <var>Target</var>
</descr>
<seealso>
<link id="InterlockedIncrement"/>
<link id="InterlockedExchange"/>
<link id="InterlockedExchangeAdd"/>
</seealso>
</element>

<!-- function Visibility: default -->
<element name="InterLockedExchange">
<short>Thread-safe exchange of 2 values.</short>
<descr>
<var>InterlockedDecrement</var> replaces <var>Target</var> with
<var>Source</var> in a thread-safe way, and returns the old value 
of <var>Target</var>
</descr>
<seealso>
<link id="InterlockedIncrement"/>
<link id="InterlockedDecrement"/>
<link id="InterlockedExchange"/>
<link id="InterlockedExchangeAdd"/>
</seealso>
</element>

<!-- function Visibility: default -->
<element name="InterLockedExchangeAdd">
<short>Thread-safe exchange of 2 values</short>
<descr>
<var>InterlockedDecrement</var> adds to <var>Target</var> the value of 
<var>Source</var> in a thread-safe way, and returns the old value 
of <var>Target</var>
</descr>
<seealso>
<link id="InterlockedIncrement"/>
<link id="InterlockedDecrement"/>
<link id="InterlockedExchange"/>
</seealso>
</element>

<!-- procedure Visibility: default -->
<element name="FreeAndNil">
<short>Free object if needed, and set object reference to <var>Nil</var></short>
<descr>
<var>FreeAndNil</var> will free the object in <var>Obj</var> and will
set the reference in <var>Obj</var> to <var>Nil</var>. The reference is set
to <var>Nil</var> first, so if an exception occurs in the destructor of the
object, the reference will be <var>Nil</var> anyway.
</descr>
<errors>
Exceptions that occur during the destruction of <var>Obj</var> are not
caught.
</errors>
</element>

<element name="GetTempDir">
<short>Return name of system's temporary directory</short>
<descr>
<p>
<var>GetTempDir</var> returns the temporary directory of the system. If
<var>Global</var> is <var>True</var> (the default value) it returns the 
system temporary directory, if it is <var>False</var> then a directory 
private to the user is returned. The returned name will end with a 
directory delimiter character.
</p>
<p>
These directories may be the same. No guarantee is made that this directory
exists or is writeable by the user.
</p>
<p>
The <link id="OnGetTempDir"/> handler may be set to provide custom handling
of this routine: One could implement callbacks which take into consideration 
frameworks like KDE or GNOME, and return a different value from the default
system implementation.
</p>
</descr>
<errors>
On error, an empty string is returned.
</errors>
<seealso>
<link id="OnGetTempDir"/>
<link id="GetTempFileName"/>
</seealso>
</element>

<element name="GetTempFileName">
<short>Return the name of a temporary file.</short>
<descr>
<p>
<var>GetTempFileName</var> returns the name of a temporary file in directory
<var>Dir</var>. The name of the file starts with <var>Prefix</var>.
</p>
<p>
If <var>Dir</var> is empty, the value returned by <var>GetTempDir</var> is
used, and if <var>Prefix</var> is empty, 'TMP' is used.
</p>
<p>
The <link id="OnGetTempFile"/> handler may be set to provide custom handling
of this routine: One could implement callbacks which take into consideration
frameworks like KDE or GNOME, and return a different value from the default
system implementation.
</p>
</descr>
<errors>
On error, an empty string is returned.
</errors>
<seealso>
<link id="GetTempDir"/>
<link id="OnGetTempFile"/>
</seealso>
</element>

<element name="OnGetTempDir">
<short>Handler for <link id="#rtl.sysutils.GetTempDir">GetTempDir</link> function.</short>
<descr>
<var>OnGetTempDir</var> can be used to provide custom behaviour for the
<link id="GetTempDir"/> function. Note that the returned name should have a
trailing directory delimiter character.
</descr>
<seealso>
<link id="GetTempDir"/>
<link id="OnGetTempFile"/>
</seealso>
</element>

<element name="OnGetTempFile">
<short>Handler for <link id="#rtl.sysutils.GetTempFileName">GetTempFileName</link> function.</short>
<descr>
<var>OnGetTempDir</var> can be used to provide custom behaviour for the
<link id="GetTempFileName"/> function. Note that the values for
<var>Prefix</var> and <var>Dir</var> should be observed.
</descr>
<seealso>
<link id="OnGetTempDir"/>
<link id="GetTempFileName"/>
</seealso>
</element>

<element name="TGetTempDirEvent">
<short>Function prototype for <link id="#rtl.sysutils.OnGetTempDir">OnGetTempDir</link> handler.</short>
</element>

<element name="TGetTempFileEvent">
<short>Function prototype for <link id="#rtl.sysutils.OnGetTempFile">OnGetTempFile</link> handler.</short>
</element>

<element name="TLineEndStr">
<short>End-of-line string</short>
<descr>
<var>TLineEndStr</var> is used in the <link id="TextRec"/> record to
indicate the end-of-line sequence for a text file.
</descr>
</element>

<element name="TSysLocale">
<short>Type describing the current locale</short>
<descr>
<var>TSysLocale</var> describes the current locale. If <var>Fareast</var> or
<var>MBCS</var> is <var>True</var>, then the current locale uses a
Multi-Byte Character Set. If <var>MiddleEast</var> or <var>RightToLeft</var>
is <var>True</var> then words and sentences are read from right to left.
</descr>
</element>

<element name="TSysLocale.FarEast">
<short>Multi-Byte Character Set used</short>
</element>

<element name="TSysLocale.MiddleEast">
<short>Reading direction is Right-to-left</short>
</element>

<element name="TSysLocale.MBCS">
<short>Multi-Byte Character Set used</short>
</element>

<element name="TSysLocale.RightToLeft">
<short>Reading direction is Right-to-left</short>
</element>

<element name="SysLocale">
<short>Variable with locale information</short>
<descr>
<var>SysLocale</var> is initialized by the initialization code of the
<file>SysUtils</file> unit. For an explanation of the fields, see <link
id="TSysLocale"/>
</descr>
<seealso>
<link id="TSysLocale"/>
</seealso>
</element>

<element name="ForceDirectories">
<short>Create a chain of directories</short>
<descr>
<var>ForceDirectories</var> tries to create any missing directories in
<var>Dir</var> till the whole path in <var>Dir</var> exists. It returns
<var>True</var> if <var>Dir</var> already existed or was created
succesfully. If it failed to create any of the parts, <var>False</var> is
returned.
</descr>
</element>

<element name="StrCharLength">
<short>Return the length of a null-terminated string in characters.</short>
<descr>
<var>StrCharLength</var> returns the length of the null-terminated string
<var>Str</var> (a widestring) in characters (not in bytes). It uses the
widestring manager to do this.
</descr>
</element>

<element name="TryStrToFloat">
<short>Try to convert a string to a float.</short>
<descr>
<var>TryStrToFloat</var> tries to convert the string <var>S</var> to a
floating point value, and stores the result in <var>Value</var>. It returns
<var>True</var> if the operation was succesful, and <var>False</var> if it
failed. This operation takes into account the system settings for floating
point representations.
</descr>
<errors>
On error, <var>False</var> is returned.
</errors>
<seealso>
<link id="StrToFloat"/>
</seealso>
</element>

<element name="WideCompareStr">
<short>Compare two widestrings (case sensitive)</short>
<descr>
<p>
<var>WideCompareStr</var> compares two widestrings and returns the following
result:
</p>
<dl>
<dt>&lt; 0</dt><dd>if <var>S1&lt;S2</var>.</dd>
<dt>0</dt><dd>if <var>S1=S2</var>.</dd>
<dt>&gt; 0</dt><dd>if <var>S1&gt;S2</var>.</dd>
</dl>
<p>
The comparision takes into account wide characters, i.e. it takes
care of strange accented characters. Contrary to <link id="WideCompareText"/>,
the comparision is case sensitive.
</p>
</descr>
<errors>
None.
</errors>
<seealso>
<link id="WideCompareText"/>
<link id="WideSameStr"/>
<link id="WideSameText"/>
</seealso>
</element>

<element name="WideCompareText">
<short>Compare two widestrings  (ignoring case).</short>
<descr>
<p>
<var>WideCompareStr</var> compares two widestrings and returns the following
result:
</p>
<dl>
<dt>&lt; 0</dt><dd>if <var>S1&lt;S2</var>.</dd>
<dt>0</dt><dd>if <var>S1=S2</var>.</dd>
<dt>&gt; 0</dt><dd>if <var>S1&gt;S2</var>.</dd>
</dl>
<p>
The comparision takes into account wide characters, i.e. it takes
care of strange accented characters. Contrary to <link id="WideCompareStr"/>,
the comparision is case insensitive.
</p>
</descr>
<errors>
None.
</errors>
<seealso>
<link id="WideCompareStr"/>
<link id="WideSameStr"/>
<link id="WideSameText"/>
</seealso>
</element>

<element name="WideFormat">
<short>Format a wide string.</short>
<descr>
<p>
<var>WideFormat</var> does the same as <link id="Format"/> but accepts as a
formatting string a WideString.  The resulting string is also a WideString.
</p>
<p>
For more information about the used formatting characters, see the 
<link id="Format"/> string.
</p>
</descr>
<seealso>
<link id="Format"/>
</seealso>
</element>

<element name="WideLowerCase">
<short>Change a widestring to all-lowercase.</short>
<descr>
<p>
<var>WideLowerCase</var> converts the string <var>S</var> to lowercase characters
and returns the resulting string. It takes into account the operating system language
settings when doing this, so special characters are converted correctly as
well.
</p>
<remark> 
On Unix-like platforms, a widestring manager must be installed for this function
to work correctly.
</remark>
</descr>
<errors>
None.
</errors>
<seealso>
<link id="WideUpperCase"/>
</seealso>
</element>

<element name="WideSameStr">
<short>Check whether two widestrings are the same (case sensitive)</short>
<descr>
<var>WideSameStr</var> returns <var>True</var> if <link id="WideCompareStr"/>
returns 0 (zero), i.e. when <var>S1</var> and <var>S2</var> are the same
string (taking into account case).
</descr>
<seealso>
<link id="WideSameText"/>
<link id="WideCompareStr"/>
<link id="WideCompareText"/>
<link id="AnsiSameStr"/>
</seealso>
</element>

<element name="WideSameText">
<short>Check whether two widestrings are the same (ignoring case)</short>
<descr>
<var>WideSameText</var> returns <var>True</var> if <link id="WideCompareText"/>
returns 0 (zero), i.e. when <var>S1</var> and <var>S2</var> are the same
string (taking into account case).
</descr>
<seealso>
<link id="WideSameStr"/>
<link id="WideCompareStr"/>
<link id="WideCompareText"/>
<link id="AnsiSameText"/>
</seealso>
</element>

<element name="WideUpperCase">
<short>Change a widestring to all-uppercase.</short>
<descr>
<p>
<var>WideUpperCase</var> converts the string <var>S</var> to uppercase characters
and returns the resulting string. It takes into account the operating system language
settings when doing this, so special characters are converted correctly as
well.
</p>
<remark> 
On Unix-like platforms, a widestring manager must be installed for this function
to work correctly.
</remark>
</descr>
<errors>
None.
</errors>
<seealso>
<link id="WideLowerCase"/>
</seealso>
</element>

<element name="WrapText">
<short>Word-wrap a text.</short>
<descr>
<p>
<var>WrapText</var> does a wordwrap at column <var>MaxCol</var> of the string 
in <var>Line</var>. It breaks the string only at characters which are in 
<var>BreakChars</var> (default whitespace and hyphen) and inserts then the string
<var>BreakStr</var> (default the lineending character for the current OS).
</p>
<p>
Portions of text that are between single or double quotes will be considered
single words and the text will not be broken between the quotes.
</p>
</descr>
<seealso>
<link id="StringReplace"/>
</seealso>
</element>

<element name="FormatCurr">
<short>Format a currency</short>
<descr>
<p>
<var>FormatCurr</var> formats the currency <var>Value</var> according to the
formatting rule in the <var>Format</var> parameter, and returns the resulting string.
</p>
<p>
For an explanation of the formatting characters usable in the <var>Format</var>
parameter, see <link id="FormatFloat"/>.
</p>
</descr>
<seealso>
<link id="FormatFloat"/>
<link id="FloatToText"/>
</seealso>
</element>


<element name="TryStrToCurr">
<short>Try to convert a string to a currency</short>
<descr>
<p>
<var>TryStrToCurr</var> converts the string <var>S</var> to a currency value
and returns the value in <var>Value</var>. The function returns
<var>True</var> if it was successful, <var>False</var> if not. This is 
contrary to <link id="StrToCurr"/>, which raises an exception when the 
conversion fails.
</p>
<p>
The function takes into account locale information.
</p>
</descr>
<seealso>
<link id="StrToCurr"/>
<link id="TextToFloat"/>
</seealso>
</element>


<element name="WideFmtStr">
<short>Widestring format</short>
<descr>
<var>WideFmtStr</var> formats <var>Args</var> according to the format string
in <var>Fmt</var> and returns the resulting string in <var>Res</var>.
</descr>
<seealso>
<link id="WideFormat"/>
<link id="WideFormatBuf"/>
<link id="Format"/>
</seealso>
</element>

<element name="WideFormatBuf">
<short>Format widestring in a buffer.</short>
<descr>
<var>WideFormatBuf</var> calls simply <link id="WideFormat"/> with
<var>Fmt</var> (with length <var>FmtLen</var> bytes) and stores maximum 
<var>BufLen</var> bytes in the buffer <var>buf</var>. It returns the number
of copied bytes.
</descr>
<seealso>
<link id="WideFmtStr"/>
<link id="WideFormat"/>
<link id="Format"/>
<link id="FormatBuf"/>
</seealso>
</element>

<!-- unresolved type reference Visibility: default -->
<element name="Unix">
<short>Unix functionality</short>
</element>

<!-- unresolved type reference Visibility: default -->
<element name="errors">
<short>Error descriptions</short>
</element>

<!-- unresolved type reference Visibility: default -->
<element name="sysconst">
<short>Message Strings</short>
</element>

<!-- unresolved type reference Visibility: default -->
<element name="Unixtype">
<short>Unix functionality types</short>
</element>

<!-- function Visibility: default -->
<element name="TryStrToDate">
<short>Try to convert a string with a date indication to a TDateTime value</short>
<descr>
<p>
<var>TryStrToDate</var> tries to convert the string <var>S</var> to a <var>TDateTime</var> date
value, and stores the date in <var>Value</var>. The Date must consist of 1 to three digits, separated by the
<var>DateSeparator</var> character. If two numbers are given, they
are supposed to form the day and month of the current year. If only
one number is given, it is supposed to represent the day of the
current month. (This is <em>not</em> supported in Delphi)
</p>
<p>
The order of the digits (y/m/d, m/d/y, d/m/y) is determined from the
<var>ShortDateFormat</var> variable.
</p>
<p>
The function returns <var>True</var> if the string contained a valid date indication,
<var>False</var> otherwise.
</p>
</descr>
<seealso>
<link id="StrToDate"/>
<link id="StrToTime"/>
<link id="TryStrToTime"/>
<link id="TryStrToDateTime"/>
<link id="DateToStr"/>
<link id="TimeToStr"/>
</seealso>
</element>

<!-- function Visibility: default -->
<element name="TryStrToTime">
<short>Try to convert a string with a time indication to a TDateTime value</short>
<descr>
<p>
<var>TryStrToTime</var> tries to convert the string <var>S</var> to a <var>TDateTime</var> time
value, and stores the result in <var>Value</var>. The time must consist of 1 to 4 digits, 
separated by the <var>TimeSeparator</var> character. If two numbers are given, they
are supposed to form the hour and minutes.
</p>
<p>
The function returns <var>True</var> if the string contained a valid time indication,
<var>False</var> otherwise.
</p>
</descr>
<seealso>
<link id="TryStrToDate"/>
<link id="TryStrToDateTime"/>
<link id="StrToDate"/>
<link id="StrToTime"/>
<link id="DateToStr"/>
<link id="TimeToStr"/>
</seealso>
</element>

<!-- function Visibility: default -->
<element name="TryStrToDateTime">
<short>Try to convert a string with date/time indication to a TDateTime value</short>
<descr>
<p>
<var>TryStrToDateTime</var> tries to convert the string <var>S</var> to a <var>TDateTime</var> date and time
value, and stores the result in <var>Value</var>. The date must consist of 1 to three digits, separated by the
<var>DateSeparator</var> character. If two numbers are given, they
are supposed to form the day and month of the current year. If only
one number is given, it is supposed to represent the day of the
current month (This is <em>not</em> supported in Delphi).
The time must consist of 1 to 4 digits, 
separated by the <var>TimeSeparator</var> character. If two numbers are given, they
are supposed to form the hour and minutes.
</p>
<p>
The function returns <var>True</var> if the string contained a valid date and time indication,
<var>False</var> otherwise.
</p>
</descr>
<seealso>
<link id="TryStrToDate"/>
<link id="TryStrToTime"/>
<link id="StrToDateTime"/>
<link id="StrToTime"/>
<link id="DateToStr"/>
<link id="TimeToStr"/>
</seealso>
</element>

<!-- function Visibility: default -->
<element name="CurrentYear">
<short>Return the current year</short>
<descr>
<var>CurrentYear</var> returns the current year as a 4-digit number.
</descr>
<errors>
None.
</errors>
<seealso>
<link id="Date"/>
<link id="Time"/>
<link id="Now"/>
</seealso>
</element>

<!-- function Visibility: default -->
<element name="StrToQWord">
<short>Convert a string to a QWord.</short>
<descr>
<var>TryStrToQWord</var> converts the string <var>S</var> to a valid QWord (unsigned 64-bit) value, 
and returns the result.
</descr>
<errors>
If the string <var>S</var> does not contain a valid QWord value, a <link id="EConvertError"/> exception is raised.
</errors>
<seealso>
<link id="TryStrToQWord"/>
<link id="StrToQWordDef"/>
<link id="StrToInt64"/>
<link id="StrToInt"/>
</seealso>
</element>

<!-- function Visibility: default -->
<element name="TryStrToQWord">
<short>Try to convert a string to a QWord value, and report on success</short>
<descr>
<var>TryStrToQWord</var> tries to convert the string <var>S</var> to a valid QWord (unsigned 64-bit) value, 
and stores the result in <var>I</var>. If the conversion fails, the function returns <var>False</var>, 
else it returns <var>True</var>.
</descr>
<seealso>
<link id="StrToQWord"/>
<link id="StrToQWordDef"/>
<link id="TryStrToInt64"/>
<link id="TryStrToInt"/>
</seealso>
</element>

<element name="TryStrQWord">
<short>Alias for <link id="#rtl.sysutils.trystrtoqword">TryStrToQWord</link>.</short>
<descr>
<var>TryStrToQWord</var> is a backward-compatibility alias for <link id="TryStrToQWord"/>.
</descr>
<seealso>
<link id="TryStrToQWord"/>
</seealso>
</element>

<!-- function Visibility: default -->
<element name="StrToQWordDef">
<short>Try to convert a string to a QWord, returning a default value in case of failure.</short>
<descr>
<var>StrToQWordDef</var> tries to convert the string <var>S</var> to a valid QWord (unsigned 64-bit) value,
and returns the result. If the conversion fails, the function returns the value passed in <var>Def</var>.
</descr>
<seealso>
<link id="StrToQWord"/>
<link id="TryStrToQWord"/>
<link id="StrToInt64Def"/>
<link id="StrToIntDef"/>
</seealso>
</element>

<!-- function Visibility: default -->
<element name="CurrToStrF">
<short>Format a currency to a string</short>
<descr>
<var>CurrToStrF</var> formats the currency <var>Value</var> according to the value in <var>Format</var>, using 
the number of digits specified in <var>Digits</var>, and a precision of 19. This function simply calls <link id="FloatToStrF"/>.
</descr>
<seealso>
<link id="FloatToStrF"/>
</seealso>
</element>

<element name="SScanf">
<short>Scan a string for substrings and return the substrings</short>
<descr>
<p>
<var>SSCanF</var> scans the string <var>S</var> for the elements specified in <var>Fmt</var>, 
and returns the elements in the pointers in <var>Pointers</var>. The <var>Fmt</var> can 
contain placeholders of the form <var>%X</var> where <var>X</var> can be one of the 
following characters:
</p>
<dl>
<dt>d</dt><dd>Placeholder for a decimal number.</dd>
<dt>f</dt><dd>Placeholder for a floating point number (an extended)</dd>
<dt>s</dt><dd>Placeholder for a string of arbitrary length.</dd>
<dt>c</dt><dd>Placeholder for a single character</dd>
</dl>
<p>
The <var>Pointers</var> array contains a list of pointers, each pointer should point to a 
memory location of a type that corresponds to the type of placeholder in that position:
</p>
<dl>
<dt>d</dt><dd>A pointer to an integer.</dd>
<dt>f</dt><dd>A pointer to an extended.</dd>
<dt>s</dt><dd>A pointer to an ansistring.</dd>
<dt>c</dt><dd>A pointer to a single character.</dd>
</dl>
</descr>
<errors>
No error checking is performed on the type of the memory location.
</errors>
<seealso>
<link id="Format"/>
</seealso>
</element>

<!-- pointer type Visibility: default -->
<element name="PSysCharSet">
<short>Pointer to <link id="#rtl.sysutils.TSysCharSet">TSysCharSet</link> type.</short>
</element>

<!-- variable Visibility: default -->
<element name="LongRec.Lo">
<short>Lower byte</short>
</element>

<!-- variable Visibility: default -->
<element name="LongRec.Hi">
<short>Upper byte</short>
</element>

<!-- variable Visibility: default -->
<element name="LongRec.Bytes">
<short>Array of 4 bytes.</short>
</element>

<!-- variable Visibility: default -->
<element name="Int64Rec.Lo">
<short>Lower integer</short>
</element>

<!-- variable Visibility: default -->
<element name="Int64Rec.Hi">
<short>High integer</short>
</element>

<!-- variable Visibility: default -->
<element name="Int64Rec.Words">
<short>Array of 4 words</short>
</element>

<!-- variable Visibility: default -->
<element name="Int64Rec.Bytes">
<short>Array of 8 bytes</short>
</element>

<!-- object Visibility: default -->
<element name="EBusError">
<short>Bus error exception</short>
<descr>
<var>EBusError</var> is raised in case of a bus error.
</descr>
</element>

<!-- object Visibility: default -->
<element name="EFormatError">
<short>Formatting error exception</short>
<descr>
<var>EformatError</var> is raised in case of an error in one of the various <link id="Format"/> functions.
</descr>
<seealso>
<link id="Format"/>
</seealso>
</element>

<!-- function Visibility: default -->
<element name="ExceptFrameCount">
<short>Number of frames included in an exception backtrace</short>
<descr>
<var>ExceptFrameCount</var> returns the number of frames that are included in an exception
stack frame backtrace. The function returns 0 if there is currently no exception being handled.
(i.e. it only makes sense to call this function in an <var>finally..end</var> or 
<var>except..end</var> block.
</descr>
<errors>
None.
</errors>
<seealso>
<link id="ExceptFrames"/>
<link id="ExceptAddr"/>
<link id="ExceptObject"/>
<link id="#rtl.system.ExceptProc"/>
</seealso>
</element>

<!-- function Visibility: default -->
<element name="ExceptFrames">
<short>Return the current exception stack frames</short>
<descr>
<var>ExceptFrames</var> returns the current list frames on the exception stack. 
If there is no exception in progress, <var>Nil</var> is returned.
</descr>
<seealso>
<link id="ExceptFrameCount"/>
<link id="ExceptAddr"/>
<link id="ExceptObject"/>
<link id="#rtl.system.ExceptProc"/>
</seealso>
</element>

<!-- function type Visibility: default -->
<element name="TCreateGUIDFunc">
<short>Callback prototype to create GUIDs</short>
<descr>
<var>TCreateGUIDFunc</var> is the prototype for a GUID creation handler. 
On return, the <var>GUID</var> argument should contain a new (unique) GUID.
The return value of the function should be zero for success, nonzero for failure.
</descr>
<seealso>
<link id="OnCreateGUID"/>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="OnCreateGUID">
<short>Callback to create GUID values</short>
<descr>
<var>OnCreateGUID</var> can be set to point to a custom routine that creates GUID 
values. If set, the <link id="CreateGUID"/> function will use it to obtain a GUID 
value. If it is not set, a default implementation using random values will be used
to create the unique value. The function should return a valid GUID in the 
<var>GUID</var> parameter, and should return zero in case of success.
</descr>
<seealso>
<link id="CreateGUID"/>
<link id="TCreateGUIDFunc"/>
</seealso>
</element>

<!-- function Visibility: default -->
<element name="CreateGUID">
<short>Create a new GUID</short>
<descr>
<p>
<var>CreateGUID</var> can be called to create a new GUID (Globally Unique Identifier) value.
The function returns the new <var>GUID</var> value in <var>GUID</var> and returns zero in 
case the GUID was created succesfully. If no GUID was created, a nonzero error code is returned.
</p>
<p>
The default mechanism for creating a new GUID is system dependent. If operating system support 
is available, it is used. If none is available, a default implementation using random numbers 
is used.
</p>
<p>
The <var>OnCreateGUID</var> callback can be set to hook a custom mechanism behind the 
<var>CreateGUID</var> function. This can be used to lt the GUID be created by an 
external GUID creation library. 
</p>
</descr>
<errors>
On error, a nonzero return value is returned.
</errors>
<seealso>
<link id="GUIDCase"/>
<link id="IsEqualGUID"/>
<link id="StringToGUID"/>
<link id="TryStringToGUID"/>
<link id="GUIDToString"/>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TextRec.LineEnd">
<short>Line ending used when writing to this text file.</short>
</element>

<!-- constant Visibility: default -->
<element name="MAX_PATH">
<short>Maximum length of a fully qualified filename (including path)</short>
<descr>
<var>MAX_PATH</var> is the maximum number of characters that a filename (including path) 
can contain on the current operating system.
</descr>
</element>

<!-- constant Visibility: default -->
<element name="ListSeparator">
<short>Separator character for lists</short>
<descr>
<var>ListSeparator</var> is the character used in lists of values. It is locale dependent.
</descr>
<seealso>
<link id="DecimalSeparator"/>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TSearchRec.Mode">
<short>Unix File mode. Only used on Unix systems.</short>
</element>

<!-- variable Visibility: default -->
<element name="TSearchRec.PathOnly">
<short>Path component of the file</short>
</element>

<!-- constant Visibility: default -->
<element name="faSymLink">
<short>File is a symlink</short>
<descr>
<var>faSymLink</var> means the file (as returned e.g. by <link id="FindFirst"/>/<link id="FindNext"/>), is a symlink.
It's ignored under Windows.
</descr>
<seealso>
<link id="FindFirst"/>
<link id="FindNext"/>
<link id="TSearchRec"/>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="feInvalidHandle">
<short>FileOpen error value</short>
<descr>
<var>feInvalidHandle</var> is the return value of <link id="FileOpen"/> in case of an error.
</descr>
<seealso>
<link id="FileOpen"/>
</seealso>
</element>

<!-- object Visibility: default -->
<element name="IReadWriteSync">
<short>Read/Write synchronizer</short>
<descr>
<var>IReadWriteSync</var> is an interface for synchronizing read/write operations. 
Writers are always guaranteed to have exclusive access: readers may or may not have 
simultaneous access, depending on the implementation.
</descr>
</element>

<!-- procedure Visibility: default -->
<element name="IReadWriteSync.BeginRead">
<short>Start a read operation.</short>
<descr>
<p>
<var>BeginRead</var> indicates that a read operation is about to be started. 
If a write operation is in progress, then the call will block untill the write 
operation finished. Depending on the implementation the call may also block if
another read operation is in progress.
</p>
<p>
After <var>BeginRead</var>, any write operation started with 
<link id="IReadWriteSync.BeginWrite">BeginWrite</link> will block until
<link id="IReadWriteSync.EndRead">EndRead</link> is called.
</p>
</descr>
<seealso>
<link id="IReadWriteSync.EndRead"/>
<link id="IReadWriteSync.BeginWrite"/>
<link id="IReadWriteSync.EndWrite"/>
</seealso>
</element>

<!-- procedure Visibility: default -->
<element name="IReadWriteSync.EndRead">
<short>End a read operation</short>
<descr>
<var>EndRead</var> signals the end of a read operation. 
If there was any blocked write operation, that will be unblocked by a call to <var>EndRead</var>.
</descr>
<seealso>
<link id="IReadWriteSync.BeginRead"/>
<link id="IReadWriteSync.BeginWrite"/>
<link id="IReadWriteSync.EndWrite"/>
</seealso>
</element>

<!-- function Visibility: default -->
<element name="IReadWriteSync.BeginWrite">
<short>Start a write operation.</short>
<descr>
<var>BeginWrite</var> signals the begin of a write operation. 
This call will block if any other read or write operation is currently in progress. 
It will resumt only after all other read or write operations have finished.
</descr>
<seealso>
<link id="IReadWriteSync.EndRead"/>
<link id="IReadWriteSync.EndWrite"/>
<link id="IReadWriteSync.BeginRead"/>
</seealso>
</element>

<!-- procedure Visibility: default -->
<element name="IReadWriteSync.EndWrite">
<short>End a write operation.</short>
<descr>
<var>EndWrite</var> signals the end of a write operation. 
After the call to <var>EndWrite</var> any other read or write operations can start.
</descr>
<seealso>
<link id="IReadWriteSync.EndRead"/>
<link id="IReadWriteSync.EndWrite"/>
<link id="IReadWriteSync.BeginRead"/>
</seealso>
</element>

<!-- object Visibility: default -->
<element name="TMultiReadExclusiveWriteSynchronizer">
<short>Standard implementation of a <link id="#rtl.sysutils.IReadWriteSync">IReadWriteSync</link> interface</short>
<descr>
<var>TMultiReadExclusiveWriteSynchronizer</var> is a default implementation of the
<link id="IReadWriteSync"/> interface. It uses a single mutex to protect access to the 
read/write resource, resulting in a single thread having access to the resource.
</descr>
<seealso>
<link id="IReadWriteSync"/>
</seealso>
</element>

<!-- constructor Visibility: public -->
<element name="TMultiReadExclusiveWriteSynchronizer.Create">
<short>Create a new instance of the <var>TMultiReadExclusiveWriteSynchronizer</var> class</short>
<descr>
<var>Create</var> creates a new instance of <var>TMultiReadExclusiveWriteSynchronizer</var>. It
initializes a <var>TRTLCriticalSection</var>.
</descr>
<errors>
None.
</errors>
<seealso>
<link id="#rtl.system.TRTLCriticalSection">TRTLCriticalSection</link>
</seealso>
</element>

<!-- destructor Visibility: public -->
<element name="TMultiReadExclusiveWriteSynchronizer.Destroy">
<short>Destroys the <var>TMultiReadExclusiveWriteSynchronizer</var> instance</short>
<descr>
<var>Create</var> destroys the instance of <var>TMultiReadExclusiveWriteSynchronizer</var>. 
It frees the <var>TRTLCriticalSection</var> it initialized, and calls the inherited destructor.
</descr>
<errors>
None.
</errors>
<seealso>
<link id="#rtl.system.TRTLCriticalSection">TRTLCriticalSection</link>
</seealso>
</element>

<!-- function Visibility: public -->
<element name="TMultiReadExclusiveWriteSynchronizer.Beginwrite">
<short>Request write access to the resource.</short>
<descr>
<var>Beginwrite</var> is the implementation of <var>IReadWriteSync.BeginWrite</var>. 
It simply enters the critical section, and returns <var>True</var>.
</descr>
<errors>
None.
</errors>
<seealso>
<link id="IReadWriteSync.BeginWrite"/>
<link id="TMultiReadExclusiveWriteSynchronizer.EndWrite">EndWrite</link>
</seealso>
</element>

<!-- procedure Visibility: public -->
<element name="TMultiReadExclusiveWriteSynchronizer.Endwrite">
<short>Release write access to the resource</short>
<descr>
<var>Beginwrite</var> is the implementation of <var>IReadWriteSync.EndWrite</var>.
It simply leaves the critical section.
</descr>
<errors>
None.
</errors>
<seealso>
<link id="IReadWriteSync.EndWrite"/>
<link id="TMultiReadExclusiveWriteSynchronizer.BeginWrite">BeginWrite</link>
</seealso>
</element>

<!-- procedure Visibility: public -->
<element name="TMultiReadExclusiveWriteSynchronizer.BeginRead">
<short>Request read access to the resource</short>
<descr>
<var>BeginRead</var> is the implementation of <var>IReadWriteSync.BeginRead</var>.
It simply attempts to enter the critical section.
</descr>
<errors>
None.
</errors>
<seealso>
<link id="IReadWriteSync.BeginRead"/>
<link id="TMultiReadExclusiveWriteSynchronizer.EndRead">EndRead</link>
</seealso>
</element>

<!-- procedure Visibility: public -->
<element name="TMultiReadExclusiveWriteSynchronizer.Endread">
<short>Release read access to the resource</short>
<descr>
<var>EndRead</var> is the implementation of <var>IReadWriteSync.EndRead</var>.
It simply leaves the critical section.
</descr>
<errors>
None.
</errors>
<seealso>
<link id="IReadWriteSync.EndRead"/>
<link id="TMultiReadExclusiveWriteSynchronizer.BeginRead">BeginRead</link>
</seealso>
</element>

<!-- function Visibility: default -->
<element name="Supports">
<short>Check whether a class or given interface supports an interface</short>
<descr>
<var>Supports</var> checks whether <var>Instance</var> supports the interface identified by
<var>IID</var>. It returns <var>True</var> if it is supported, <var>False</var>. 
Optionally, a pointer to the interface is returned to <var>Intf</var>.
</descr>
<errors>
None.
</errors>
<seealso>
<link id="StringToGUID"/>
</seealso>
</element>

<!-- function Visibility: default -->
<element name="StringToGUID">
<short>Convert a string to a native <var>TGUID</var> type.</short>
<descr>
<p>
<var>StringToGUID</var> converts the string <var>S</var> to a valid GUID. The string <var>S</var> should 
be of the form
</p>
<pre>
{XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX}
</pre>
<p>
Where each X is a hexadecimal digit. The dashes and braces are required.
</p>
</descr>
<errors>
In case <var>S</var> contains an invalid GUID representation, a <link id="EConvertError"/> exception is raised.
</errors>
<seealso>
<link id="Supports"/>
<link id="#rtl.system.TGUID"/>
<link id="GUIDToString"/>
<link id="IsEqualGuid"/>
</seealso>
</element>

<!-- function Visibility: default -->
<element name="GUIDToString">
<short>Convert a <var>TGUID</var> to a string representation.</short>
<descr>
<p>
<var>GUIDToString</var> converts the GUID identifier in <var>GUID</var> to a string representation in the form
</p>
<pre>
{XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX}
</pre>
<p>
Where each <var>X</var> is a hexadecimal digit.
</p>
</descr>
<errors>
None.
</errors>
<seealso>
<link id="Supports"/>
<link id="#rtl.system.TGUID"/>
<link id="StringToGUID"/>
<link id="IsEqualGuid"/>
</seealso>
</element>

<!-- function Visibility: default -->
<element name="IsEqualGUID">
<short>Check whether two <var>TGUID</var> variables are equal.</short>
<descr>
<var>IsEqualGUID</var> checks whether <var>guid1</var> and <var>guid2</var> are equal, 
and returns <var>True</var> if this is the case, or <var>False</var> otherwise.
</descr>
<errors>
</errors>
<seealso>
<link id="Supports"/>
<link id="#rtl.system.TGUID"/>
<link id="StringToGUID"/>
<link id="GuidToString"/>
</seealso>
</element>

<!-- function Visibility: default -->
<element name="SafeLoadLibrary">
<short>Load a library safely</short>
<descr>
<var>SafeLoadLibrary</var> saves and restores some registers before and 
after issuing a call to <var>LoadLibrary</var>.
</descr>
<errors>
None.
</errors>
</element>

<!-- constant Visibility: default -->
<element name="RTL_SIGINT">
<short>INTERRUPT signal number (Unix only)</short>
</element>

<!-- constant Visibility: default -->
<element name="RTL_SIGFPE">
<short>Floating Point Error signal number (Unix only)</short>
</element>

<!-- constant Visibility: default -->
<element name="RTL_SIGSEGV">
<short>Segmentation fault signal number (Unix only)</short>
</element>

<!-- constant Visibility: default -->
<element name="RTL_SIGILL">
<short>Illegal instruction signal number (Unix only)</short>
</element>

<!-- constant Visibility: default -->
<element name="RTL_SIGBUS">
<short>Bus error signal number (Unix only)</short>
</element>

<!-- constant Visibility: default -->
<element name="RTL_SIGQUIT">
<short>QUIT signal number (Unix only)</short>
</element>

<!-- constant Visibility: default -->
<element name="RTL_SIGLAST">
<short>Last signal number (Unix only)</short>
</element>

<!-- constant Visibility: default -->
<element name="RTL_SIGDEFAULT">
<short>Default signal handler (Unix only)</short>
</element>

<!-- enumeration type Visibility: default -->
<element name="TSignalState">
<short>State of the signal handler (unix only)</short>
<descr>
<var>TSignalState</var> indicates the state of a signal handler in a unix system for a particular signal.
</descr>
<seealso>
<link id="InquireSignal"/>
</seealso>
</element>

<!-- enumeration value Visibility: default -->
<element name="TSignalState.ssNotHooked">
<short>No signal handler is set for the signal.</short>
</element>

<!-- enumeration value Visibility: default -->
<element name="TSignalState.ssHooked">
<short>A signal handler is set by the RTL code for the signal.</short>
</element>

<!-- enumeration value Visibility: default -->
<element name="TSignalState.ssOverridden">
<short>A signal handler was set for the signal by third-party code.</short>
</element>

<!-- function Visibility: default -->
<element name="InquireSignal">
<short>Check whether a signal handler is set (unix only)</short>
<descr>
<p>
<var>RtlSigNum</var> will check whether the signal <var>RtlSigNum</var> is
being handled, and by whom. It returns a <var>TSignalState</var> result to
report the state of the signal, which can be one of the following values:
</p>
<dl>
<dt>ssNotHooked</dt><dd><printshort id="TSignalState.ssNotHooked"/></dd>
<dt>ssHooked</dt><dd><printshort id="TSignalState.ssHooked"/></dd>
<dt>ssOverridden</dt><dd><printshort id="TSignalState.ssOverridden"/></dd>
</dl>
<p>
This routine works by resetting the signal handlers, so it is risky to call.
</p>
</descr>
</element>

<!-- procedure Visibility: default -->
<element name="AbandonSignalHandler">
<short>Abandon the signal handler</short>
<descr>
<var>AbandonSignalHandler</var> tells the system routines that they should
not re-install the signal handler for signal <var>RtlSigNum</var> under any 
circumstances. Normally, signal handlers are re-set when they are called. 
If <var>AbandonSignalHandler</var> has been called for a signal that is 
handled by the system code, the signal will not be re-set again.
</descr>
</element>

<!-- procedure Visibility: default -->
<element name="HookSignal">
<short>Hook a specified signal</short>
<descr>
<var>HookSignal</var> installs the RTL default signal handler for signal
<var>RtlSigNum</var>. It does not check whether the signal is already
handled, and should therefor only be called if <var>InquireSignal</var>
returns <var>ssNotHooked</var>.
</descr>
</element>

<!-- procedure Visibility: default -->
<element name="UnhookSignal">
<short>UnHook a specified signal</short>
<descr>
<var>UnHookSignal</var> de-installs the RTL default signal handler for signal
<var>RtlSigNum</var>. If <var>OnlyIfHooked</var> is <var>True</var> then
<var>UnhookSignal</var> will first check if the signal was hooked by the RTL
routines, and has not been overridden since.
</descr>
</element>

<!-- record type Visibility: default -->
<element name="TFormatSettings">
<short>Record with all the strings that determine formatting</short>
<descr>
<var>TFormatSettings</var> is a record that contains a copy of all
variables which determine formatting in the various string formatting routines.
It is used to pass local copies of these values to the various formatting 
routines in a thread-safe way.
</descr>
<seealso>
<link id="Format"/>
<link id="FormatDateTime"/>
<link id="FormatFloat"/>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TFormatSettings.CurrencyFormat">
<short>Currency format string</short>
</element>

<!-- variable Visibility: default -->
<element name="TFormatSettings.NegCurrFormat">
<short>Negative currency format string</short>
</element>

<!-- variable Visibility: default -->
<element name="TFormatSettings.ThousandSeparator">
<short>Thousands separator character</short>
</element>

<!-- variable Visibility: default -->
<element name="TFormatSettings.DecimalSeparator">
<short>Decimal separator character</short>
</element>

<!-- variable Visibility: default -->
<element name="TFormatSettings.CurrencyDecimals">
<short>Currency decimals</short>
</element>

<!-- variable Visibility: default -->
<element name="TFormatSettings.DateSeparator">
<short>Date separator character</short>
</element>

<!-- variable Visibility: default -->
<element name="TFormatSettings.TimeSeparator">
<short>Time separator character</short>
</element>

<!-- variable Visibility: default -->
<element name="TFormatSettings.ListSeparator">
<short>List separator character</short>
</element>

<!-- variable Visibility: default -->
<element name="TFormatSettings.CurrencyString">
<short>Currency string</short>
</element>

<!-- variable Visibility: default -->
<element name="TFormatSettings.ShortDateFormat">
<short>Short date format string</short>
</element>

<!-- variable Visibility: default -->
<element name="TFormatSettings.LongDateFormat">
<short>Long Date Format string</short>
</element>

<!-- variable Visibility: default -->
<element name="TFormatSettings.TimeAMString">
<short>AM time indicator string</short>
</element>

<!-- variable Visibility: default -->
<element name="TFormatSettings.TimePMString">
<short>PM time indicator string</short>
</element>

<!-- variable Visibility: default -->
<element name="TFormatSettings.ShortTimeFormat">
<short>Short time format string</short>
</element>

<!-- variable Visibility: default -->
<element name="TFormatSettings.LongTimeFormat">
<short>Long time format string</short>
</element>

<!-- variable Visibility: default -->
<element name="TFormatSettings.ShortMonthNames">
<short>Array with short month names</short>
</element>

<!-- variable Visibility: default -->
<element name="TFormatSettings.LongMonthNames">
<short>Array with long month names</short>
</element>

<!-- variable Visibility: default -->
<element name="TFormatSettings.ShortDayNames">
<short>Array with short day names</short>
</element>

<!-- variable Visibility: default -->
<element name="TFormatSettings.LongDayNames">
<short>Long day names</short>
</element>

<!-- variable Visibility: default -->
<element name="TFormatSettings.TwoDigitYearCenturyWindow">
<short>Value for 2 digit year century window</short>
</element>

<!-- unresolved type reference Visibility: default -->
<element name="Unix">
<short>Unix calls (unix implementation only)</short>
</element>

<!-- unresolved type reference Visibility: default -->
<element name="errors">
<short>Error descriptions</short>
</element>

<!-- unresolved type reference Visibility: default -->
<element name="sysconst">
<short>Resource strings</short>
</element>

<!-- unresolved type reference Visibility: default -->
<element name="Unixtype">
<short>Basic unix types</short>
</element>

<!-- function Visibility: default -->
<element name="ComposeDateTime">
<short>Add a date and time</short>
<descr>
<var>ComposeDateTime</var> correctly adds <var>Date</var> and <var>Time</var>, also for dates before 1899-12-31. For dates after this date, 
it is just the mathematical addition.
</descr>
<errors>
None.
</errors>
<seealso>
<link id="#rtl.dateutils.EncodeDateTime"/>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TSysLocale.DefaultLCID">
<short>Default locale ID</short>
</element>

<!-- variable Visibility: default -->
<element name="TSysLocale.PriLangID">
<short>Primary language ID</short>
</element>

<!-- variable Visibility: default -->
<element name="TSysLocale.SubLangID">
<short>Sub-language ID</short>
</element>

<!-- array type Visibility: default -->
<element name="TMonthNameArray">
<short>Array type for array of month variables</short>
<descr>
<var>TMonthNameArray</var> is used in the month long and short name arrays.
</descr>
<seealso>
<link id="DefaultFormatSettings"/>
<link id="ShortMonthNames"/>
<link id="LongMonthNames"/>
</seealso>
</element>

<!-- array type Visibility: default -->
<element name="TWeekNameArray">
<short>Array of 7 Strings for week day names</short>
<descr>
<var>TWeekNameArray</var> is used in the day long and short name arrays.
</descr>
<seealso>
<link id="DefaultFormatSettings"/>
<link id="ShortDayNames"/>
<link id="LongDayNames"/>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="DefaultFormatSettings">
<short>Storage for default settings</short>
<descr>
<p>
<var>DefaultFormatSettings</var> contains the default settings for all
type of formatting constants. If no thread-specific values are specified
when a formatting function is called, this record is used as a default.
</p>
<p>
All other formatting constants refer to the fields of this variable using 
absolute addressing.
</p>
</descr>
<seealso>
<link id="ShortMonthNames"/>
<link id="LongMonthNames"/>
<link id="ShortDayNames"/>
<link id="LongDayNames"/>
</seealso>
</element>

<!-- function Visibility: default -->
<element name="StrToDateDef">
<short>Convert string to date, returning a default value</short>
<descr>
<var>StrToDateDef</var> tries to convert the string <var>S</var> to a valid
<var>TDateTime</var> date value, and returns <var>DefValue</var> if <var>S</var>
does not contain a valid date indication.
</descr>
<errors>
None.
</errors>
<seealso>
<link id="StrToDate"/>
<link id="TryStrToDate"/>
<link id="StrToTimeDef"/>
</seealso>
</element>

<!-- function Visibility: default -->
<element name="StrToTimeDef">
<short>Convert string to time, returning a default value</short>
<descr>
<var>StrToTimeDef</var> tries to convert the string <var>S</var> to a valid
<var>TDateTime</var> time value, and returns <var>DefValue</var> if <var>S</var>
does not contain a valid time indication.
</descr>
<errors>
None.
</errors>
<seealso>
<link id="StrToTime"/>
<link id="TryStrToTime"/>
<link id="StrToDateDef"/>
</seealso>
</element>

<!-- function Visibility: default -->
<element name="StrToDateTimeDef">
<short>Convert string to date/time, returning a default value</short>
<descr>
<var>StrToDateTimeDef</var> tries to convert the string <var>S</var> to a valid
<var>TDateTime</var> date and time value, and returns <var>DefValue</var> if
<var>S</var> does not contain a valid date-time indication.
</descr>
<errors>
None.
</errors>
<seealso>
<link id="StrToTimeDef"/>
<link id="StrToDateDef"/>
<link id="TryStrToDateTime"/>
<link id="StrToDateTime"/>
</seealso>
</element>

<!-- procedure Visibility: default -->
<element name="ReplaceTime">
<short>Replace the time part</short>
<descr>
<var>ReplaceTime</var> replaces the time part in <var>dati</var> with <var>NewTime</var>.
The date part remains untouched.
</descr>
<errors>
</errors>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TrueBoolStrs">
<short><var>True</var> Strings used in <var>StrToBool</var> conversion</short>
<descr>
<var>TrueBoolStrs</var> contains the strings that will result in a 
<var>True</var> return value by <link id="StrToBool"/>.
</descr>
<seealso>
<link id="FalseBoolStrs"/>
<link id="StrToBool"/>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="FalseBoolStrs">
<short><var>False</var> Strings used in <var>StrToBool</var> conversion</short>
<descr>
<var>FalseBoolStrs</var> contains the strings that will result in a
<var>False</var> return value by <link id="StrToBool"/>.
</descr>
<seealso>
<link id="FalseBoolStrs"/>
<link id="StrToBool"/>
</seealso>
</element>

<!-- function Visibility: default -->
<element name="AnsiDequotedStr">
<short>Extract string without quotes</short>
<descr>
<var>AnsiDequotedStr</var> is, similar to <link id="AnsiExtractQuotedStr"/>, a method to extract a string 
that was quoted using <link id="AnsiQuotedStr"/>. The string <var>S</var> must start and end with the quote 
character <var>AQuote</var> (they will be removed from the result) and all double occurrences of the quote character
<var>AQuote</var> will be reduced to a single quote character.
</descr>
<errors>
If the string does not start and end with the quote character or has length less than 2, the original string is returned.
</errors>
<seealso>
<link id="AnsiExtractQuotedStr"/>
<link id="AnsiQuotedStr"/>
</seealso>
</element>

<!-- function Visibility: default -->
<element name="StrToBoolDef">
<short>Convert string to boolean value, returning default in case of error</short>
<descr>
<var>StrToBoolDef</var> tries to convert the string <var>S</var> to a
boolean value, and returns the boolean value in case of success. In case
<var>S</var> does not contain a valid boolean string, <var>Default</var> is
returned.
</descr>
<seealso>
<link id="StrToBool"/>
<link id="TryStrToBool"/>
</seealso>
</element>

<!-- function Visibility: default -->
<element name="TryStrToBool">
<short>Try to convert a string to a boolean value</short>
<descr>
<p>
<var>TryStrToBool</var> tries to convert the string <var>S</var> to a
boolean value, and returns this value in <var>Value</var>. In this case, the
function returns <var>True</var>. If <var>S</var> does not contain a valid 
boolean string, the function returns <var>False</var>, and the contents of 
<var>Value</var> is indetermined.
</p>
<p>
Valid boolean string constants are in the <link id="FalseBoolStrs"/> (for
<var>False</var> values) and <link id="TrueBoolStrs"/> (for <var>True</var>
values) variables.
</p>
</descr>
<seealso>
<link id="StrToBool"/>
<link id="StrToBoolDef"/>
</seealso>
</element>

<!-- function Visibility: default -->
<element name="VendorName">
<short>Returns the application vendor name.</short>
<descr>
<var>VendorName</var> returns the application vendor name. 
This function does not do anything by itself, but uses
the <link id="OnGetVendorName"/> callback to get the 
application vendor name.
</descr>
<errors>
If <link id="OnGetVendorName"/>  is not set, an empty string is returned.
</errors>
<seealso>
<link id="OnGetVendorName"/>
<link id="TGetVendorNameEvent"/>
</seealso>
</element>

<!-- function Visibility: default -->
<element name="GetUserDir">
<short>Returns the current user's home directory.</short>
<descr>
<p>
<var>GetUserDir</var> returns the home directory of the current user.
On Unix-like systems (that includes Mac OS X), this is the value of the
HOME environment variable. On Windows, this is the PROFILE special folder.
On all other platforms, the application installation directory is returned.
</p>
<p>
If non-empty, it contains a trailing path delimiter.
</p>
</descr>
<seealso>
<link id="GetAppConfigDir"/>
</seealso>
</element>

<!-- function type Visibility: default -->
<element name="TGetVendorNameEvent">
<short>Prototype for <var>OnGetVendorName</var> event.</short>
<descr>
<var>TGetVendorNameEvent</var> is the function prototype for the <link
id="OnGetVendorName"/> callback, used by the <link id="VendorName"/>
function.
</descr>
<seealso>
<link id="OnGetVendorName"/>
<link id="VendorName"/>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="OnGetVendorName">
<short>Callback for the <link id="#rtl.sysutils.VendorName">VendorName</link>
function.</short>
<descr>
<var>OnGetVendorName</var> is the callback used by the <link id="VendorName"/> function.
It should be set to a handler that returns the vendor of the application.
</descr>
<seealso>
<link id="TGetVendorNameEvent"/>
<link id="VendorName"/>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="JulianEpoch">
<short>Starting point of the Julian calendar</short>
</element>

<!-- constant Visibility: default -->
<element name="UnixEpoch">
<short>Starting point of the unix calendar (1/1/1970)</short>
</element>

<!-- procedure Visibility: default -->
<element name="IncAMonth">
<short>Increase a date with a certain amount of months</short>
<descr>
<p>
<var>IncAMonth</var> increases the date as specified by <var>Year</var>,
<var>Month</var>, <var>Day</var> with <var>NumberOfMonths</var>. It takes
care of the number of days in a month when calculating the result.
</p>
<p>
This function does the same as <link id="IncMonth"/>, but operates on an
already decoded date.
</p>
</descr>
<seealso>
<link id="IncMonth"/>
</seealso>
</element>

<!-- procedure Visibility: default -->
<element name="ReplaceDate">
<short>Replace the date part of a date/time stamp</short>
<descr>
<var>ReplaceDate</var> replaces the date part of <var>DateTime</var> with
<var>NewDate</var>. The time part is left unchanged.
</descr>
<seealso>
<link id="ReplaceTime"/>
</seealso>
</element>

<!-- function Visibility: default -->
<element name="StrNextChar">
<short>Returns a pointer to the location of the next empty character in a null-terminated string</short>
<descr>
<var>StrNextChar</var> returns a pointer to the null-character that terminates
the string <var>Str</var>
</descr>
<errors>
if <var>Str</var> is not properly terminated, an access violation may occur.
</errors>
</element>

<!-- function Visibility: default -->
<element name="ExtractShortPathName">
<short>Returns a 8.3 path name</short>
<descr>
<var>ExtractShortPathName</var> returns a 8.3 compliant filename that
represents the same file as <var>FileName</var>. On platforms other than
windows, this is <var>FileName</var> itself.
</descr>
<seealso>
<link id="ExtractFilePath"/>
<link id="ExtractFileName"/>
</seealso>
</element>

<!-- function Visibility: default -->
<element name="GetModuleName">
<short>Return the name of the current module</short>
<descr>
<p>
<var>GetModuleName</var> returns the name of the current module. On windows,
this is the name of the executable when executed in an executable, or the
name of the library when executed in a library.
</p>
<p>
On all other platforms, the result is always empty, since they provide no
such functionality.
</p>
</descr>
</element>

<!-- constant Visibility: default -->
<element name="pfExeModule">
<short>Package is an executable</short>
</element>

<!-- constant Visibility: default -->
<element name="pfNeverBuild">
<short>Never-build flag was specified when compiling package</short>
</element>

<!-- constant Visibility: default -->
<element name="pfDesignOnly">
<short>Package is a design-time only package</short>
</element>

<!-- constant Visibility: default -->
<element name="pfRunOnly">
<short>Package is a run-time only package</short>
</element>

<!-- constant Visibility: default -->
<element name="pfIgnoreDupUnits">
<short>Ignore duplicate units in package</short>
</element>

<!-- constant Visibility: default -->
<element name="pfPackageModule">
<short>Package is a real package (not exe)</short>
</element>

<!-- constant Visibility: default -->
<element name="pfModuleTypeMask">
<short>Mask for module type flags</short>
</element>

<!-- constant Visibility: default -->
<element name="pfV3Produced">
<short>Not used in Free Pascal.</short>
</element>

<!-- constant Visibility: default -->
<element name="pfProducerUndefined">
<short>Not used in Free Pascal.</short>
</element>

<!-- constant Visibility: default -->
<element name="pfBCB4Produced">
<short>Not used in Free Pascal.</short>
</element>

<!-- constant Visibility: default -->
<element name="pfDelphi4Produced">
<short>Not used in Free Pascal.</short>
</element>

<!-- constant Visibility: default -->
<element name="pfLibraryModule">
<short>Package is a library</short>
</element>

<!-- constant Visibility: default -->
<element name="pfProducerMask">
<short>Mask for producer flags</short>
</element>

<!-- constant Visibility: default -->
<element name="ufMainUnit">
<short>Unit is the main unit of the package</short>
</element>

<!-- constant Visibility: default -->
<element name="ufPackageUnit">
<short>Unit is a packaged unit (appeared in package contains list)</short>
</element>

<!-- constant Visibility: default -->
<element name="ufWeakUnit">
<short>Unit is a weak packaged unit</short>
</element>

<!-- constant Visibility: default -->
<element name="ufOrgWeakUnit">
<short>Unit is the original weak packaged unit</short>
</element>

<!-- constant Visibility: default -->
<element name="ufImplicitUnit">
<short>Unit was implicitly imported into package (did not appear in package contains list)</short>
</element>

<!-- constant Visibility: default -->
<element name="ufWeakPackageUnit">
<short>Weak (original or not) packaged unit</short>
</element>

<element name="ENoWideStringSupport">
<short>Exception raised if no widestring support is available in the executable</short>
<descr>
<var>ENoWideStringSupport</var> is the exception raised when a run-time 233
occurs, i.e. when widestring routines are called and the application does
not contain widestring support.
</descr>
</element>

<!-- procedure Visibility: public -->
<element name="EHeapMemoryError.FreeInstance">
<short>Free the exception instance</short>
<descr>
<var>FreeInstance</var> checks whether the exception instance may be freed prior to
calling the inherited <var>FreeInstance</var>. The exception is only freed
in case of normal program shutdown, if a heap error occurred, the exception
instance is not freed.
</descr>
</element>

<!-- function Visibility: default -->
<element name="ExeSearch">
<short>Search for an executable</short>
<descr>
<p>
<var>ExeSearch</var> searches for an executable <var>Name</var> in the list
of directories <var>DirList</var> (a list of directories, separator by
<link id="#rtl.system.PathSeparator">PathSeparator</link>. 
If the current OS also searches implicitly in the current working 
directory, the current directory is searched in the first place.
</p>
<p>
If the executable is found, then the full path of the executable is
returned. If it is not found, an empty string is returned.
</p>
<p>
No check is performed whether the found file is actually executable.
</p>
</descr>
<seealso>
<link id="FileSearch"/>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="GUID_NULL">
<short>NULL GUID constant</short>
</element>

<!-- function Visibility: default -->
<element name="TryStringToGUID">
<short>Try to transform a string to a GUID</short>
<descr>
<var>TryStringToGUID</var> tries to convert the string <var>S</var> to a TGUID
value, returned in <var>GUID</var>. It returns <var>True</var> if the
conversion succeeds, and <var>False</var> if the string  <var>S</var> does
not contain a valid GUID notation. The string <var>S</var> must be 38
characters long, must start with { and end on }, and contain a valid GUID
string (hex number grouped using 8-4-4-4-12 digits).
</descr>
<errors>
In case S does not contain a valid GUID number, <var>False</var> is returned.
</errors>
<seealso>
<link id="StringToGUID"/>
</seealso>
</element>

<!-- function Visibility: default -->
<element name="GuidCase">
<short>Return the index of a GUID in an array of GUID values</short>
<descr>
<var>GuidCase</var> returns the index of <var>GUID</var> in the array
<var>List</var>, where 0 denotes the first element in the list. If GUID is
not present in the list, -1 is returned.
</descr>
<seealso>
<link id="IsEqualGUID"/>
</seealso>
</element>

<!-- set type Visibility: default -->
<element name="TExecuteFlags">
<short>Flags for <var>ExecuteProcess</var></short>
<descr>
<var>TExecuteFlags</var> is a set of flags to influence the behaviour of the
<link id="ExecuteProcess"/> call.
</descr>
<seealso>
<link id="ExecuteProcess"/>
</seealso>
</element>

<!-- enumeration value Visibility: default -->
<element name="TExecuteFlags.ExecInheritsHandles">
<short>The new process inherits all (file) handles owned by the current
process</short>
</element>

<!-- enumeration type Visibility: default -->
<element name="TEventType">
<short>Log event type</short>
<descr>
<var>TEventType</var> is a type to be used by logging mechanisms (in
particular, the <var>TCustomApplication</var> and <var>TEventLog</var>
classes. It can be used to filter events, and write only certain types of
event to the event log.
</descr>
</element>

<!-- enumeration value Visibility: default -->
<element name="TEventType.etCustom">
<short>Custom log event, with application-specific meaning</short>
</element>

<!-- enumeration value Visibility: default -->
<element name="TEventType.etInfo">
<short>General information event message</short>
</element>

<!-- enumeration value Visibility: default -->
<element name="TEventType.etWarning">
<short>Warning message</short>
</element>

<!-- enumeration value Visibility: default -->
<element name="TEventType.etError">
<short>Error condition message</short>
</element>

<!-- enumeration value Visibility: default -->
<element name="TEventType.etDebug">
<short>Debug message.</short>
</element>

<element name="VendorName">
<short>Return Application vendor Name</short>
<descr>
<var>VendorName</var> returns the application vendor name. In order to set
the application vendor name, the <link id="OnGetVendorName"/> event must be
set, and an appropriate return value must be returned. The Vendor name is
used in <link id="GetAppConfigDir"/> and <link id="GetAppConfigFile"/> to
determine the configuration directory.
</descr>
<seealso>
<link id="OnGetVendorName"/>
<link id="GetAppConfigDir"/>
<link id="GetAppConfigFile"/>
</seealso>
</element>

<element name="OnGetVendorName">
<short>Vendor name callback</short>
<descr>
<var>OnGetVendorName</var> must be set in order for <link id="VendorName"/> to return a value.
It will then be used in <link id="GetAppConfigDir"/> and <link id="GetAppConfigFile"/> to  
determine the configuration directory.
Set it to a callback that returns the actual vendor name for the application.
</descr>
<seealso>
<link id="VendorName"/>
<link id="GetAppConfigDir"/>
<link id="GetAppConfigFile"/>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="FormatSettings">
<short>Alias for DefaultFormatSettings</short>
<descr>
<p>
<var>FormatSettings</var> is provided for Delphi compatibility, and refers
to the <link id="DefaultFormatSettings"/> variable.
</p>
</descr>
<seealso>
<link id="DefaultFormatSettings"/>
</seealso>
</element>

<!-- set type Visibility: default -->
<element name="TEventTypes">
<short>Set of <var>TEventType</var></short>
<descr>
<var>TEventTypes</var> is a set type of <var>TEventType</var>, defined for convenience.
It is used in the custom application classes for logging purposes.
</descr>
<seealso>
<link id="TEventType"/>
</seealso>
</element>

<!-- record type Visibility: default -->
<element name="Int128Rec">
<short>Record representing a 128-bit unsigned integer.</short>
<descr>
<var>Int128Rec</var> is a record defining a 128-bit integer. It is made up
of 2 QWords or 4 DWords or 8 words or 16 bytes.
</descr>
<seealso>
<link id="LongRec"/>
<link id="WordRec"/>
<link id="OWordRec"/>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="Int128Rec.Hi">
<short>High QWord of the <var>128-bit</var> integer</short>
</element>

<!-- variable Visibility: default -->
<element name="Int128Rec.Lo">
<short>Low QWord of the <var>128-bit</var> integer</short>
</element>

<!-- variable Visibility: default -->
<element name="Int128Rec.DWords">
<short>The <var>128-bit</var> integer as an array of 4 DWords</short>
</element>

<!-- variable Visibility: default -->
<element name="Int128Rec.Words">
<short>The <var>128-bit</var> integer as an array of 8 words</short>
</element>

<!-- variable Visibility: default -->
<element name="Int128Rec.Bytes">
<short>The <var>128-bit</var> integer as an array of 16 bytes</short>
</element>

<!-- record type Visibility: default -->
<element name="OWordRec">
<short>Identical to the <var>Int128Rec</var> record.</short>
<descr>
<var>OWordRec</var> is a record defining a 128-bit integer. It is made up
of 2 QWords or 4 DWords or 8 words or 16 bytes.
</descr>
<seealso>
<link id="LongRec"/>
<link id="WordRec"/>
<link id="Int128Rec"/>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="OWordRec.Hi">
<short>High QWord of the <var>128-bit</var> integer</short>
</element>

<!-- variable Visibility: default -->
<element name="OWordRec.Lo">
<short>Low QWord of the <var>128-bit</var> integer</short>
</element>

<!-- variable Visibility: default -->
<element name="OWordRec.DWords">
<short>The <var>128-bit</var> integer as an array of 4 DWords</short>
</element>

<!-- variable Visibility: default -->
<element name="OWordRec.Words">
<short>The <var>128-bit</var> integer as an array of 8 words</short>
</element>

<!-- variable Visibility: default -->
<element name="OWordRec.Bytes">
<short>The <var>128-bit</var> integer as an array of 16 bytes</short>
</element>

<!--
  ********************************************************************
    #rtl.sysutils.ENotImplemented
  ********************************************************************
-->

<!-- class Visibility: default -->
<element name="ENotImplemented">
<short>Exception raised in case of a not implemented feature.</short>
<descr>
<var>ENotImplemented</var> can be used to raise an exception when a
particular call had been defined, but was not implemented.
</descr>
</element>

<!-- procedure type Visibility: default -->
<element name="TBeepHandler">
<short>Beep handler prototype</short>
<descr>
<var>TBeepHandler</var> is the prototype used by the <link id="OnBeep"/>
handler. This in turn is called by the <link id="Beep"/> call to actually
implement the beep functionality. The call takes no arguments.
</descr>
<seealso>
<link id="OnBeep"/>
<link id="Beep"/>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="OnBeep">
<short>Event called by <var>Beep</var> to actually implement beep</short>
<descr>
<var>OnBeep</var> is calles whenever <var>Beep</var> is called.
<var>Beep</var> contains no implementation to actually produce a beep,
since there is no way to implement beep in a meaningful way for all possible
implementations.
</descr>
<seealso>
<link id="Beep"/>
</seealso>
</element>

<!-- function Visibility: default -->
<element name="IncludeLeadingPathDelimiter">
<short>Prepend a path delimiter if there is not already one.</short>
<descr>
<var>IncludeLeadingPathDelimiter</var> will insert a path delimiter
(<link id="#rtl.system.DirectorySeparator"/>) in the first position of <var>Path</var>, if there is not
already a directory separator at that position. It will return the resulting
string. If the path is empty, a <var>DirectorySeparator</var> character is
returned.
</descr>
<seealso>
<link id="IncludeTrailingPathDelimiter"/>
<link id="ExcludeLeadingPathDelimiter"/>
<link id="ExcludeTrailingPathDelimiter"/>
<link id="ConcatPaths"/>
</seealso>
<example file="sysutex/ex94"/>
</element>

<!-- function Visibility: default -->
<element name="ExcludeLeadingPathDelimiter">
<short>Strip the leading path delimiter of a path</short>
<descr>
<var>ExcludeLeadingPathDelimiter</var> will remove any path delimiter
on the first position of <var>Path</var> if there is one. if there is 
none (or the path is empty), it is left untouched.
</descr> 
<seealso>
<link id="IncludeTrailingPathDelimiter"/>
<link id="IncludeLeadingPathDelimiter"/>
<link id="ExcludeTrailingPathDelimiter"/> 
<link id="ConcatPaths"/>
</seealso>
<example file="sysutex/ex95"/>
</element>

<!-- function Visibility: default -->
<element name="ConcatPaths">
<short>Concatenate an array of paths to form a single path</short>
<descr>
<var>ConcatPaths</var> will concatenate the different path components in
<var>Paths</var> to a single path. It will insert directory separators
between the various components of the path as needed. No directory
separators will be added to the beginning or the end of the path, and none
will be taken away.
</descr>
<seealso>
<link id="IncludeTrailingPathDelimiter"/>
<link id="IncludeLeadingPathDelimiter"/> 
<link id="ExcludeTrailingPathDelimiter"/>
<link id="IncludeTrailingPathDelimiter"/>
</seealso>
<example file="sysutex/ex96"/>
</element>

<!-- enumeration type Visibility: default -->
<element name="TFileSearchOption">
<short>Options for the <var>FileSearch</var> call.</short>
<descr>
<var>TFileSearchOption</var> enumerates the options that can be 
used in the <var>FileSearch</var> call to control the behaviour 
of the search mechanism
</descr>
<seealso>
<link id="TFileSearchOptions"/>
<link id="FileSearch"/>
</seealso>
</element>

<!-- enumeration value Visibility: default -->
<element name="TFileSearchOption.sfoImplicitCurrentDir">
<short>Always search the current directory first, even if it is not specified.</short>
</element>

<!-- enumeration value Visibility: default -->
<element name="TFileSearchOption.sfoStripQuotes">
<short>Strip quotes from the components in the search path.</short>
</element>

<!-- set type Visibility: default -->
<element name="TFileSearchOptions">
<short>Set of <var>TFileSearchOption</var></short>
<descr>
<var>TFileSearchOptions</var> is a set of <link id="TFileSearchOption"/>
values, used in the <link id="FileSearch"/> call when searching for files.
</descr>
<seealso>
<link id="TFileSearchOption"/>
<link id="FileSearch"/>
</seealso>
</element>

<!--
  ********************************************************************
    #rtl.sysutils.TSimpleRWSync
  ********************************************************************
-->

<!-- class Visibility: default -->
<element name="TSimpleRWSync">
<short>Read/Write synchronizing object.</short>
<descr>
<p>
<var>TSimpleRWSync</var> implements a simple read/write locking mechanism.
It controls access to an object: only a single thread is allowed access to
an object for either read or write operations.
</p>
<p>
Access is controlled through a single critical section. 
</p>
</descr>
<seealso>
<link id="TMultiReadExclusiveWriteSynchronizer"/>
</seealso>
</element>

<!-- constructor Visibility: public -->
<element name="TSimpleRWSync.Create">
<short>Create a new instance of <var>TSimpleRWSync</var></short>
<descr>
<var>Create</var> allocates a new instance of <var>TSimpleRWSync</var> and
initializes the critical section for use in the various methods.
</descr>
<seealso>
<link id="TSimpleRWSync.Destroy"/>
</seealso>
</element>

<!-- destructor Visibility: public -->
<element name="TSimpleRWSync.Destroy">
<short>Removes the <var>TSimpleRWSync</var> instance from memory</short>
<descr>
<var>Destroy</var> releases the critical section and removes the
<var>TSimpleRWSync</var> instance from memory. 
</descr>
<seealso>
<link id="TSimpleRWSync.Create"/>
</seealso>
</element>

<!-- function Visibility: public -->
<element name="TSimpleRWSync.Beginwrite">
<short>Acquire a write lock</short>
<descr>
<var>Beginwrite</var> waits till all other threads have released their read
or write locks on the object, and then aquires a write lock on the object.
</descr>
<seealso>
<link id="TSimpleRWSync.BeginRead"/>
<link id="TSimpleRWSync.EndWrite"/>
</seealso>
</element>

<!-- procedure Visibility: public -->
<element name="TSimpleRWSync.Endwrite">
<short>Release the write lock</short>
<descr>
<var>EndWrite</var> releases the current threads lock on the object,
allowing other threads to acquire a read or write lock on the object.
</descr>
<seealso>
<link id="TSimpleRWSync.BeginWrite"/>
<link id="TSimpleRWSync.EndRead"/> 
</seealso>
</element>

<!-- procedure Visibility: public -->
<element name="TSimpleRWSync.Beginread">
<short>Acquire a read lock</short>
<descr>
<var>BeginRead</var> waits till all other threads have released their read
or write locks on the object, and then aquires a read lock on the object.
</descr>
<seealso>
<link id="TSimpleRWSync.BeginWrite"/>
<link id="TSimpleRWSync.EndRead"/> 
</seealso>
</element>

<!-- procedure Visibility: public -->
<element name="TSimpleRWSync.Endread">
<short>Release the read lock</short>
<descr>
<var>EndRead</var> releases the current threads read lock on the object,
allowing other threads to acquire a read or write lock on the object.
</descr>
<seealso>
<link id="TSimpleRWSync.BeginRead"/>
<link id="TSimpleRWSync.EndWrite"/>   
</seealso>
</element>

<!-- enumeration type Visibility: default -->
<element name="TFilenameCaseMatch">
<short>Type describing how ExpandFileNameCase found the resulting filename</short>
<descr>
<var>TFilenameCaseMatch</var> describes how <link id="ExpandFileNameCase"/> found the file.
</descr>
<seealso>
<link id="ExpandFileNameCase"/>
</seealso>
</element>

<!-- enumeration value Visibility: default -->
<element name="TFilenameCaseMatch.mkNone">
<short>No file was found</short>
</element>

<!-- enumeration value Visibility: default -->
<element name="TFilenameCaseMatch.mkExactMatch">
<short>The filename can be used to refer to a file on the system (findfirst will find it).</short>
</element>

<!-- enumeration value Visibility: default -->
<element name="TFilenameCaseMatch.mkSingleMatch">
<short>Exactly one match was found, but case didn't match.</short>
</element>

<!-- enumeration value Visibility: default -->
<element name="TFilenameCaseMatch.mkAmbiguous">
<short>More than one file will match the filename in a case-insensitive way</short>
</element>

<!-- array type Visibility: default -->
<element name="TBytes">
<short>Array of byte</short>
<descr>
<var>TBytes</var> defines a dynamic array of bytes. This can be used to
typecast e.g. strings to manipulate them byte for byte.
</descr>
<seealso>
<link id="BytesOf"/>
</seealso>
</element>


<!--
  ********************************************************************
    #rtl.sysutils.EArgumentException
  ********************************************************************
-->

<!-- class Visibility: default -->
<element name="EArgumentException">
<short>Invalid argument passed to a function</short>
<descr>
<var>EArgumentException</var> is raised by many character
conversion/handling routines to indicate an erroneous argument was passed to
the function (usually indicating an invalid codepoint in a unicode string).
</descr>
<errors>
None.
</errors>
<seealso>
<link id="EArgumentOutOfRangeException"/>
</seealso>
</element>

<!--
  ********************************************************************
    #rtl.sysutils.EArgumentOutOfRangeException
  ********************************************************************
-->

<!-- class Visibility: default -->
<element name="EArgumentOutOfRangeException">
<short>Argument out of valid range passed to a function</short>
<descr>
<var>EArgumentOutOfRangeException</var> is raised by many character
conversion/handling routines to indicate an erroneous argument was passed to
the function (indicating an invalid character index in a unicode string).
</descr>
<seealso>
<link id="EArgumentException"/>
</seealso>
</element>

<!-- class Visibility: default -->
<element name="EObjectCheck">
<short>A <var>Nil</var> object reference was encountered</short>
<descr>
<var>EObjectCheck</var> is raised when the <var>-CR</var> (check object references)
command-line option or <var>{$OBJECTCHECKS ON}</var> directive is in effect and a 
<var>Nil</var> reference to an object or class was encountered.
</descr>
<seealso>
<link id="EAccessViolation"/>
</seealso>
</element>

<!--
  ********************************************************************
    #rtl.sysutils.ENoConstructException
  ********************************************************************
-->

<!-- class Visibility: default -->
<element name="ENoConstructException">
<short>Error raised when instantiating a <var>TCharacter</var> class</short>
<descr>
<var>ENoConstructException</var> is the exception raised when an instance of
type <var>TCharacter</var> is being created. The TCharacter class only
contains static methods, no instances of this class should be instantiated.
</descr>
</element>

<!-- function Visibility: default -->
<element name="HashName">
<short>Calculate a hash from a null-terminated string</short>
<descr>
<var>HashName</var> calculates a hash value from a null terminated string.
The hash value is calculated in such a way that it returns the same value
for strings that only differ in case.
</descr>
</element>

<!-- function Visibility: default -->
<element name="BytesOf">
<short>Return the bytes in a string</short>
<descr>
<var>BytesOf</var> returns a copy of the string's content as an array of bytes.
For an empty string, zero bytes are returned (i.e.
<var>length(BytesOf(S))=0</var>).
</descr>
<errors>
</errors>
<seealso>
<link id="TBytes"/>
</seealso>
</element>

<!-- function Visibility: default -->
<element name="CharInSet">
<short>Check whether a char is in a set of characters</short>
<descr>
<p>
<var>CharInSet</var> returns <var>True</var> if <var>Ch</var> matches one of
the characters in <var>CSet</var>, it returns <var>False</var> otherwise. It
is equivalent to 
</p>
<code>
Ch in CSet
</code>
<p>
Later versions of this function may take WideChar into account.
</p>
</descr>
</element>

<!-- function Visibility: default -->
<element name="CodePageToCodePageName">
<short>Convert a numeric codepage identifier to a codepage name</short>
<descr>
<var>CodePageToCodePageName</var> returns the name of the codepage <var>cp</var>. 
</descr>
<errors>
If no matching codepage is found in the list of codepages, an empty string is returned.
</errors>
<seealso>
<link id="CodePageNameToCodePage"/>
</seealso>
</element>

<!-- function Visibility: default -->
<element name="CodePageNameToCodePage">
<short>Return a numeric identifier for the codepage.</short>
<descr>
<var>CodePageNameToCodePage</var> returns the code page number for the
specified codepage <var>cpname</var>.
</descr>
<errors>
If the code page is not found in the list of code pages, <var>$FFFF</var> is
returned.
</errors>
<seealso>
<link id="CodePageToCodePageName"/>
</seealso>
</element>

<!-- function Visibility: default -->
<element name="GetLocalTimeOffset">
<short>Return local timezone offset</short>
<descr>
<p>
<var>GetLocalTimeOffset</var> returns the local timezone offset in minutes.
This is the difference between UTC time and local time:
</p>
<pre>
UTC = LocalTime + GetLocalTimeOffset
</pre> 
<p>
Note that on Linux/Unix, this information may be inaccurate around the DST
time changes (for optimization). In that case, the <link id="#rtl.unix.ReReadLocalTime">unix.ReReadLocalTime</link> 
unit must be used to re-initialize the timezone information.
</p>
</descr>
<errors>
</errors>
<seealso>
<link id="#rtl.unix.ReReadLocalTime">unix.ReReadLocalTime</link>
<link id="Date"/>
<link id="Time"/>
<link id="Now"/>
</seealso>
</element>


<!-- enumeration type Visibility: default -->
<element name="TFormatDateTimeOption">
<short>Additional options for <var>FormatDateTime</var></short>
<descr>
<var>TFormatDateTimeOption</var> enumerates possible options to the <link
id="FormatDateTime"/> routine. 
</descr>
<seealso>
<link id="FormatDateTime"/>
<link id="TFormatDateTimeOptions"/>
</seealso>
</element>

<!-- enumeration value Visibility: default -->
<element name="TFormatDateTimeOption.fdoInterval">
<short>Format the time as an interval, 24+hours are presented as such</short>
</element>

<!-- set type Visibility: default -->
<element name="TFormatDateTimeOptions">
<short>Set of <var>TFormatDateTimeOption</var></short>
<descr>
<var>TFormatDateTimeOptions</var> is a set of <link
id="TFormatDateTimeOptions"/>, and is used in the last argument of
<link id="FormatDateTime"/>
</descr>
<seealso>
<link id="FormatDateTime"/>
<link id="TFormatDateTimeOptions"/>
</seealso>
</element>

<!-- function Visibility: default -->
<element name="GetTickCount">
<short>Get tick count (32-bit, deprecated)</short>
<descr>
<var>GetTickCount</var> returns an increasing clock tick count. It is useful for
time measurements, but no assumtions should be made as to the interval
between the ticks. This function is provided for Delphi compatibility, use
<link id="GetTickCount64"/> instead.
</descr>
<seealso>
<link id="GetTickCount64"/> 
<link id="Now"/>
<link id="Time"/>
<link id="Sleep"/>
</seealso>
</element>

<!-- function Visibility: default -->
<element name="GetTickCount64">
<short>Get tick count (64-bit)</short>
<descr>
<var>GetTickCount64</var> returns an increasing clock tick count. It is useful for
time measurements, but no assumtions should be made as to the interval
between the ticks.
</descr>
<errors>
</errors>
<seealso>
<link id="Now"/>
<link id="Time"/>
<link id="Sleep"/>
</seealso>
</element>

<!-- function Visibility: public -->
<element name="Exception.ToString">
<short>Nicely formatted version of the exception message</short>
<descr>
<var>ToString</var> overrides the <var>ToString</var> method to return a
concatenation of classname and <link id="Exception.Message"/>.
</descr>
<seealso>
<link id="Exception.Message"/>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TSystemTime.DayOfWeek">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- function Visibility: default -->
<element name="SameStr">
<short>Check whether 2 strings are the same, case insensitive</short>
<descr>
<var>SameStr</var> checks whether <var>S1</var> and <var>S2</var> are the same. 
This is equivalent to checking that <link id="CompareStr"/>  returns 0.
</descr>
<errors>
None.
</errors>
<seealso>
<link id="CompareStr"/>
</seealso>
</element>

<!-- function Visibility: default -->
<element name="StrToDWord">
<short>Convert string to DWord (cardinal)</short>
<descr>
<var>StrToDWord</var> will convert the string <var>S</var> to a <var>DWord</var> value, 
and returns the value.
</descr>
<errors>
In case the string <var>S</var> is not a valid number, 
or is a value outside the <var>DWord</var> range, an <var>EConvertError</var> 
exception will be raised.
</errors>
<seealso>
<link id="TryStrToDWord"/>
<link id="StrToDWordDef"/>
</seealso>
</element>

<!-- function Visibility: default -->
<element name="TryStrToDWord">
<short>Try to convert a string to DWord (cardinal)</short>
<descr>
<p><var>TryStrToDWord</var> will try to convert the string 
<var>S</var> to a <var>DWord</var> value. It returns <var>True</var> 
if the conversion was succesful, and in that case returns the value in <var>D</var>.
</p>
<p>
If the conversion failed or the value was outside of the valid range for DWord values, 
<var>False</var> is returned.
</p>
</descr>
<seealso>
<link id="StrToDWord"/>
<link id="StrToDWordDef"/>
</seealso>
</element>

<!-- function Visibility: default -->
<element name="StrToDWordDef">
<short>Convert string to DWord (cardinal), using default</short>
<descr>
<p><var>StrToDWordDef</var> will try to convert the string 
<var>S</var> to a <var>DWord</var> value. 
If the conversion was succesful, it returns the value. 
</p>
<p>
If the conversion failed, the fallback  value  in <var>Default</var> is returned.
</p>
</descr>
<seealso>
<link id="TryStrToDWord"/>
<link id="StrToDWord"/>
</seealso>
</element>

<!--
  ********************************************************************
    #rtl.sysutils.EArgumentNilException
  ********************************************************************
-->

<!-- class Visibility: default -->
<element name="EArgumentNilException">
<short>Exception raised when a required argument is <var>Nil</var>.</short>
<descr>
<p>
<var>EArgumentNilException</var> is an exception raised when an argument 
is <var>Nil</var> when it should not be <var>Nil</var>.
</p>
<p>
This exception class is provided for Delphi compatibility, but is not actually used in FPC.
</p>
</descr>
<seealso>
<link id="Exception"/>
</seealso>
</element>

<!--
  ********************************************************************
    #rtl.sysutils.EPathTooLongException
  ********************************************************************
-->

<!-- class Visibility: default -->
<element name="EPathTooLongException">
<short>Exception raised when a path name is too long.</short>
<descr>
<p>
<var>EPathTooLongException</var> is an exception raised when a pathname argument 
is longer than the allowed pathname length for files.
</p>
<p>
This exception class is provided for Delphi compatibility, but is not actually used in FPC.
</p>
</descr>
<seealso>
<link id="Exception"/>
<link id="EFileNotFoundException"/>
<link id="EDirectoryNotFoundException"/>
<link id="EPathNotFoundException"/>
</seealso>
</element>

<!--
  ********************************************************************
    #rtl.sysutils.ENotSupportedException
  ********************************************************************
-->

<!-- class Visibility: default -->
<element name="ENotSupportedException">
<short>Exception raised when a feature is not supported.</short>
<descr>
<p>
<var>ENotSupportedException</var> is an exception raised when a function 
or procedure is not supported for a certain platform.
</p>
<p>
This exception class is provided for Delphi compatibility, but is not actually used in FPC.
</p>
</descr>
<seealso>
<link id="Exception"/>
</seealso>
</element>

<!--
  ********************************************************************
    #rtl.sysutils.EDirectoryNotFoundException
  ********************************************************************
-->

<!-- class Visibility: default -->
<element name="EDirectoryNotFoundException">
<short>Exception raised when a directory is not found.</short>
<descr>
<p>
<var>EDirectoryNotFoundException</var> is an exception raised when a directory is 
referenced that does not exist.
</p>
<p>
This exception class is provided for Delphi compatibility, but is not actually used in FPC.
</p>
</descr>
<seealso>
<link id="Exception"/>
<link id="EFileNotFoundException"/>
<link id="EPathNotFoundException"/>
<link id="EPathTooLongException"/>
</seealso>
</element>

<!--
  ********************************************************************
    #rtl.sysutils.EFileNotFoundException
  ********************************************************************
-->

<!-- class Visibility: default -->
<element name="EFileNotFoundException">
<short>Exception raised when a file is not found.</short>
<descr>
<p>
<var>EFileNotFoundException</var> is an exception raised when a file is 
referenced that does not exist.
</p>
<p>
This exception class is provided for Delphi compatibility, but is not actually used in FPC.
</p>
</descr>
<seealso>
<link id="Exception"/>
<link id="EPathNotFoundException"/>
<link id="EDirectoryNotFoundException"/>
<link id="EPathTooLongException"/>

</seealso>
</element>

<!--
  ********************************************************************
    #rtl.sysutils.EPathNotFoundException
  ********************************************************************
-->

<!-- class Visibility: default -->
<element name="EPathNotFoundException">
<short>Exception raised when a path is not found.</short>
<descr>
<p>
<var>EPathNotFoundException</var> is an exception raised when a path is 
referenced that does not exist.
</p>
<p>
This exception class is provided for Delphi compatibility, but is not actually used in FPC.
</p>
</descr>
<seealso>
<link id="Exception"/>
<link id="EFileNotFoundException"/>
<link id="EDirectoryNotFoundException"/>
<link id="EPathTooLongException"/>
</seealso>
</element>

<!-- function Visibility: default -->
<element name="WideStringReplace">
<short>Replace occurrences of one substring with another in a widestring.</short>
<descr>
<var>WideStringReplace</var> searches the string <var>S</var> for
occurrences of the string <var>OldPattern</var> and, if it is found,
replaces it with <var>NewPattern</var>. It returns the resulting string. The
behaviour of <var>StringReplace</var> can be runed with <var>Flags</var>,
which is of type <link id="TReplaceFlags"/>. Standard behaviour is to
replace only the first occurrence of <var>OldPattern</var>, and to search
case sensitively.
</descr>
<errors>
None.
</errors>
<seealso>
<link id="TReplaceFlags"/>
<link id="StringReplace"/>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="faNormal">
<short>Normal file attribute</short>
<descr>
<var>faNormal</var> can be used in <link id="FindFirst"/> to indicate that normal files must be included in the result.
</descr>
<seealso>
<link id="faTemporary"/>
<link id="faDirectory"/>
<link id="faArchive"/>
<link id="faHidden"/>
<link id="FindFirst"/>
<link id="faCompressed"/>
<link id="faEncrypted"/>

</seealso>
</element>

<!-- constant Visibility: default -->
<element name="faTemporary">
<short>Temporary file attribute</short>
<descr>
<var>faTemporary</var> can be returned by <link id="FindFirst"/> or <link id="FindNext"/> 
to indicate that a returned file is a temporary file.
</descr>
<seealso>
<link id="faDirectory"/>
<link id="faArchive"/>
<link id="faHidden"/>
<link id="faCompressed"/>
<link id="faEncrypted"/>
<link id="faNormal"/>
<link id="FindFirst"/>
<link id="FindNext"/> 
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="faCompressed">
<short>Compressed file attribute</short>
<descr>
<var>faTemporary</var> can be returned by <link id="FindFirst"/> or <link id="FindNext"/> 
to indicate that a returned file is compressed (on filesystems that support this).
</descr>
<seealso>
<link id="faDirectory"/>
<link id="faArchive"/>
<link id="faHidden"/>
<link id="faEncrypted"/>
<link id="faNormal"/>
<link id="FindFirst"/>
<link id="FindNext"/> 
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="faEncrypted">
<short>Encrypted file attribute</short>
<descr>
<var>faEncrypted</var> can be returned by <link id="FindFirst"/> or <link id="FindNext"/> 
to indicate that a returned file is encrypted (on filesystems that support this).
</descr>
<seealso>
<link id="faDirectory"/>
<link id="faArchive"/>
<link id="faHidden"/>
<link id="faCompressed"/>
<link id="faNormal"/>
<link id="FindFirst"/>
<link id="FindNext"/> 
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="faVirtual">
<short>Virtual file attribute</short>
<descr>
<var>faVirtual</var> can be returned by <link id="FindFirst"/> or <link id="FindNext"/> 
to indicate that a returned file is virtual (on filesystems that support this).
</descr>
<seealso>
<link id="faDirectory"/>
<link id="faArchive"/>
<link id="faHidden"/>
<link id="faCompressed"/>
<link id="faVirtual"/>
<link id="faEncrypted"/>
<link id="faNormal"/>
<link id="FindFirst"/>
<link id="FindNext"/> 
</seealso>
</element>

<!-- function Visibility: default -->
<element name="GetDriveIDFromLetter">
<short>Return the drive ID based on a drive letter</short>
<descr>
<var>GetDriveIDFromLetter</var> returns the drive ID based on a drive letter. 
The drive ID can then be used in the <link id="DiskSize"/> and <link id="DiskFree"/> calls.
</descr>
<errors>
</errors>
<seealso>
<link id="DiskSize"/>
<link id="DiskFree"/>
</seealso>
</element>

<!-- array type Visibility: default -->
<element name="TArray">
<short>Generic array definition</short>
<descr>
<p>
<var>TArray</var> is a generic array. It can be used to define dynamic arrays in generic functions or classes.
</p>
<p>
This definition is provided for Delphi compatibility only, it is not needed in Free Pascal, 
where 2 array types are equal if they element types are equal.
</p>
</descr>
<seealso>
<link id="TStringArray"/>
</seealso>
</element>

<!-- array type Visibility: default -->
<element name="TStringArray">
<short>Dynamic array of strings</short>
<descr>
<var>TStringArray</var> is a dynamic array of strings.

</descr>
<seealso>
<link id="TArray"/>
<link id="TCharArray"/>
</seealso>
</element>

<!-- array type Visibility: default -->
<element name="TCharArray">
<short>Array of characters</short>
<descr>
<var>TCharArray</var> is a dynamic array of characters.
</descr>
<seealso>
<link id="TArray"/>
<link id="TStringArray"/>
</seealso>
</element>

<!-- enumeration type Visibility: default -->
<element name="TEndian">
<short>Endianness of a CPU</short>
<descr>
<var>TEndian</var> indicates whether the platform is little endian (LSB first), or big endian (MSB first).
</descr>
<seealso>
</seealso>
</element>

<!-- enumeration value Visibility: default -->
<element name="TEndian.Little">
<short>Little endian (LSB first)</short>
</element>

<!-- enumeration value Visibility: default -->
<element name="TEndian.Big">
<short>Big endian (MSB first)</short>
</element>

<!-- constant Visibility: default -->
<element name="CPUEndian">
<short>Current CPU endianness</short>
<descr>
<var>CPUEndian</var> describes whether the current CPU is little or big endian.
</descr>
<seealso>
<link id="TEndian"/>
</seealso>
</element>

<!--
  ********************************************************************
    #rtl.sysutils.TGuidHelper
  ********************************************************************
-->

<!-- Record helper type Visibility: default -->
<element name="TGuidHelper">
<short>Helper type for <var>TGUID</var></short>
<descr>
<var>TGuidHelper</var> provides various methods for a <link id="TGUID"/> type.
</descr>
<seealso>
<link id="TGUID"/>
</seealso>
</element>

<!-- class function Visibility: default -->
<element name="TGuidHelper.Create">
<short>Initialize a <var>TGUID</var> instance from data.</short>
<descr>
<p>
<var>Create</var> will initialize a <link id="TGUID"/> from byte data. 
The byte-data can come in different forms
</p>
<dl>
<dt>Data</dt><dd> can be a plain buffer. The GUID Data will be read from the buffer 
(<var>SizeOf(TGUID)</var> bytes),  according to the  <var>BigEndian</var> argument.
</dd>
<dt>Data</dt><dd> can be an array of bytes. <var>SizeOf(TGUID)</var> bytes will be read from
the array, starting at index <var>StartIndex</var> (default 0).
The GUID Data will be read according to the <var>BigEndian</var> argument.
</dd>
<dt>S</dt><dd> can be a string containing a string representation of the GUID, 
which is converted using <link id="StringToGUID"/>.</dd>
<dt>A,B,C,D (optionally E,F,G,H,I,J,K)</dt><dd> where the arguments are simply the 
various components of the GUID.</dd>
</dl>
</descr>
<seealso>
<link id="TGUID"/>
<link id="StringToGUID"/>
</seealso>
</element>

<!-- class function Visibility: default -->
<element name="TGuidHelper.NewGuid">
<short>Create a new GUID</short>
<descr>
<var>NewGUID</var> creates and returns a new <link ID="TGUID"/> using <link id="CreateGUID"/>
</descr>
<seealso>
<link id="CreateGUID"/>
</seealso>
</element>

<!-- function Visibility: default -->
<element name="TGuidHelper.ToByteArray">
<short>Convert to array of bytes</short>
<descr>
<var>ToByteArray</var> converts the TGUID to an array of bytes
(of length <var>SizeOf(TGUID)</var>). The bytes will be ordered accoring to <var>DataEndian</var>.

</descr>
<seealso>
<link id="TGUIDHelper.ToString"/>
<link id="TGUIDHelper.Create"/>
</seealso>
</element>

<!-- function Visibility: default -->
<element name="TGuidHelper.ToString">
<short>Convert to string</short>
<descr>
<var>ToString</var> will convert the TGUID to a string representation, using <link id="GUIDToString"/> 
</descr>
<seealso>
<link id="GUIDToString"/>
</seealso>
</element>

<!-- alias type Visibility: default -->
<element name="TCompareOption">
<short>String compare options</short>
<descr>
<var>TCompareOption</var> is an alias for 
<link id="#rtl.system.TCompareOption">System.TCompareOption</link>.
</descr>
<seealso>
<link id="#rtl.system.TCompareOption">System.TCompareOption</link>.
</seealso>
</element>

<!-- alias type Visibility: default -->
<element name="TCompareOptions">
<short>Set of string compare options</short>
<descr>
<var>TCompareOptions</var> is an alias for 
<link id="#rtl.system.TCompareOptions">System.TCompareOptions</link>.
</descr>
<seealso>
<link id="#rtl.system.TCompareOptions">System.TCompareOptions</link>.
</seealso>
</element>

<!-- enumeration type Visibility: default -->
<element name="TStringSplitOptions">
<short>String split options used in <var>TSTringHelper.Split</var></short>
<descr>
<var>TStringSplitOptions</var> describes the possible options for 
<link id="TStringHelper.Split"/>.
</descr>
<seealso>
<link id="TStringHelper.Split"/>.
</seealso>
</element>

<!-- enumeration value Visibility: default -->
<element name="TStringSplitOptions.None">
<short>No options specified. The default</short>
</element>

<!-- enumeration value Visibility: default -->
<element name="TStringSplitOptions.ExcludeEmpty">
<short>Do not include empty strings in the result.</short>
</element>

<!--
  ********************************************************************
    #rtl.sysutils.TStringHelper
  ********************************************************************
-->

<!-- #rtl.sysutils.TStringHelper Visibility: default -->
<element name="TStringHelper">
<short>Helper type for strings.</short>
<descr>
<p>
<var>TStringHelper</var> adds various helper routines to the string type.
These are mostly conversion routines, and some formatting routines.
</p>
<p>
For similarity to C-like languages, all the indexes in these helper routines are zero based.
</p>
</descr>
<seealso>
<link id="TGUIDHelper"/>
</seealso>
</element>

<!-- constant Visibility: public -->
<element name="TStringHelper.Empty">
<short>Check if the string is empty</short>
<descr>
<var>Empty</var> returns <var>True</var> if the string has length 0 (zero).
</descr>
<seealso>
</seealso>
</element>

<!-- class function Visibility: public -->
<element name="TStringHelper.Compare">
<short>Compare 2 strings</short>
<descr>
<p>
<var>Compare</var> compares strings <var>A</var> and <var>B</var>. 
It returns the following result:
</p>
<ul>
<li>0 if the strings are equal</li>
<li> a negative number if <var>A</var> &lt; <var>B</var></li>
<li> a positive number if <var>A</var> &gt; <var>B</var></li>
</ul>
<p>The comparison can be influenced by using the appropriate overloaded version of the 
function.</p>
<ul>
<li> If the <var>IndexA</var> and <var>IndexB</var> parameters are present, 
the comparison starts at character index <var>IndexA</var> and <var>IndexB</var>. 
The indexes are zero-based.</li>
<li> If the <var>ALen</var> parameters is present, then only the first <var>ALen</var> 
characters are compared. If not enough characters are present in either <var>A</var> 
or <var>B</var>, the comparison will  include only as much characters as are present.
</li>
<li>
If <var>IgnoreCase</var> is present and used, it determines whether the comparison is 
done case-sensitively. This form is deprecated, it is recommended to use the 
<var>AOptions</var> parameter and to include <var>coIgnoreCase</var>.
</li>
<li>The <var>AOptions</var> argument can be used to specify additional options. 
See <link id="#rtl.system.TCompareOption">TCompareOption</link> for a list of possible values in this
set.
</li>
</ul>
</descr>
<errors>
None.
</errors>
<seealso>
<link id="TStringHelper.CompareOrdinal"/>
<link id="#rtl.system.TCompareOption">TCompareOption</link>
<link id="TStringHelper.CompareTo"/>
</seealso>
</element>

<!-- class function Visibility: public -->
<element name="TStringHelper.CompareOrdinal">
<short>Compare 2 strings byte for byte</short>
<descr>
<p>
<var>CompareOrdinal</var> compares 2 strings <var>A</var> and <var>B</var> bytewise. 
It is faster than a regular compare, but offers less options.
</p>
<ul>
<li>0 if the strings are equal</li>
<li> a negative number if <var>A</var> &lt; <var>B</var></li>
<li> a positive number if <var>A</var> &gt; <var>B</var></li>
</ul>
<p>Optionally, a zero-based starting index for the compare can be given for each 
of the strings: <var>IndexA</var> and <var>IndexB</var>. 
In this case a maximum amount of characters (<var>ALen</var>) to be compared must also be specified.
</p> 
</descr>
<errors>
None.
</errors>
<seealso>
<link id="TStringHelper.Compare"/>
<link id="TStringHelper.CompareTo"/>
</seealso>
</element>

<!-- class function Visibility: public -->
<element name="TStringHelper.CompareText">
<short>Compare 2 strings case insensitively.</short>
<descr>
<var>CompareText</var> simply calls <link id="#rtl.sysutils.CompareText">SysUtils</link> with the 2 passed arguments.
</descr>
<errors>
None.
</errors>
<seealso>
<link id="#rtl.sysutils.CompareText">SysUtils</link>
<link id="TStringHelper.CompareTo"/>
</seealso>
</element>

<!-- class function Visibility: public -->
<element name="TStringHelper.Copy">
<short>Return a unique copy of a string</short>
<descr>
<var>Copy</var> will copy the string on which it operates, 
and makes sure the result has reference count 1.
</descr>
<seealso>
<link id="UniqueString"/>
</seealso>
</element>

<!-- class function Visibility: public -->
<element name="TStringHelper.Create">
<short>Create a new string</short>
<descr>
<p>
<var>Create</var> returns a new string with an initial value based on the passed arguments:
</p>
<ul>
<li>
A character (<var>ACHar</var>) and a count (<var>ACount</var>, in which case a string 
is returned of the specified length, filled with <var>AChar</var>.
</li>
<li>
An array of characters <var>AValue</var>. The returned string will have the same 
length as the array, and the characters will be copied from the elements in the array. 
Optionally, a starting index <var>StartIndex</var> (zero based) and length <var>ALen</var> 
can be specified, in which case the string will contain at most <var>ALen</var> characters, 
which will have been copied starting at index <var>StartIndex</var>.
</li>
</ul>
</descr>
<errors>
None.
</errors>
<seealso>
<link id="StringOfChar"/>
</seealso>
</element>

<!-- class function Visibility: public -->
<element name="TStringHelper.EndsText">
<short>Check if one string is the ending of another.</short>
<descr>
<var>EndsText</var> returns <var>True</var> if <var>AText</var> ends on <var>SubText</var>,
i.e. whether the last characters in <var>AText</var> are the ones found in <var>SubText</var>.
The comparison is done case insensitively.
</descr>
<seealso>
<link id="CompareText"/>
<link id="TStringHelper.EndsWith"/>
</seealso>
</element>

<!-- class function Visibility: public -->
<element name="TStringHelper.Equals">
<short>Check if 2 strings are equal</short>
<descr>
<var>Equals</var> returns <var>True</var> if <var>A=B</var>, false otherwise.
</descr>
<seealso>
<link id="CompareText"/>
<link id="TStringHelper.Compare"/>
</seealso>
</element>

<!-- class function Visibility: public -->
<element name="TStringHelper.Format">
<short>Format a string using provided arguments.</short>
<descr>
<var>Format</var> just calls <link id="#rtl.sysutils.Format">Sysutils.Format</link>, passing on <var>AFormat</var> and <var>Args</var>.
If <var>AFormat</var> is omitted, the string itself is used as the formatting string.
</descr>
<seealso>
<link id="#rtl.sysutils.Format">Sysutils.Format</link>
</seealso>
</element>

<!-- class function Visibility: public -->
<element name="TStringHelper.IsNullOrEmpty">
<short>Check if a string is empty</short>
<descr>
<var>IsNullOrEmpty</var> returns <var>True</var> if string <var>A</var> has length 0.
</descr>
<seealso>
<link id="System.Length"/>
<link id="TStringHelper.IsNullOrWhiteSpace"/>
</seealso>
</element>

<!-- class function Visibility: public -->
<element name="TStringHelper.IsNullOrWhiteSpace">
<short>Check if a string is empty or contains only whitespace characters.</short>
<descr>
<var>IsNullOrEmpty</var> returns <var>True</var> if string <var>A</var> has length 0 
or contains only whitespace characters  (characters with ASCII code 32 or less).
</descr>
<seealso>
<link id="TStringHelper.IsNullOrEmpty"/>
<link id="Trim"/>
</seealso>
</element>

<!-- class function Visibility: public -->
<element name="TStringHelper.Join">
<short>Join a series of strings, separated using a given separator</short>
<descr>
<p>
<var>Join</var> will return a string that consists of all the strings in
<var>Values</var> concatenated, with <var>Separator</var> between them. 
<var>Values</var>  can be an array of strings, but can also be an array of 
arbitrary values: the values will first be transformed to a string representation first.
</p>
<p>
In case an array of strings is passed on, a start index <var>StartIndex</var> 
and element count <var>ACount</var> can be passed on as well.
</p>
</descr>
<errors>
Classes, pointers or interfaces will not be transformed, but will result in a 'unknown type: NNN' string being inserted.
</errors>
<seealso>
<link id="TStringHelper.Split"/>
</seealso>
</element>

<!-- class function Visibility: public -->
<element name="TStringHelper.LowerCase">
<short>Return the lowercase version of a string.</short>
<descr>
<var>LowerCase</var> returns the lowercase version of the string <var>S</var>. 
This function is an alias for the <link id="#rtl.sysutils.LowerCase">SysUtils.LowerCase</link> function.
</descr>
<seealso>
<link id="#rtl.sysutils.LowerCase">sysutils.LowerCase</link>
</seealso>
</element>

<!-- class function Visibility: public -->
<element name="TStringHelper.Parse">
<short>Return a string representation of the argument</short>
<descr>
<p>
<var>Parse</var> will return a string representation of the argument
<var>AValue</var>. How this is done depends on the type of the
<var>AValue</var>argument:
</p>
<dl>
<dt>Boolean</dt><dd>The result is formatted using <link id="BoolToStr"/>.</dd>
<dt>Extended</dt><dd>The result is formatted using <link id="FloatToStr"/>.</dd>
<dt>Int64</dt><dd>The result is formatted using <link id="IntToStr"/>.</dd>
<dt>Integer</dt><dd>he result is formatted using <link id="IntToStr"/>.</dd>
</dl>
</descr>
<seealso>
<link id="BoolToStr"/>
<link id="FloatToStr"/>
<link id="IntToStr"/>
</seealso>
</element>

<!-- class function Visibility: public -->
<element name="TStringHelper.ToBoolean">
<short>Convert string to boolean</short>
<descr>
<var>ToBoolean</var> returns the contents of the string <var>S</var> as a boolean (if
possible). It uses <link id="StrToBool"/> to convert the value to a boolean.
</descr>
<errors>
If the string contains a value that cannot be translated to a boolean, an
<link id="EConvertError"/> exception may be raised.
</errors>
<seealso>
<link id="StrToBool"/>
<link id="EConvertError"/>
<link id="TStringHelper.ToDouble"/>
<link id="TStringHelper.ToExtended"/>
<link id="TStringHelper.ToInt64"/>
<link id="TStringHelper.ToInteger"/>
<link id="TStringHelper.ToSingle"/>
</seealso>
</element>

<!-- class function Visibility: public -->
<element name="TStringHelper.ToDouble">
<short>Convert string to double-sized floating point value</short>
<descr>
<var>ToDouble</var> returns the contents of the string <var>S</var> as a
Double-sized floating point value (if
possible). It uses <link id="StrToFloat"/> to convert the value to a
floating point value.
</descr>
<errors>
If the string contains a value that cannot be translated to a floating point
value, an <link id="EConvertError"/> exception may be raised.
</errors>
<seealso>
<link id="StrToFloat"/>
<link id="EConvertError"/>
<link id="TStringHelper.ToBoolean"/>
<link id="TStringHelper.ToExtended"/>
<link id="TStringHelper.ToInt64"/>   
<link id="TStringHelper.ToInteger"/> 
<link id="TStringHelper.ToSingle"/>  
</seealso>
</element>

<!-- class function Visibility: public -->
<element name="TStringHelper.ToExtended">
<short>Convert string to extended-sized floating point value</short>
<descr>
<var>ToExtended</var> returns the contents of the string <var>S</var> as a
Extended-sized floating point value (if
possible). It uses <link id="StrToFloat"/> to convert the value to a
floating point value.
</descr>
<errors>
If the string contains a value that cannot be translated to a floating point
value, an <link id="EConvertError"/> exception may be raised.
</errors>
<seealso>
<link id="StrToFloat"/>
<link id="EConvertError"/>
<link id="TStringHelper.ToBoolean"/>
<link id="TStringHelper.ToDouble"/>
<link id="TStringHelper.ToInt64"/>   
<link id="TStringHelper.ToInteger"/> 
<link id="TStringHelper.ToSingle"/>  
</seealso>
</element>

<!-- class function Visibility: public -->
<element name="TStringHelper.ToInt64">
<short>Convert string to 64-bit signed integer</short>
<descr>
<var>ToInt64</var> returns the contents of the string <var>S</var> as a
64-bit signed integer value (if
possible). It uses <link id="StrToInt64"/> to convert the value to an 64-bit
sized integer value.
</descr>
<errors>
If the string contains a value that cannot be translated to an integer
value, an <link id="EConvertError"/> exception may be raised.
</errors>
<seealso>
<link id="StrToInt64"/>
<link id="EConvertError"/>
<link id="TStringHelper.ToBoolean"/>
<link id="TStringHelper.ToDouble"/>
<link id="TStringHelper.ToExtended"/>
<link id="TStringHelper.ToInteger"/>
<link id="TStringHelper.ToSingle"/>  
</seealso>
</element>

<!-- class function Visibility: public -->
<element name="TStringHelper.ToInteger">
<short>Convert string to 32-bit signed integer</short>
<descr>
<var>ToInteger</var> returns the contents of the string <var>S</var> as a
32-bit signed integer  value (if
possible). It uses <link id="StrToInt64"/> to convert the value to an 64-bit
sized integer value.
</descr>
<errors>
If the string contains a value that cannot be translated to an integer      
value, an <link id="EConvertError"/> exception may be raised.
</errors>
<seealso>
<link id="StrToInt64"/>
<link id="EConvertError"/>
<link id="TStringHelper.ToBoolean"/>
<link id="TStringHelper.ToDouble"/> 
<link id="TStringHelper.ToExtended"/>
<link id="TStringHelper.ToInt64"/> 
<link id="TStringHelper.ToSingle"/> 
</seealso>
</element>

<!-- class function Visibility: public -->
<element name="TStringHelper.ToSingle">
<short>Convert string to single-sized floating point value</short>
<descr>
<var>ToSingle</var> returns the contents of the string <var>S</var> as a     
single-sized floating point value (if      
possible). It uses <link id="StrToFloat"/> to convert the value to a
floating point value.
</descr>
<errors>
If the string contains a value that cannot be translated to a floating point
value, an <link id="EConvertError"/> exception may be raised.
</errors>
<seealso>
<link id="StrToFloat"/>
<link id="EConvertError"/>
<link id="TStringHelper.ToBoolean"/>
<link id="TStringHelper.ToDouble"/>  
<link id="TStringHelper.ToInt64"/>   
<link id="TStringHelper.ToInteger"/> 
<link id="TStringHelper.ToExtended"/>  
</seealso>
</element>

<!-- class function Visibility: public -->
<element name="TStringHelper.UpperCase">
<short>Return uppercase version of a string</short>
<descr>
<var>UpperCase</var> returns an uppercase version of the string <var>S</var>.
</descr>
<seealso>
<link id="#rtl.sysutils.UpperCase"/>
</seealso>
</element>

<!-- function Visibility: public -->
<element name="TStringHelper.CompareTo">
<short>Compare string to another</short>
<descr>
<p>
<var>CompareTo</var> will compare the string value to the string <var>B</var>.
It returns the following result:
</p>
<ul>
<li>0 if the strings are equal</li>
<li> a negative number if <var>Self</var> &lt; <var>B</var></li> 
<li> a positive number if <var>Self</var> &gt; <var>B</var></li>
</ul>
<p>
The <link id="StrComp"/> function is used for this.
</p>
</descr>
<seealso>
<link id="TStringHelper.Compare"/>
<link id="TStringHelper.CompareOrdinal"/>
<link id="StrComp"/>
</seealso>
</element>

<!-- function Visibility: public -->
<element name="TStringHelper.Contains">
<short>Check is the string contains another</short>
<descr>
<var>Contains</var> returns <var>True</var> if the string value contains
<var>AValue</var>, i.e. it returns <var>Pos(Self,AValue)>0</var>.
</descr>
<seealso>
<link id="#rtl.system.Pos">Pos</link>
</seealso>
</element>

<!-- procedure Visibility: public -->
<element name="TStringHelper.CopyTo">
<short>Copy part of the string to an array of characters</short>
<descr>
<var>CopyTo</var> copies at most <var>ACount</var> characters from the source string (<var>Self</var>)
to the array <var>Destination</var>, starting at (zero based) index <var>SourceIndex</var>. 
The characters are copied to the array starting at position <var>DestinationIndex</var> (zero based).
</descr>
<seealso>
<link id="#rtl.system.Copy">Copy</link>.
</seealso>
</element>

<!-- function Visibility: public -->
<element name="TStringHelper.CountChar">
<short>Count the occurrences of a character</short>
<descr>
<var>CountChar</var> returns the number of occurrences of <var>C</var> in the string (<var>Self</var>).
</descr>
<seealso>
<link id="TStringHelper.IndexOf"/>
<link id="TStringHelper.IndexOfAny"/>
</seealso>
</element>

<!-- function Visibility: public -->
<element name="TStringHelper.DeQuotedString">
<short>Return a dequoted version of the string</short>
<descr>
<var>DeQuotedString</var> will return a dequoted version of the string
(<var>Self</var>), where the quote character is <var>AQuoteChar</var>
(default: a single quote '). The string must start and end with the 
quote character, or it is returned as-is. 
Any double occurrences of the quote character  <var>AQuoteChar</var> 
will be returned as a single quote.
</descr>
<seealso>
<link id="AnsiQuotedString"/>
<link id="AnsiExtractQuotedString"/>
</seealso>
</element>

<!-- function Visibility: public -->
<element name="TStringHelper.EndsWith">
<short>Check if the string is ended by another.</short>
<descr>
<var>EndsWith</var> returns <var>True</var> if the string (<var>Self</var>) ends on
<var>AValue</var>, i.e. whether the last characters in <var>Self</var> are the ones found in
<var>AValue</var>.
The comparison is done case insensitively depending on the <var>IgnoreCase</var> argument (which is false by default).
</descr>  
<seealso> 
<link id="CompareText"/>
<link id="TStringHelper.EndsText"/>
</seealso>
</element>

<!-- function Visibility: public -->
<element name="TStringHelper.GetHashCode">
<short>Get a hash code for the string</short>
<descr>
<var>GetHashCode</var> returns a hash value for the string (<var>Self</var>).
</descr>
</element>

<!-- function Visibility: public -->
<element name="TStringHelper.IndexOf">
<short>Find the position (index) of a string or character</short>
<descr>
<p>
<var>IndexOf</var> returns the zero-based index of <var>AValue</var> in the string (<var>Self</var>).
The value to search for can be a character or string (<var>AValue</var>).
</p>
<p>
if no match is found, -1 is returned.
</p>
<p>
The search can be refined by specifying a (zero based) index
<var>StartIndex</var>. When specified, the search will start at the given character.
Not specifying this option is equivalent to specifying zero.
</p>
<p>
If <var>ACount</var> is given, at most <var>ACount</var> characters in the source string will be considered for the search.
This count includes the starting character. Not specifying this argument is equivalent to specifying the amount of remaining characters.
</p>
</descr>
<seealso>
<link id="#rtl.system.Pos">Pos</link>
<link id="TStringHelper.IndexOfUnQuoted"/>
<link id="TStringHelper.IndexOfAny"/>
<link id="TStringHelper.IndexOfAnyUnquoted"/>
<link id="TStringHelper.LastIndexOf"/>
<link id="TStringHelper.LastIndexOfAny"/>
</seealso>
</element>

<!-- function Visibility: public -->
<element name="TStringHelper.IndexOfUnQuoted">
<short>Index of string, skipping quoted parts.</short>
<descr>
<var>IndexOfUnQuoted</var> will return the zero-based index of
<var>AValue</var> in the string (<var>Self</var>), but disregards any quoted
parts in the string. A quoted part is determined by a starting <var>StartQuote</var> and
end-quote character <var>EndQuote</var>. The search starts at (zero-based) 
position <var>StartIndex</var>, which is by default 0.
</descr>
<seealso>
<link id="#rtl.system.Pos">Pos</link>
<link id="TStringHelper.IndexOf"/>
<link id="TStringHelper.IndexOfAny"/>
<link id="TStringHelper.IndexOfAnyUnquoted"/>
<link id="TStringHelper.LastIndexOf"/>
<link id="TStringHelper.LastIndexOfAny"/>
</seealso>
</element>

<!-- function Visibility: public -->
<element name="TStringHelper.IndexOfAny">
<short>Find the position (index) of any string or character in a list.</short>
<descr>
<p>
<var>IndexOfAny</var> returns the zero-based index of the first matching element in an array of charaters or strings
(<var>AnyOf</var>). 
</p>
<p>
if no match is found, -1 is returned.
</p>
<p>
The search can be refined by specifying a (zero-based) index
<var>StartIndex</var>. When specified, the search will start at the given character.
Not specifying this option is equivalent to specifying zero.
</p>
<p>
If <var>ACount</var> is given, at most <var>ACount</var> characters in the source string will be considered for the search.
This count includes the starting character. Not specifying this argument is equivalent to specifying the amount of remaining characters.
</p>
<p>
If <var>AMatch</var> is specified, on succesful return it will contain the index of the element in the array that
contains the found match. 
</p>
</descr>
<seealso>
<link id="#rtl.system.Pos">Pos</link>
<link id="TStringHelper.IndexOf"/>
<link id="TStringHelper.IndexOfUnquoted"/>
<link id="TStringHelper.IndexOfAnyUnquoted"/>
<link id="TStringHelper.LastIndexOf"/>
<link id="TStringHelper.LastIndexOfAny"/>
</seealso>
</element>

<!-- function Visibility: public -->
<element name="TStringHelper.IndexOfAnyUnquoted">
<short>Find the position (index) of any string or character in a list.</short>
<descr>
<p>
<var>IndexOfAnyUnQuoted</var> returns the zero-based index of the first matching
element in an array of charaters or strings (<var>AnyOf</var>), but disregards 
any quoted parts in the string. A quoted part is determined by a starting <var>StartQuote</var> and
end-quote character <var>EndQuote</var>.
</p>
<p> 
if no match is found, -1 is returned.
</p>
<p> 
The search can be refined by specifying a (zero-based) index
<var>StartIndex</var>. When specified, the search will start at the given
character.
Not specifying this option is equivalent to specifying zero.
</p>
<p> 
If <var>ACount</var> is given, at most <var>ACount</var> characters in the
source string will be considered for the search.
This count includes the starting character. Not specifying this argument is
equivalent to specifying the amount of remaining characters.
</p>
<p> 
If <var>AMatch</var> is specified, on succesful return it will contain the
index of the element in the array that
contains the found match. 
</p>
</descr>
<seealso>
<link id="#rtl.system.Pos">Pos</link>
<link id="TStringHelper.IndexOf"/>
<link id="TStringHelper.IndexOfUnquoted"/>
<link id="TStringHelper.IndexOfAny"/>
<link id="TStringHelper.LastIndexOf"/>
<link id="TStringHelper.LastIndexOfAny"/>
</seealso>
</element>

<!-- function Visibility: public -->
<element name="TStringHelper.Insert">
<short>Insert a string at a given position</short>
<descr>
<var>Insert</var> inserts the string <var>AValue</var> in a string
(<var>Self</var>) at the (zero-based) position <var>StartIndex</var>. It
returns the resulting string (<var>Self</var>). If <var>StartIndex</var> is
less than zero, it is set to zero. If <var>StartIndex</var> is higher than the length,
<var>AValue</var> is appended to the string.
</descr>
<seealso>
<link id="#rtl.system.Insert">Insert</link>
</seealso>
</element>

<!-- function Visibility: public -->
<element name="TStringHelper.IsDelimiter">
<short>Check whether a character at a given position is a delimiter</short>
<descr>
<var>IsDelimiter</var> returns <var>True</var> if the character at
(zero-based) position <var>Index</var> is one of the delimiter characters in
<var>Delimiters</var>. If <var>Index</var> is out of range, <var>False</var>
is returned.
</descr>
<seealso>
<link id="#rtl.sysutils.IsDelimiter">IsDelimiter</link>
</seealso>
</element>

<!-- function Visibility: public -->
<element name="TStringHelper.IsEmpty">
<short>Check whether the string is empty.</short>
<descr>
<var>IsEmpty</var> returns <var>True</var> if the string has length zero.
</descr>
<seealso>
<link id="TStringHelper.IsNullOrEmpty"/>
<link id="TStringHelper.Length"/>
<link id="#rtl.system.length">Length</link>
</seealso>
</element>

<!-- function Visibility: public -->
<element name="TStringHelper.LastDelimiter">
<short>Return the last position of one of a series of delimiters</short>
<descr>
<var>LastDelimiter</var> searches the string backwards for an occurence of
one of the characters in <var>Delims</var>, and returns the corresponding
(zero-based) index in the string. If no occurrence is found, -1 is returned.
</descr>
<seealso>
<link id="TStringHelper.isDelimiter"/>
<link id="TStringHelper.IndexOf"/>
<link id="TStringHelper.IndexOfAny"/>
<link id="TStringHelper.LastIndexOf"/>
<link id="TStringHelper.LastIndexOfAny"/>
</seealso>
</element>

<!-- function Visibility: public -->
<element name="TStringHelper.LastIndexOf">
<short>Find the last position (index) of a string or character</short>
<descr>
<p>
<var>LasyIndexOf</var> returns the zero-based index of the last occurrence
of <var>AValue</var> in the string (<var>Self</var>). 
The value to search for can be a character or string (<var>AValue</var>).
</p>
<p>
if no match is found, -1 is returned.
</p>
<p>
The search can be refined by specifying a (zero based) index
<var>StartIndex</var>. When specified, the search will start at the given character
and proceeds towards the beginning of the string.
Not specifying this option is equivalent to specifying <var>length-1</var>.
</p>
<p>
If <var>ACount</var> is given, at most <var>ACount</var> characters in the source string will be considered for the search.
This count includes the starting character. Not specifying this argument is equivalent to specifying <var>StartIndex+1</var>.
</p>
</descr>
<seealso>
<link id="#rtl.system.Pos">Pos</link>
<link id="TStringHelper.IndexOfUnQuoted"/>
<link id="TStringHelper.IndexOfAny"/>
<link id="TStringHelper.IndexOfAnyUnquoted"/>
<link id="TStringHelper.IndexOf"/>
<link id="TStringHelper.LastIndexOfAny"/>
</seealso>
</element>

<!-- function Visibility: public -->
<element name="TStringHelper.LastIndexOfAny">
<short>Find the last position (index) of any string or character in a list.</short>
<descr>
<p>
<var>LasyIndexOfAny</var> returns the zero-based index of the first matching element in an array of charaters or strings
(<var>AnyOf</var>). 
</p>
<p>
if no match is found, -1 is returned.
</p>
<p>
The search can be refined by specifying a (zero-based) index
<var>StartIndex</var>. When specified, the search will start at the given character
and proceeds to the start of the string.
Not specifying this option is equivalent to specifying <var>Length-1</var>.
</p>
<p>
If <var>ACount</var> is given, at most <var>ACount</var> characters in the source string will be considered for the search.
This count includes the starting character. Not specifying this argument is equivalent to specifying <var>StartIndex+1</var>.
</p>
</descr>
<seealso>
<link id="#rtl.system.Pos">Pos</link>
<link id="TStringHelper.IndexOf"/>
<link id="TStringHelper.IndexOfUnquoted"/>
<link id="TStringHelper.IndexOfAnyUnquoted"/>
<link id="TStringHelper.LastIndexOf"/>
<link id="TStringHelper.IndexOfAny"/>
</seealso>
</element>

<!-- function Visibility: public -->
<element name="TStringHelper.PadLeft">
<short>Pad the string on the left with an indicated character</short>
<descr>
<var>PadLeft</var> pads the string (<var>Self</var>) on the left (i.e. at the
beginning) till it reaches length <var>ATotalWidth</var> with character
<var>PaddingChar</var>. If <var>PaddingChar</var> is omitted, a space is
used.
</descr>
<seealso>
<link id="TStringHelper.PadRight"/>
</seealso>
</element>

<!-- function Visibility: public -->
<element name="TStringHelper.PadRight">
<short>Pad the string on the right with an indicated character</short>
<descr>
<var>PadLeft</var> pads the string (<var>Self</var>) on the right (i.e. at the
end) till it reaches length <var>ATotalWidth</var> with character <var>PaddingChar</var>. 
If <var>PaddingChar</var> is omitted, a space is used.
</descr>
<seealso>
<link id="TStringHelper.PadLeft"/>
</seealso>
</element>

<!-- function Visibility: public -->
<element name="TStringHelper.QuotedString">
<short>Return a quoted version of the string</short>
<descr>
<var>QuotedString</var> returns a quoted version of the string
(<var>Self</var>). The quote character is specified in
<var>AQuoteChar</var>, which by default is the double quote (").
Any existing quote characters occurrences will be doubled.
</descr>
<seealso>
<link id="QuotedStr"/>
<link id="AnsiQuotedStr"/>
</seealso>
</element>

<!-- function Visibility: public -->
<element name="TStringHelper.Remove">
<short>Remove a number of characters from the string</short>
<descr>
<var>Remove</var> removes <var>ACount</var> characters from the string,
starting at (zero-based) index <var>StartIndex</var>. If <var>ACount</var>
is omitted, all remaining characters are removed.
</descr>
<seealso>
<link id="#rtl.system.Delete">Delete</link>
<link id="TStringHelper.Replace"/>
<link id="TStringHelper.Insert"/>
</seealso>
</element>

<!-- function Visibility: public -->
<element name="TStringHelper.Replace">
<short>Replace occurrences of one string with another.</short>
<descr>
<p>
<var>Replace</var> will replace occurrences of <var>OldChar</var> with
<var>NewChar</var> or <var>OldValue</var> with <var>NewValue</var>.
</p>
<p>
If <var>rfReplaceAll</var> is in the <var>ReplaceFlags</var>, then all
occurrences will be replaced, otherwise only the first occurrence is
replaced.
</p>
<p>
If <var>rfCaseInsensitive</var> is in the <var>ReplaceFlags</var>, then
the search for <var>OldChar</var> or <var>OldValue</var> is performed
ignoring case.
</p>
</descr>
<errors>
</errors>
<seealso>
<link id="StringReplace"/>
<link id="TReplaceFlags"/>
</seealso>
</element>

<!-- function Visibility: public -->
<element name="TStringHelper.Split">
<short>Split a string in a number of parts</short>
<descr>
<p>
<var>Split</var> will split the string (<var>Self</var>) using
<var>Separators</var> as separator characters. 
</p>
<p>
If <var>ACount</var> is supplied, then at most <var>ACount</var> strings will be included in the result.
The default behaviour is to supply all strings.
</p>
<p>
if <var>Options</var> contains <var>ExcludeEmpty</var> then no empty strings
will be included in the result. Empty strings may be included if multiple 
succesive separator characters are found in the source string.
</p>
<p>
If <var>AQuoteStart</var> and <var>AQuoteEnd</var> are supplied, 
then no splitting will be performed between <var>AQuoteStart</var> and
<var>AQuoteEnd</var> characters.
</p>
</descr>
<seealso>
<link id="TStringHelper.Join"/>
<link id="TStringHelper.IndexOfAny"/>
<link id="TStringHelper.IndexOfAnyUnquoted"/>
</seealso>
</element>

<!-- function Visibility: public -->
<element name="TStringHelper.StartsWith">
<short>Check if one string starts with another</short>
<descr>
<var>StartsWith</var> will return <var>True</var> if the first characters of
the string (<var>Self</var>) equal the string <var>AValue</var>. If
<var>IgnoreCase</var> is <var>True</var>, then the comparison is done case
insensitive. The default is to compare strings case sensitively.
</descr>
<seealso>
<link id="TStringHelper.EndsWith"/>
</seealso>
</element>

<!-- function Visibility: public -->
<element name="TStringHelper.Substring">
<short>Return a part of the string</short>
<descr>
<var>SubString</var> returns the portion of the string starting at
(zero-based) index <var>AStartIndex</var> with length <var>ALen</var>. 
If <var>ALen</var> is omitted, then all remaining characters are returned.
</descr>
<seealso>
<link id="TStringHelper.Insert"/>
<link id="#rtl.system.Copy">Copy</link>
<link id="TStringHelper.ToCharArray"/>
</seealso>
</element>

<!-- function Visibility: public -->
<element name="TStringHelper.ToCharArray">
<short>Return the string ar an array of characters.</short>
<descr>
<var>ToCharArray</var> returns part of the string (<var>Self</var>) as an array of
characters. The characters are copied starting at (zero-based) index
<var>AStartIndex</var> and at most <var>ALen</var> characters are copied. If
<var>AStartIndex</var> and <var>ALen</var> are omitted, all the characters
are returned.
</descr>
<errors>
If AStartIndex is less than zero, an <link id="EAccessViolation"/> exception
may be raised.
</errors>
<seealso>
<link id="TStringHelper.Substring"/>
<link id="TStringHelper.Insert"/>
<link id="#rtl.system.Copy">Copy</link>
</seealso>
</element>

<!-- function Visibility: public -->
<element name="TStringHelper.ToLower">
<short>Convert to lowercase</short>
<descr>
<var>ToLower</var> returns a lowercase version of the string.
</descr>
<seealso>
<link id="TStringHelper.LowerCase"/>
<link id="TStringHelper.ToUpper"/>
<link id="TStringHelper.ToUpperInvariant"/>
</seealso>
</element>

<!-- function Visibility: public -->
<element name="TStringHelper.ToLowerInvariant">
<short>Convert to lowercase</short>
<descr>
<var>ToLowerInvariant</var> is equal to <link id="TStringHelper.ToLower"/>
</descr>
<seealso>
<link id="TStringHelper.ToLower"/>
<link id="TStringHelper.ToUpper"/>
<link id="TStringHelper.ToUpperInvariant"/>
</seealso>
</element>

<!-- function Visibility: public -->
<element name="TStringHelper.ToUpper">
<short>Convert to uppercase.</short>
<descr>
<var>>ToUpper</var> returns an uppercase version of the string.
</descr>
<seealso>
<link id="TStringHelper.ToLower"/>
<link id="TStringHelper.ToLowerInvariant"/>
<link id="TStringHelper.ToUpperInvariant"/>
</seealso>
</element>

<!-- function Visibility: public -->
<element name="TStringHelper.ToUpperInvariant">
<short>Convert to uppercase</short>
<descr>
<var>ToUpperInvariant</var> is equal to <link id="TStringHelper.ToUpper"/>
</descr>
<seealso>
<link id="TStringHelper.ToLower"/>
<link id="TStringHelper.ToLowerInvariant"/>
<link id="TStringHelper.ToUpper"/>
</seealso>
</element>

<!-- function Visibility: public -->
<element name="TStringHelper.Trim">
<short>Strips a set of trim characters from the beginning and end of the string.</short>
<descr>
<var>Trim</var> returns the string (<var>Self</var>), removing all characters
occurring in <var>ATrimChars</var>  from the start and end of the string. 
If <var>ATrimChars</var> is not specified, all characters with ASCII code 32 or lower are
assumed.
</descr>
<seealso>
<link id="#rtl.sysutils.trim">Trim</link>
<link id="TStringHelper.TrimLeft"/>
<link id="TStringHelper.TrimRight"/>
</seealso>
</element>

<!-- function Visibility: public -->
<element name="TStringHelper.TrimLeft">
<short>Strips a set of trim characters from the beginning of the string.</short>
<descr>
<var>Trim</var> returns the string (<var>Self</var>), removing all characters
occurring in <var>ATrimChars</var>  from the start of the string. 
If <var>ATrimChars</var> is not specified, all characters with ASCII code 32 or lower are
assumed.
</descr>
<seealso>
<link id="#rtl.sysutils.trim">TrimLeft</link>
<link id="TStringHelper.Trim"/>
<link id="TStringHelper.TrimRight"/>
</seealso>
</element>

<!-- function Visibility: public -->
<element name="TStringHelper.TrimRight">
<short>Strips a set of trim characters from the end of the string.</short>
<descr>
<var>Trim</var> returns the string (<var>Self</var>), removing all characters
occurring in <var>ATrimChars</var>  from the end of the string. 
If <var>ATrimChars</var> is not specified, all characters with ASCII code 32 or lower are
assumed.
</descr>
<seealso>
<link id="#rtl.sysutils.trim">Trim</link>
<link id="TStringHelper.Trim"/>
<link id="TStringHelper.TrimLeft"/>
</seealso>
</element>

<!-- function Visibility: public -->
<element name="TStringHelper.TrimEnd">
<short>Alias for <var>TrimRight</var></short>
<descr>
<var>TrimEnd</var> is an alias for <link id="TStringHelper.TrimRight"/>
</descr>
<seealso>
<link id="TStringHelper.TrimRight"/>
<link id="TStringHelper.TrimStart"/>
</seealso>
</element>

<!-- function Visibility: public -->
<element name="TStringHelper.TrimStart">
<short>Alias for <var>TrimLeft</var></short>
<descr>
<var>TrimStart</var> is an alias for <link id="TStringHelper.TrimLeft"/>
</descr>
<seealso>
<link id="TStringHelper.TrimEnd"/>
<link id="TStringHelper.TrimLeft"/>
</seealso>
</element>

<!-- property Visibility: public -->
<element name="TStringHelper.Chars">
<short>Zero-based Indexed access to the characters in the string.</short>
<descr>
<var>Chars</var> provides zero-based indexed access to the characters in the
string. The first character is at index 0, the last at <var>Length-1</var>.
</descr>
<seealso>
<link id="TStringHelper.Length"/>
</seealso>
</element>

<!-- property Visibility: public -->
<element name="TStringHelper.Length">
<short>Return the length of the string</short>
<descr>
<var>Length</var> returns the length (in bytes for single-byte strings) of the string.
</descr>
<seealso>
<link id="#rtl.system.length">Length</link>
</seealso>
</element>

<!--
  ********************************************************************
    #rtl.sysutils.TByteHelper
  ********************************************************************
-->

<!-- #rtl.sysutils.TByteHelper Visibility: default -->
<element name="TByteHelper">
<short>Helper for a byte-typed ordinal value</short>
<descr>
<var>TByteHelper</var> contains some auxiliary routines for a byte-typed ordinal value.
It consists mainly of conversion routines to and from other types.
</descr>
<seealso>
<link id="TStringHelper"/>
<link id="TShortIntHelper"/>
<link id="TSmallIntHelper"/>
<link id="TWordHelper"/>
<link id="TCardinalHelper"/>
<link id="TIntegerHelper"/>
<link id="TInt64Helper"/>
<link id="TQWordHelper"/>
<link id="TNativeIntHelper"/>
<link id="TNativeUIntHelper"/>
</seealso>
</element>

<!-- constant Visibility: public -->
<element name="TByteHelper.MaxValue">
<short>Maximum value for a byte</short>
<descr>
<var>MaxValue</var> is the biggest value a byte-typed value can contain.
</descr>
<seealso>
<link id="TByteHelper.MinValue"/>
</seealso>
</element>

<!-- constant Visibility: public -->
<element name="TByteHelper.MinValue">
<short>Minimum value for a byte</short>
<descr>
<var>MinValue</var> is the smallest value a byte-typed value can contain.    
</descr>
<seealso>
<link id="TByteHelper.MaxValue"/>
</seealso>
</element>

<!-- class function Visibility: public -->
<element name="TByteHelper.Parse">
<short>Convert from a string</short>
<descr>
<var>Parse</var> will attempt to convert the string <var>AString</var> to a byte value. 
It uses the <link id="StrToInt"/> function to perform the conversion, so no
localization is taken into account. </descr>
<errors>
If the string does not contain a valid byte value, an <link id="EConvertError"/> exception is raised.
</errors>
<seealso>
<link id="TByteHelper.ToString"/>
<link id="TByteHelper.TryParse"/>
<link id="StrToInt"/>
</seealso>
</element>

<!-- class function Visibility: public -->
<element name="TByteHelper.Size">
<short>Size, in bytes, of the byte value</short>
<descr>
<var>Size</var> returns the size (in bytes) of the byte value. 
This is equivalent to <var>SizeOf(Byte)</var>.
</descr>
<errors>
None.
</errors>
<seealso>
<link id="#rtl.system.SizeOf">SizeOf</link>
</seealso>
</element>

<!-- class function Visibility: public -->
<element name="TByteHelper.ToString">
<short>Convert the value to string</short>
<descr>
<var>ToString</var> will, in the class function variant of this method, convert <var>AValue</var> to
a string representation. In the regular method overloaded version of <var>ToString</var>, the byte value itself is used.
The <link id="IntToStr"/> function is used to do the conversion.
</descr>
<seealso>
<link id="TByteHelper.Parse"/>
<link id="IntToStr"/>
</seealso>
</element>

<!-- class function Visibility: public -->
<element name="TByteHelper.TryParse">
<short>Try to convert a string to a byte, report success or failure</short>
<descr>
<p>
<var>TryParse</var> attempts to convert the string <var>AString</var> to a
byte, and reports the success of the attempt. If the attempt is succesful,
then <var>True</var> is returned, and the actual value of the byte is
returned in <var>AValue</var>.
</p>
<p>
It uses the <link id="val"/> function to perform the conversion, so no
localization is taken into account. 
</p>
</descr>
<seealso>
<link id="TByteHelper.Parse"/>
<link id="#rtl.system.val">Val</link>
</seealso>
</element>

<!-- function Visibility: public -->
<element name="TByteHelper.ToBoolean">
<short>Convert to a boolean value</short>
<descr>
<var>ToBoolean</var> converts the byte value to a boolean: it returns
<var>True</var> if the value is nonzero, <var>False</var> if it is zero.
</descr>
<seealso>
<link id="TByteHelper.ToSingle"/>
<link id="TByteHelper.ToDouble"/>
<link id="TByteHelper.ToExtended"/>
<link id="TByteHelper.ToString"/>
<link id="TByteHelper.ToHexString"/>
</seealso>
</element>

<!-- function Visibility: public -->
<element name="TByteHelper.ToDouble">
<short>Convert to a double-sized floating point value</short>
<descr>
<var>ToDouble</var> converts the byte value to a double-sized floating point value.
</descr>
<seealso>
<link id="TByteHelper.ToBoolean"/>
<link id="TByteHelper.ToExtended"/>
<link id="TByteHelper.ToSingle"/>
<link id="TByteHelper.ToString"/>
<link id="TByteHelper.ToHexString"/>
</seealso>
</element>

<!-- function Visibility: public -->
<element name="TByteHelper.ToExtended">
<short>Convert to an extended-sized floating point value</short>
<descr>
<var>ToDouble</var> converts the byte value to an extended-sized floating point value
</descr>
<seealso>
<link id="TByteHelper.ToBoolean"/>
<link id="TByteHelper.ToSingle"/>
<link id="TByteHelper.ToDouble"/>
<link id="TByteHelper.ToString"/>
<link id="TByteHelper.ToHexString"/>
</seealso>
</element>

<!-- function Visibility: public -->
<element name="TByteHelper.ToHexString">
<short>Convert to a hexadecimal string representation</short>
<descr>
<var>ToHexString</var> converts the byte value to a hexadecimal string
representation. The <var>AMinDigits</var> argument specifies the minimal
number of characters in the resulting string. The string will be left-padded
with zeroes if the representation contains less than  <var>AMinDigits</var>
characters.
</descr>
<seealso>
<link id="TByteHelper.ToBoolean"/>
<link id="TByteHelper.ToSingle"/>
<link id="TByteHelper.ToDouble"/>
<link id="TByteHelper.ToString"/>
<link id="TByteHelper.ToExtended"/>
</seealso>
</element>

<!-- function Visibility: public -->
<element name="TByteHelper.ToSingle">
<short>Convert to an single-sized floating point value</short>
<descr>
<var>ToSingle</var> converts the byte value to a single-sized floating point
value.
</descr>
<seealso>
<link id="TByteHelper.ToBoolean"/>
<link id="TByteHelper.ToDouble"/>
<link id="TByteHelper.ToExtended"/>
<link id="TByteHelper.ToString"/>
<link id="TByteHelper.ToHexString"/>
</seealso>
</element>

<!--
  ********************************************************************
    #rtl.sysutils.TShortIntHelper
  ********************************************************************
-->

<!-- #rtl.sysutils.TShortIntHelper Visibility: default -->
<element name="TShortIntHelper">
<short>Helper for a ShortInt-typed ordinal value</short>
<descr>
<var>TShortIntHelper</var> contains some auxiliary routines for a ShortInt-typed ordinal value.
It consists mainly of conversion routines to and from other types.
</descr>
<seealso>
<link id="TStringHelper"/>
<link id="TByteHelper"/>
<link id="TSmallIntHelper"/>
<link id="TWordHelper"/>
<link id="TCardinalHelper"/>
<link id="TIntegerHelper"/>
<link id="TInt64Helper"/>
<link id="TQWordHelper"/>
<link id="TNativeIntHelper"/>
<link id="TNativeUIntHelper"/>
</seealso>
</element>

<!-- constant Visibility: public -->
<element name="TShortIntHelper.MaxValue">
<short>Maximum value for a ShortInt</short>
<descr>
<var>MaxValue</var> is the biggest value a ShortInt-typed value can contain.
</descr>
<seealso>
<link id="TShortIntHelper.MinValue"/>
</seealso>
</element>

<!-- constant Visibility: public -->
<element name="TShortIntHelper.MinValue">
<short>Minimum value for a ShortInt</short>
<descr>
<var>MinValue</var> is the smallest value a ShortInt-typed value can contain.    
</descr>
<seealso>
<link id="TShortIntHelper.MaxValue"/>
</seealso>
</element>

<!-- class function Visibility: public -->
<element name="TShortIntHelper.Parse">
<short>Convert from a string</short>
<descr>
<p>
<var>Parse</var> will attempt to convert the string <var>AString</var> to a ShortInt value. 
It uses the <link id="StrToInt"/> function to perform the conversion, so no
localization is taken into account. 
</p>
</descr>
<errors>
If the string does not contain a valid ShortInt value, an <link id="EConvertError"/> exception is raised.
</errors>
<seealso>
<link id="TShortIntHelper.ToString"/>
<link id="TShortIntHelper.TryParse"/>
<link id="StrToInt"/>
</seealso>
</element>

<!-- class function Visibility: public -->
<element name="TShortIntHelper.Size">
<short>Size, in bytes, of the ShortInt value</short>
<descr>
<var>Size</var> returns the size (in ShortInts) of the ShortInt value. 
This is equivalent to <var>SizeOf(Byte)</var>.
</descr>
<errors>
None.
</errors>
<seealso>
<link id="#rtl.system.SizeOf">SizeOf</link>
</seealso>
</element>

<!-- class function Visibility: public -->
<element name="TShortIntHelper.ToString">
<short>Convert the value to string</short>
<descr>
<var>ToString</var> will, in the class function variant of this method, convert <var>AValue</var> to
a string representation. In the regular method overloaded version of <var>ToString</var>, the ShortInt value itself is used.
The <link id="IntToStr"/> function is used to do the conversion.
</descr>
<seealso>
<link id="TShortIntHelper.Parse"/>
<link id="IntToStr"/>
</seealso>
</element>

<!-- class function Visibility: public -->
<element name="TShortIntHelper.TryParse">
<short>Try to convert a string to a ShortInt, report success or failure</short>
<descr>
<p>
<var>TryParse</var> attempts to convert the string <var>AString</var> to a
ShortInt, and reports the success of the attempt. If the attempt is succesful,
then <var>True</var> is returned, and the actual value of the ShortInt is
returned in <var>AValue</var>.
</p>
<p>
It uses the <link id="val"/> function to perform the conversion, so no
localization is taken into account. 
</p>
</descr>
<seealso>
<link id="TShortIntHelper.Parse"/>
<link id="#rtl.system.val">Val</link>
</seealso>
</element>

<!-- function Visibility: public -->
<element name="TShortIntHelper.ToBoolean">
<short>Convert to a boolean value</short>
<descr>
<var>ToBoolean</var> converts the ShortInt value to a boolean: it returns
<var>True</var> if the value is nonzero, <var>False</var> if it is zero.
</descr>
<seealso>
<link id="TShortIntHelper.ToSingle"/>
<link id="TShortIntHelper.ToDouble"/>
<link id="TShortIntHelper.ToExtended"/>
<link id="TShortIntHelper.ToString"/>
<link id="TShortIntHelper.ToHexString"/>
</seealso>
</element>

<!-- function Visibility: public -->
<element name="TShortIntHelper.ToDouble">
<short>Convert to a double-sized floating point value</short>
<descr>
<var>ToDouble</var> converts the ShortInt value to a double-sized floating point value.
</descr>
<seealso>
<link id="TShortIntHelper.ToBoolean"/>
<link id="TShortIntHelper.ToExtended"/>
<link id="TShortIntHelper.ToSingle"/>
<link id="TShortIntHelper.ToString"/>
<link id="TShortIntHelper.ToHexString"/>
</seealso>
</element>

<!-- function Visibility: public -->
<element name="TShortIntHelper.ToExtended">
<short>Convert to an extended-sized floating point value</short>
<descr>
<var>ToDouble</var> converts the ShortInt value to an extended-sized floating point value.
</descr>
<seealso>
<link id="TShortIntHelper.ToBoolean"/>
<link id="TShortIntHelper.ToSingle"/>
<link id="TShortIntHelper.ToDouble"/>
<link id="TShortIntHelper.ToString"/>
<link id="TShortIntHelper.ToHexString"/>
</seealso>
</element>

<!-- function Visibility: public -->
<element name="TShortIntHelper.ToHexString">
<short>Convert to a hexadecimal string representation</short>
<descr>
<var>ToHexString</var> converts the ShortInt value to a hexadecimal string
representation. The <var>AMinDigits</var> argument specifies the minimal
number of characters in the resulting string. The string will be left-padded
with zeroes if the representation contains less than  <var>AMinDigits</var>
characters.
</descr>
<seealso>
<link id="TShortIntHelper.ToBoolean"/>
<link id="TShortIntHelper.ToSingle"/>
<link id="TShortIntHelper.ToDouble"/>
<link id="TShortIntHelper.ToString"/>
<link id="TShortIntHelper.ToExtended"/>
</seealso>
</element>

<!-- function Visibility: public -->
<element name="TShortIntHelper.ToSingle">
<short>Convert to an single-sized floating point value</short>
<descr>
<var>ToSingle</var> converts the ShortInt value to a single-sized floating point
value.
</descr>
<seealso>
<link id="TShortIntHelper.ToBoolean"/>
<link id="TShortIntHelper.ToDouble"/>
<link id="TShortIntHelper.ToExtended"/>
<link id="TShortIntHelper.ToString"/>
<link id="TShortIntHelper.ToHexString"/>
</seealso>
</element>


<!--
  ********************************************************************
    #rtl.sysutils.TSmallIntHelper
  ********************************************************************
-->

<!-- #rtl.sysutils.TSmallIntHelper Visibility: default -->
<element name="TSmallIntHelper">
<short>Helper for a SmallInt-typed ordinal value</short>
<descr>
<var>TSmallIntHelper</var> contains some auxiliary routines for a SmallInt-typed ordinal value.
It consists mainly of conversion routines to and from other types.
</descr>
<seealso>
<link id="TStringHelper"/>
<link id="TShortIntHelper"/>
<link id="TByteHelper"/>
<link id="TWordHelper"/>
<link id="TCardinalHelper"/>
<link id="TIntegerHelper"/>
<link id="TInt64Helper"/>
<link id="TQWordHelper"/>
<link id="TNativeIntHelper"/>
<link id="TNativeUIntHelper"/>
</seealso>
</element>

<!-- constant Visibility: public -->
<element name="TSmallIntHelper.MaxValue">
<short>Maximum value for a SmallInt</short>
<descr>
<var>MaxValue</var> is the biggest value a SmallInt-typed value can contain.
</descr>
<seealso>
<link id="TSmallIntHelper.MinValue"/>
</seealso>
</element>

<!-- constant Visibility: public -->
<element name="TSmallIntHelper.MinValue">
<short>Minimum value for a SmallInt</short>
<descr>
<var>MinValue</var> is the smallest value a SmallInt-typed value can contain.    
</descr>
<seealso>
<link id="TSmallIntHelper.MaxValue"/>
</seealso>
</element>

<!-- class function Visibility: public -->
<element name="TSmallIntHelper.Parse">
<short>Convert from a string</short>
<descr>
<var>Parse</var> will attempt to convert the string <var>AString</var> to a SmallInt value. 
It uses the <link id="StrToInt"/> function to perform the conversion, so no
localization is taken into account. 
</descr>
<errors>
If the string does not contain a valid SmallInt value, an <link id="EConvertError"/> exception is raised.
</errors>
<seealso>
<link id="TSmallIntHelper.ToString"/>
<link id="TSmallIntHelper.TryParse"/>
<link id="StrToInt"/>
</seealso>
</element>

<!-- class function Visibility: public -->
<element name="TSmallIntHelper.Size">
<short>Size, in bytes, of the SmallInt value</short>
<descr>
<var>Size</var> returns the size (in SmallInts) of the SmallInt value. 
This is equivalent to <var>SizeOf(SmallInt)</var>.
</descr>
<errors>
None.
</errors>
<seealso>
<link id="#rtl.system.SizeOf">SizeOf</link>
</seealso>
</element>

<!-- class function Visibility: public -->
<element name="TSmallIntHelper.ToString">
<short>Convert the value to string</short>
<descr>
<var>ToString</var> will, in the class function variant of this method, convert <var>AValue</var> to
a string representation. In the regular method overloaded version of <var>ToString</var>, the SmallInt value itself is used.
The <link id="IntToStr"/> function is used to do the conversion.
</descr>
<seealso>
<link id="TSmallIntHelper.Parse"/>
<link id="IntToStr"/>
</seealso>
</element>

<!-- class function Visibility: public -->
<element name="TSmallIntHelper.TryParse">
<short>Try to convert a string to a SmallInt, report success or failure</short>
<descr>
<p>
<var>TryParse</var> attempts to convert the string <var>AString</var> to a
SmallInt, and reports the success of the attempt. If the attempt is succesful,
then <var>True</var> is returned, and the actual value of the SmallInt is
returned in <var>AValue</var>.
</p>
<p>
It uses the <link id="val"/> function to perform the conversion, so no
localization is taken into account. 
</p>
</descr>
<seealso>
<link id="TSmallIntHelper.Parse"/>
<link id="#rtl.system.val">Val</link>
</seealso>
</element>

<!-- function Visibility: public -->
<element name="TSmallIntHelper.ToBoolean">
<short>Convert to a boolean value</short>
<descr>
<var>ToBoolean</var> converts the SmallInt value to a boolean: it returns
<var>True</var> if the value is nonzero, <var>False</var> if it is zero.
</descr>
<seealso>
<link id="TSmallIntHelper.ToSingle"/>
<link id="TSmallIntHelper.ToDouble"/>
<link id="TSmallIntHelper.ToExtended"/>
<link id="TSmallIntHelper.ToString"/>
<link id="TSmallIntHelper.ToHexString"/>
</seealso>
</element>

<!-- function Visibility: public -->
<element name="TSmallIntHelper.ToDouble">
<short>Convert to a double-sized floating point value</short>
<descr>
<var>ToDouble</var> converts the SmallInt value to a double-sized floating point value
</descr>
<seealso>
<link id="TSmallIntHelper.ToBoolean"/>
<link id="TSmallIntHelper.ToExtended"/>
<link id="TSmallIntHelper.ToSingle"/>
<link id="TSmallIntHelper.ToString"/>
<link id="TSmallIntHelper.ToHexString"/>
</seealso>
</element>

<!-- function Visibility: public -->
<element name="TSmallIntHelper.ToExtended">
<short>Convert to an extended-sized floating point value</short>
<descr>
<var>ToDouble</var> converts the SmallInt value to an extended-sized floating point value.
</descr>
<seealso>
<link id="TSmallIntHelper.ToBoolean"/>
<link id="TSmallIntHelper.ToSingle"/>
<link id="TSmallIntHelper.ToDouble"/>
<link id="TSmallIntHelper.ToString"/>
<link id="TSmallIntHelper.ToHexString"/>
</seealso>
</element>

<!-- function Visibility: public -->
<element name="TSmallIntHelper.ToHexString">
<short>Convert to a hexadecimal string representation</short>
<descr>
<var>ToHexString</var> converts the SmallInt value to a hexadecimal string
representation. The <var>AMinDigits</var> argument specifies the minimal
number of characters in the resulting string. The string will be left-padded
with zeroes if the representation contains less than  <var>AMinDigits</var>
characters.
</descr>
<seealso>
<link id="TSmallIntHelper.ToBoolean"/>
<link id="TSmallIntHelper.ToSingle"/>
<link id="TSmallIntHelper.ToDouble"/>
<link id="TSmallIntHelper.ToString"/>
<link id="TSmallIntHelper.ToExtended"/>
</seealso>
</element>

<!-- function Visibility: public -->
<element name="TSmallIntHelper.ToSingle">
<short>Convert to an single-sized floating point value</short>
<descr>
<var>ToSingle</var> converts the SmallInt value to a single-sized floating point
value.
</descr>
<seealso>
<link id="TSmallIntHelper.ToBoolean"/>
<link id="TSmallIntHelper.ToDouble"/>
<link id="TSmallIntHelper.ToExtended"/>
<link id="TSmallIntHelper.ToString"/>
<link id="TSmallIntHelper.ToHexString"/>
</seealso>
</element>

<!--
  ********************************************************************
    #rtl.sysutils.TWordHelper
  ********************************************************************
-->

<!-- #rtl.sysutils.TWordHelper Visibility: default -->

<element name="TWordHelper">
<short>Helper for a Word-typed ordinal value</short>
<descr>
<var>TWordHelper</var> contains some auxiliary routines for a Word-typed ordinal value.
It consists mainly of conversion routines to and from other types.
</descr>
<seealso>
<link id="TStringHelper"/>
<link id="TShortIntHelper"/>
<link id="TSmallIntHelper"/>
<link id="TByteHelper"/>
<link id="TCardinalHelper"/>
<link id="TIntegerHelper"/>
<link id="TInt64Helper"/>
<link id="TQWordHelper"/>
<link id="TNativeIntHelper"/>
<link id="TNativeUIntHelper"/>
</seealso>
</element>

<!-- constant Visibility: public -->
<element name="TWordHelper.MaxValue">
<short>Maximum value for a Word</short>
<descr>
<var>MaxValue</var> is the biggest value a Word-typed value can contain.
</descr>
<seealso>
<link id="TWordHelper.MinValue"/>
</seealso>
</element>

<!-- constant Visibility: public -->
<element name="TWordHelper.MinValue">
<short>Minimum value for a Word</short>
<descr>
<var>MinValue</var> is the smallest value a Word-typed value can contain.    
</descr>
<seealso>
<link id="TWordHelper.MaxValue"/>
</seealso>
</element>

<!-- class function Visibility: public -->
<element name="TWordHelper.Parse">
<short>Convert from a string</short>
<descr>
<var>Parse</var> will attempt to convert the string <var>AString</var> to a Word value. 
It uses the <link id="StrToInt"/> function to perform the conversion, so no
localization is taken into account. 
</descr>
<errors>
If the string does not contain a valid Word value, an <link id="EConvertError"/> exception is raised.
</errors>
<seealso>
<link id="TWordHelper.ToString"/>
<link id="TWordHelper.TryParse"/>
<link id="StrToInt"/>
</seealso>
</element>

<!-- class function Visibility: public -->
<element name="TWordHelper.Size">
<short>Size, in bytes, of the Word value</short>
<descr>
<var>Size</var> returns the size (in Words) of the Word value. 
This is equivalent to <var>SizeOf(Word)</var>.
</descr>
<errors>
None.
</errors>
<seealso>
<link id="#rtl.system.SizeOf">SizeOf</link>
</seealso>
</element>

<!-- class function Visibility: public -->
<element name="TWordHelper.ToString">
<short>Convert the value to string</short>
<descr>
<var>ToString</var> will, in the class function variant of this method, convert <var>AValue</var> to
a string representation. In the regular method overloaded version of <var>ToString</var>, the Word value itself is used.
The <link id="IntToStr"/> function is used to do the conversion.
</descr>
<seealso>
<link id="TWordHelper.Parse"/>
<link id="IntToStr"/>
</seealso>
</element>

<!-- class function Visibility: public -->
<element name="TWordHelper.TryParse">
<short>Try to convert a string to a Word, report success or failure</short>
<descr>
<p>
<var>TryParse</var> attempts to convert the string <var>AString</var> to a
Word, and reports the success of the attempt. If the attempt is succesful,
then <var>True</var> is returned, and the actual value of the Word is
returned in <var>AValue</var>.
</p>
<p>
It uses the <link id="val"/> function to perform the conversion, so no
localization is taken into account. 
</p>
</descr>
<seealso>
<link id="TWordHelper.Parse"/>
<link id="#rtl.system.val">Val</link>
</seealso>
</element>

<!-- function Visibility: public -->
<element name="TWordHelper.ToBoolean">
<short>Convert to a boolean value</short>
<descr>
<var>ToBoolean</var> converts the Word value to a boolean: it returns
<var>True</var> if the value is nonzero, <var>False</var> if it is zero.
</descr>
<seealso>
<link id="TWordHelper.ToSingle"/>
<link id="TWordHelper.ToDouble"/>
<link id="TWordHelper.ToExtended"/>
<link id="TWordHelper.ToString"/>
<link id="TWordHelper.ToHexString"/>
</seealso>
</element>

<!-- function Visibility: public -->
<element name="TWordHelper.ToDouble">
<short>Convert to a double-sized floating point value</short>
<descr>
<var>ToDouble</var> converts the Word value to a double-sized floating point
value.
</descr>
<seealso>
<link id="TWordHelper.ToBoolean"/>
<link id="TWordHelper.ToExtended"/>
<link id="TWordHelper.ToSingle"/>
<link id="TWordHelper.ToString"/>
<link id="TWordHelper.ToHexString"/>
</seealso>
</element>

<!-- function Visibility: public -->
<element name="TWordHelper.ToExtended">
<short>Convert to an extended-sized floating point value</short>
<descr>
<var>ToDouble</var> converts the Word value to an extended-sized floating point
value.
</descr>
<seealso>
<link id="TWordHelper.ToBoolean"/>
<link id="TWordHelper.ToSingle"/>
<link id="TWordHelper.ToDouble"/>
<link id="TWordHelper.ToString"/>
<link id="TWordHelper.ToHexString"/>
</seealso>
</element>

<!-- function Visibility: public -->
<element name="TWordHelper.ToHexString">
<short>Convert to a hexadecimal string representation</short>
<descr>
<var>ToHexString</var> converts the Word value to a hexadecimal string
representation. The <var>AMinDigits</var> argument specifies the minimal
number of characters in the resulting string. The string will be left-padded
with zeroes if the representation contains less than  <var>AMinDigits</var>
characters.
</descr>
<seealso>
<link id="TWordHelper.ToBoolean"/>
<link id="TWordHelper.ToSingle"/>
<link id="TWordHelper.ToDouble"/>
<link id="TWordHelper.ToString"/>
<link id="TWordHelper.ToExtended"/>
</seealso>
</element>

<!-- function Visibility: public -->
<element name="TWordHelper.ToSingle">
<short>Convert to an single-sized floating point value</short>
<descr>
<var>ToSingle</var> converts the Word value to a single-sized floating point
value.
</descr>
<seealso>
<link id="TWordHelper.ToBoolean"/>
<link id="TWordHelper.ToDouble"/>
<link id="TWordHelper.ToExtended"/>
<link id="TWordHelper.ToString"/>
<link id="TWordHelper.ToHexString"/>
</seealso>
</element>

<!--
  ********************************************************************
    #rtl.sysutils.TCardinalHelper
  ********************************************************************
-->


<!-- #rtl.sysutils.TCardinalHelper Visibility: default -->
<element name="TCardinalHelper">
<short>Helper for a Cardinal-typed ordinal value</short>
<descr>
<var>TCardinalHelper</var> contains some auxiliary routines for a Cardinal-typed ordinal value.
It consists mainly of conversion routines to and from other types.
</descr>
<seealso>
<link id="TStringHelper"/>
<link id="TShortIntHelper"/>
<link id="TSmallIntHelper"/>
<link id="TWordHelper"/>
<link id="TByteHelper"/>
<link id="TIntegerHelper"/>
<link id="TInt64Helper"/>
<link id="TQWordHelper"/>
<link id="TNativeIntHelper"/>
<link id="TNativeUIntHelper"/>
</seealso>
</element>

<!-- constant Visibility: public -->
<element name="TCardinalHelper.MaxValue">
<short>Maximum value for a Cardinal</short>
<descr>
<var>MaxValue</var> is the biggest value a Cardinal-typed value can contain.
</descr>
<seealso>
<link id="TCardinalHelper.MinValue"/>
</seealso>
</element>

<!-- constant Visibility: public -->
<element name="TCardinalHelper.MinValue">
<short>Minimum value for a Cardinal</short>
<descr>
<var>MinValue</var> is the smallest value a Cardinal-typed value can contain.    
</descr>
<seealso>
<link id="TCardinalHelper.MaxValue"/>
</seealso>
</element>

<!-- class function Visibility: public -->
<element name="TCardinalHelper.Parse">
<short>Convert from a string</short>
<descr>
<var>Parse</var> will attempt to convert the string <var>AString</var> to a Cardinal value. 
It uses the <link id="StrToInt"/> function to perform the conversion, so no
localization is taken into account. 
</descr>
<errors>
If the string does not contain a valid Cardinal value, an <link id="EConvertError"/> exception is raised.
</errors>
<seealso>
<link id="TCardinalHelper.ToString"/>
<link id="TCardinalHelper.TryParse"/>
<link id="StrToInt"/>
</seealso>
</element>

<!-- class function Visibility: public -->
<element name="TCardinalHelper.Size">
<short>Size, in bytes, of the Cardinal value</short>
<descr>
<var>Size</var> returns the size (in Cardinals) of the Cardinal value. 
This is equivalent to <var>SizeOf(Cardinal)</var>.
</descr>
<errors>
None.
</errors>
<seealso>
<link id="#rtl.system.SizeOf">SizeOf</link>
</seealso>
</element>

<!-- class function Visibility: public -->
<element name="TCardinalHelper.ToString">
<short>Convert the value to string</short>
<descr>
<var>ToString</var> will, in the class function variant of this method, convert <var>AValue</var> to
a string representation. In the regular method overloaded version of <var>ToString</var>, the Cardinal value itself is used.
The <link id="IntToStr"/> function is used to do the conversion.
</descr>
<seealso>
<link id="TCardinalHelper.Parse"/>
<link id="IntToStr"/>
</seealso>
</element>

<!-- class function Visibility: public -->
<element name="TCardinalHelper.TryParse">
<short>Try to convert a string to a Cardinal, report success or failure</short>
<descr>
<p>
<var>TryParse</var> attempts to convert the string <var>AString</var> to a
Cardinal, and reports the success of the attempt. If the attempt is succesful,
then <var>True</var> is returned, and the actual value of the Cardinal is
returned in <var>AValue</var>.
</p>
<p>
It uses the <link id="val"/> function to perform the conversion, so no
localization is taken into account. 
</p>
</descr>
<seealso>
<link id="TCardinalHelper.Parse"/>
<link id="#rtl.system.val">Val</link>
</seealso>
</element>

<!-- function Visibility: public -->
<element name="TCardinalHelper.ToBoolean">
<short>Convert to a boolean value</short>
<descr>
<var>ToBoolean</var> converts the Cardinal value to a boolean: it returns
<var>True</var> if the value is nonzero, <var>False</var> if it is zero.
</descr>
<seealso>
<link id="TCardinalHelper.ToSingle"/>
<link id="TCardinalHelper.ToDouble"/>
<link id="TCardinalHelper.ToExtended"/>
<link id="TCardinalHelper.ToString"/>
<link id="TCardinalHelper.ToHexString"/>
</seealso>
</element>

<!-- function Visibility: public -->
<element name="TCardinalHelper.ToDouble">
<short>Convert to a double-sized floating point value</short>
<descr>
<var>ToDouble</var> converts the Cardinal value to a double-sized floating point
value.
</descr>
<seealso>
<link id="TCardinalHelper.ToBoolean"/>
<link id="TCardinalHelper.ToExtended"/>
<link id="TCardinalHelper.ToSingle"/>
<link id="TCardinalHelper.ToString"/>
<link id="TCardinalHelper.ToHexString"/>
</seealso>
</element>

<!-- function Visibility: public -->
<element name="TCardinalHelper.ToExtended">
<short>Convert to an extended-sized floating point value</short>
<descr>
<var>ToDouble</var> converts the Cardinal value to an extended-sized floating point value.
</descr>
<seealso>
<link id="TCardinalHelper.ToBoolean"/>
<link id="TCardinalHelper.ToSingle"/>
<link id="TCardinalHelper.ToDouble"/>
<link id="TCardinalHelper.ToString"/>
<link id="TCardinalHelper.ToHexString"/>
</seealso>
</element>

<!-- function Visibility: public -->
<element name="TCardinalHelper.ToHexString">
<short>Convert to a hexadecimal string representation</short>
<descr>
<var>ToHexString</var> converts the Cardinal value to a hexadecimal string
representation. The <var>AMinDigits</var> argument specifies the minimal
number of characters in the resulting string. The string will be left-padded
with zeroes if the representation contains less than  <var>AMinDigits</var>
characters.
</descr>
<seealso>
<link id="TCardinalHelper.ToBoolean"/>
<link id="TCardinalHelper.ToSingle"/>
<link id="TCardinalHelper.ToDouble"/>
<link id="TCardinalHelper.ToString"/>
<link id="TCardinalHelper.ToExtended"/>
</seealso>
</element>

<!-- function Visibility: public -->
<element name="TCardinalHelper.ToSingle">
<short>Convert to an single-sized floating point value</short>
<descr>
<var>ToSingle</var> converts the Cardinal value to a single-sized floating point value.
</descr>
<seealso>
<link id="TCardinalHelper.ToBoolean"/>
<link id="TCardinalHelper.ToDouble"/>
<link id="TCardinalHelper.ToExtended"/>
<link id="TCardinalHelper.ToString"/>
<link id="TCardinalHelper.ToHexString"/>
</seealso>
</element>


<!--
  ********************************************************************
    #rtl.sysutils.TIntegerHelper
  ********************************************************************
-->


<!-- #rtl.sysutils.TIntegerHelper Visibility: default -->
<element name="TIntegerHelper">
<short>Helper for a Integer-typed ordinal value</short>
<descr>
<var>TIntegerHelper</var> contains some auxiliary routines for a Integer-typed ordinal value.
It consists mainly of conversion routines to and from other types.
</descr>
<seealso>
<link id="TStringHelper"/>
<link id="TShortIntHelper"/>
<link id="TSmallIntHelper"/>
<link id="TWordHelper"/>
<link id="TCardinalHelper"/>
<link id="TByteHelper"/>
<link id="TInt64Helper"/>
<link id="TQWordHelper"/>
<link id="TNativeIntHelper"/>
<link id="TNativeUIntHelper"/>
</seealso>
</element>

<!-- constant Visibility: public -->
<element name="TIntegerHelper.MaxValue">
<short>Maximum value for a Integer</short>
<descr>
<var>MaxValue</var> is the biggest value a Integer-typed value can contain.
</descr>
<seealso>
<link id="TIntegerHelper.MinValue"/>
</seealso>
</element>

<!-- constant Visibility: public -->
<element name="TIntegerHelper.MinValue">
<short>Minimum value for a Integer</short>
<descr>
<var>MinValue</var> is the smallest value a Integer-typed value can contain.    
</descr>
<seealso>
<link id="TIntegerHelper.MaxValue"/>
</seealso>
</element>

<!-- class function Visibility: public -->
<element name="TIntegerHelper.Parse">
<short>Convert from a string</short>
<descr>
<var>Parse</var> will attempt to convert the string <var>AString</var> to a Integer value. 
It uses the <link id="StrToInt"/> function to perform the conversion, so no
localization is taken into account. 
</descr>
<errors>
If the string does not contain a valid Integer value, an <link id="EConvertError"/> exception is raised.
</errors>
<seealso>
<link id="TIntegerHelper.ToString"/>
<link id="TIntegerHelper.TryParse"/>
<link id="StrToInt"/>
</seealso>
</element>

<!-- class function Visibility: public -->
<element name="TIntegerHelper.Size">
<short>Size, in bytes, of the Integer value</short>
<descr>
<var>Size</var> returns the size (in Integers) of the Integer value. 
This is equivalent to <var>SizeOf(Integer)</var>.
</descr>
<errors>
None.
</errors>
<seealso>
<link id="#rtl.system.SizeOf">SizeOf</link>
</seealso>
</element>

<!-- class function Visibility: public -->
<element name="TIntegerHelper.ToString">
<short>Convert the value to string</short>
<descr>
<var>ToString</var> will, in the class function variant of this method, convert <var>AValue</var> to
a string representation. In the regular method overloaded version of <var>ToString</var>, the Integer value itself is used.
The <link id="IntToStr"/> function is used to do the conversion.
</descr>
<seealso>
<link id="TIntegerHelper.Parse"/>
<link id="IntToStr"/>
</seealso>
</element>

<!-- class function Visibility: public -->
<element name="TIntegerHelper.TryParse">
<short>Try to convert a string to a Integer, report success or failure</short>
<descr>
<p>
<var>TryParse</var> attempts to convert the string <var>AString</var> to a
Integer, and reports the success of the attempt. If the attempt is succesful,
then <var>True</var> is returned, and the actual value of the Integer is
returned in <var>AValue</var>.
</p>
<p>
It uses the <link id="val"/> function to perform the conversion, so no
localization is taken into account. 
</p>
</descr>
<seealso>
<link id="TIntegerHelper.Parse"/>
<link id="#rtl.system.val">Val</link>
</seealso>
</element>

<!-- function Visibility: public -->
<element name="TIntegerHelper.ToBoolean">
<short>Convert to a boolean value</short>
<descr>
<var>ToBoolean</var> converts the Integer value to a boolean: it returns
<var>True</var> if the value is nonzero, <var>False</var> if it is zero.
</descr>
<seealso>
<link id="TIntegerHelper.ToSingle"/>
<link id="TIntegerHelper.ToDouble"/>
<link id="TIntegerHelper.ToExtended"/>
<link id="TIntegerHelper.ToString"/>
<link id="TIntegerHelper.ToHexString"/>
</seealso>
</element>

<!-- function Visibility: public -->
<element name="TIntegerHelper.ToDouble">
<short>Convert to a double-sized floating point value</short>
<descr>
<var>ToDouble</var> converts the Integer value to a double-sized floating point
value.
</descr>
<seealso>
<link id="TIntegerHelper.ToBoolean"/>
<link id="TIntegerHelper.ToExtended"/>
<link id="TIntegerHelper.ToSingle"/>
<link id="TIntegerHelper.ToString"/>
<link id="TIntegerHelper.ToHexString"/>
</seealso>
</element>

<!-- function Visibility: public -->
<element name="TIntegerHelper.ToExtended">
<short>Convert to an extended-sized floating point value</short>
<descr>
<var>ToDouble</var> converts the Integer value to an extended-sized floating point value.
</descr>
<seealso>
<link id="TIntegerHelper.ToBoolean"/>
<link id="TIntegerHelper.ToSingle"/>
<link id="TIntegerHelper.ToDouble"/>
<link id="TIntegerHelper.ToString"/>
<link id="TIntegerHelper.ToHexString"/>
</seealso>
</element>

<!-- function Visibility: public -->
<element name="TIntegerHelper.ToHexString">
<short>Convert to a hexadecimal string representation</short>
<descr>
<var>ToHexString</var> converts the Integer value to a hexadecimal string
representation. The <var>AMinDigits</var> argument specifies the minimal
number of characters in the resulting string. The string will be left-padded
with zeroes if the representation contains less than  <var>AMinDigits</var>
characters.
</descr>
<seealso>
<link id="TIntegerHelper.ToBoolean"/>
<link id="TIntegerHelper.ToSingle"/>
<link id="TIntegerHelper.ToDouble"/>
<link id="TIntegerHelper.ToString"/>
<link id="TIntegerHelper.ToExtended"/>
</seealso>
</element>

<!-- function Visibility: public -->
<element name="TIntegerHelper.ToSingle">
<short>Convert to an single-sized floating point value</short>
<descr>
<var>ToSingle</var> converts the Integer value to a single-sized floating point value.
</descr>
<seealso>
<link id="TIntegerHelper.ToBoolean"/>
<link id="TIntegerHelper.ToDouble"/>
<link id="TIntegerHelper.ToExtended"/>
<link id="TIntegerHelper.ToString"/>
<link id="TIntegerHelper.ToHexString"/>
</seealso>
</element>

<!--
  ********************************************************************
    #rtl.sysutils.TInt64Helper
  ********************************************************************
-->


<!-- #rtl.sysutils.TInt64Helper Visibility: default -->
<element name="TInt64Helper">
<short>Helper for a Int64-typed ordinal value</short>
<descr>
<var>TInt64Helper</var> contains some auxiliary routines for a Int64-typed ordinal value.
It consists mainly of conversion routines to and from other types.
</descr>
<seealso>
<link id="TStringHelper"/>
<link id="TShortIntHelper"/>
<link id="TSmallIntHelper"/>
<link id="TWordHelper"/>
<link id="TCardinalHelper"/>
<link id="TIntegerHelper"/>
<link id="TByteHelper"/>
<link id="TQWordHelper"/>
<link id="TNativeIntHelper"/>
<link id="TNativeUIntHelper"/>
</seealso>
</element>

<!-- constant Visibility: public -->
<element name="TInt64Helper.MaxValue">
<short>Maximum value for a Int64</short>
<descr>
<var>MaxValue</var> is the biggest value a Int64-typed value can contain.
</descr>
<seealso>
<link id="TInt64Helper.MinValue"/>
</seealso>
</element>

<!-- constant Visibility: public -->
<element name="TInt64Helper.MinValue">
<short>Minimum value for a Int64</short>
<descr>
<var>MinValue</var> is the smallest value a Int64-typed value can contain.    
</descr>
<seealso>
<link id="TInt64Helper.MaxValue"/>
</seealso>
</element>

<!-- class function Visibility: public -->
<element name="TInt64Helper.Parse">
<short>Convert from a string</short>
<descr>
<var>Parse</var> will attempt to convert the string <var>AString</var> to a Int64 value. 
It uses the <link id="StrToInt64"/> function to perform the conversion, so no
localization is taken into account. 
</descr>
<errors>
If the string does not contain a valid Int64 value, an <link id="EConvertError"/> exception is raised.
</errors>
<seealso>
<link id="TInt64Helper.ToString"/>
<link id="TInt64Helper.TryParse"/>
<link id="StrToInt64"/>
</seealso>
</element>

<!-- class function Visibility: public -->
<element name="TInt64Helper.Size">
<short>Size, in bytes, of the Int64 value</short>
<descr>
<var>Size</var> returns the size (in Int64s) of the Int64 value. 
This is equivalent to <var>SizeOf(Int64)</var>.
</descr>
<errors>
None.
</errors>
<seealso>
<link id="#rtl.system.SizeOf">SizeOf</link>
</seealso>
</element>

<!-- class function Visibility: public -->
<element name="TInt64Helper.ToString">
<short>Convert the value to string</short>
<descr>
<var>ToString</var> will, in the class function variant of this method, convert <var>AValue</var> to
a string representation. In the regular method overloaded version of <var>ToString</var>, the Int64 value itself is used.
The <link id="IntToStr"/> function is used to do the conversion.
</descr>
<seealso>
<link id="TInt64Helper.Parse"/>
<link id="IntToStr"/>
</seealso>
</element>

<!-- class function Visibility: public -->
<element name="TInt64Helper.TryParse">
<short>Try to convert a string to a Int64, report success or failure</short>
<descr>
<p>
<var>TryParse</var> attempts to convert the string <var>AString</var> to a
Int64, and reports the success of the attempt. If the attempt is succesful,
then <var>True</var> is returned, and the actual value of the Int64 is
returned in <var>AValue</var>.
</p>
<p>
It uses the <link id="val"/> function to perform the conversion, so no
localization is taken into account. 
</p>
</descr>
<seealso>
<link id="TInt64Helper.Parse"/>
<link id="#rtl.system.val">Val</link>
</seealso>
</element>

<!-- function Visibility: public -->
<element name="TInt64Helper.ToBoolean">
<short>Convert to a boolean value</short>
<descr>
<var>ToBoolean</var> converts the Int64 value to a boolean: it returns
<var>True</var> if the value is nonzero, <var>False</var> if it is zero.
</descr>
<seealso>
<link id="TInt64Helper.ToSingle"/>
<link id="TInt64Helper.ToDouble"/>
<link id="TInt64Helper.ToExtended"/>
<link id="TInt64Helper.ToString"/>
<link id="TInt64Helper.ToHexString"/>
</seealso>
</element>

<!-- function Visibility: public -->
<element name="TInt64Helper.ToDouble">
<short>Convert to a double-sized floating point value</short>
<descr>
<var>ToDouble</var> converts the Int64 value to a double-sized floating point
value.
</descr>
<seealso>
<link id="TInt64Helper.ToBoolean"/>
<link id="TInt64Helper.ToExtended"/>
<link id="TInt64Helper.ToSingle"/>
<link id="TInt64Helper.ToString"/>
<link id="TInt64Helper.ToHexString"/>
</seealso>
</element>

<!-- function Visibility: public -->
<element name="TInt64Helper.ToExtended">
<short>Convert to an extended-sized floating point value</short>
<descr>
<var>ToDouble</var> converts the Int64 value to an extended-sized floating point
value.
</descr>
<seealso>
<link id="TInt64Helper.ToBoolean"/>
<link id="TInt64Helper.ToSingle"/>
<link id="TInt64Helper.ToDouble"/>
<link id="TInt64Helper.ToString"/>
<link id="TInt64Helper.ToHexString"/>
</seealso>
</element>

<!-- function Visibility: public -->
<element name="TInt64Helper.ToHexString">
<short>Convert to a hexadecimal string representation</short>
<descr>
<var>ToHexString</var> converts the Int64 value to a hexadecimal string
representation. The <var>AMinDigits</var> argument specifies the minimal
number of characters in the resulting string. The string will be left-padded
with zeroes if the representation contains less than  <var>AMinDigits</var>
characters.
</descr>
<seealso>
<link id="TInt64Helper.ToBoolean"/>
<link id="TInt64Helper.ToSingle"/>
<link id="TInt64Helper.ToDouble"/>
<link id="TInt64Helper.ToString"/>
<link id="TInt64Helper.ToExtended"/>
</seealso>
</element>

<!-- function Visibility: public -->
<element name="TInt64Helper.ToSingle">
<short>Convert to an single-sized floating point value</short>
<descr>
<var>ToSingle</var> converts the Int64 value to a single-sized floating point
value.
</descr>
<seealso>
<link id="TInt64Helper.ToBoolean"/>
<link id="TInt64Helper.ToDouble"/>
<link id="TInt64Helper.ToExtended"/>
<link id="TInt64Helper.ToString"/>
<link id="TInt64Helper.ToHexString"/>
</seealso>
</element>

<!--
  ********************************************************************
    #rtl.sysutils.TQWordHelper
  ********************************************************************
-->


<!-- #rtl.sysutils.TQWordHelper Visibility: default -->
<element name="TQWordHelper">
<short>Helper for a QWord-typed ordinal value</short>
<descr>
<var>TQWordHelper</var> contains some auxiliary routines for a QWord-typed ordinal value.
It consists mainly of conversion routines to and from other types.
</descr>
<seealso>
<link id="TStringHelper"/>
<link id="TShortIntHelper"/>
<link id="TSmallIntHelper"/>
<link id="TWordHelper"/>
<link id="TCardinalHelper"/>
<link id="TIntegerHelper"/>
<link id="TInt64Helper"/>
<link id="TByteHelper"/>
<link id="TNativeIntHelper"/>
<link id="TNativeUIntHelper"/>
</seealso>
</element>

<!-- constant Visibility: public -->
<element name="TQWordHelper.MaxValue">
<short>Maximum value for a QWord</short>
<descr>
<var>MaxValue</var> is the biggest value a QWord-typed value can contain.
</descr>
<seealso>
<link id="TQWordHelper.MinValue"/>
</seealso>
</element>

<!-- constant Visibility: public -->
<element name="TQWordHelper.MinValue">
<short>Minimum value for a QWord</short>
<descr>
<var>MinValue</var> is the smallest value a QWord-typed value can contain.    
</descr>
<seealso>
<link id="TQWordHelper.MaxValue"/>
</seealso>
</element>

<!-- class function Visibility: public -->
<element name="TQWordHelper.Parse">
<short>Convert from a string</short>
<descr>
<var>Parse</var> will attempt to convert the string <var>AString</var> to a QWord value. 
It uses the <link id="StrToQWord"/> function to perform the conversion, so no
localization is taken into account. 
</descr>
<errors>
If the string does not contain a valid QWord value, an <link id="EConvertError"/> exception is raised.
</errors>
<seealso>
<link id="TQWordHelper.ToString"/>
<link id="TQWordHelper.TryParse"/>
<link id="StrToQWord"/>
</seealso>
</element>

<!-- class function Visibility: public -->
<element name="TQWordHelper.Size">
<short>Size, in bytes, of the QWord value</short>
<descr>
<var>Size</var> returns the size (in QWords) of the QWord value. 
This is equivalent to <var>SizeOf(QWord)</var>.
</descr>
<errors>
None.
</errors>
<seealso>
<link id="#rtl.system.SizeOf">SizeOf</link>
</seealso>
</element>

<!-- class function Visibility: public -->
<element name="TQWordHelper.ToString">
<short>Convert the value to string</short>
<descr>
<var>ToString</var> will, in the class function variant of this method, convert <var>AValue</var> to
a string representation. In the regular method overloaded version of <var>ToString</var>, the QWord value itself is used.
The <link id="IntToStr"/> function is used to do the conversion.
</descr>
<seealso>
<link id="TQWordHelper.Parse"/>
<link id="IntToStr"/>
</seealso>
</element>

<!-- class function Visibility: public -->
<element name="TQWordHelper.TryParse">
<short>Try to convert a string to a QWord, report success or failure</short>
<descr>
<p>
<var>TryParse</var> attempts to convert the string <var>AString</var> to a
QWord, and reports the success of the attempt. If the attempt is succesful,
then <var>True</var> is returned, and the actual value of the QWord is
returned in <var>AValue</var>.
</p>
<p>
It uses the <link id="val"/> function to perform the conversion, so no
localization is taken into account. 
</p>
</descr>
<seealso>
<link id="TQWordHelper.Parse"/>
<link id="#rtl.system.val">Val</link>
</seealso>
</element>

<!-- function Visibility: public -->
<element name="TQWordHelper.ToBoolean">
<short>Convert to a boolean value</short>
<descr>
<var>ToBoolean</var> converts the QWord value to a boolean: it returns
<var>True</var> if the value is nonzero, <var>False</var> if it is zero.
</descr>
<seealso>
<link id="TQWordHelper.ToSingle"/>
<link id="TQWordHelper.ToDouble"/>
<link id="TQWordHelper.ToExtended"/>
<link id="TQWordHelper.ToString"/>
<link id="TQWordHelper.ToHexString"/>
</seealso>
</element>

<!-- function Visibility: public -->
<element name="TQWordHelper.ToDouble">
<short>Convert to a double-sized floating point value</short>
<descr>
<var>ToDouble</var> converts the QWord value to a double-sized floating point
value.
</descr>
<seealso>
<link id="TQWordHelper.ToBoolean"/>
<link id="TQWordHelper.ToExtended"/>
<link id="TQWordHelper.ToSingle"/>
<link id="TQWordHelper.ToString"/>
<link id="TQWordHelper.ToHexString"/>
</seealso>
</element>

<!-- function Visibility: public -->
<element name="TQWordHelper.ToExtended">
<short>Convert to an extended-sized floating point value</short>
<descr>
<var>ToDouble</var> converts the QWord value to an extended-sized floating point value.
</descr>
<seealso>
<link id="TQWordHelper.ToBoolean"/>
<link id="TQWordHelper.ToSingle"/>
<link id="TQWordHelper.ToDouble"/>
<link id="TQWordHelper.ToString"/>
<link id="TQWordHelper.ToHexString"/>
</seealso>
</element>

<!-- function Visibility: public -->
<element name="TQWordHelper.ToHexString">
<short>Convert to a hexadecimal string representation</short>
<descr>
<var>ToHexString</var> converts the QWord value to a hexadecimal string
representation. The <var>AMinDigits</var> argument specifies the minimal
number of characters in the resulting string. The string will be left-padded
with zeroes if the representation contains less than  <var>AMinDigits</var>
characters.
</descr>
<seealso>
<link id="TQWordHelper.ToBoolean"/>
<link id="TQWordHelper.ToSingle"/>
<link id="TQWordHelper.ToDouble"/>
<link id="TQWordHelper.ToString"/>
<link id="TQWordHelper.ToExtended"/>
</seealso>
</element>

<!-- function Visibility: public -->
<element name="TQWordHelper.ToSingle">
<short>Convert to an single-sized floating point value</short>
<descr>
<var>ToSingle</var> converts the QWord value to a single-sized floating point
value.
</descr>
<seealso>
<link id="TQWordHelper.ToBoolean"/>
<link id="TQWordHelper.ToDouble"/>
<link id="TQWordHelper.ToExtended"/>
<link id="TQWordHelper.ToString"/>
<link id="TQWordHelper.ToHexString"/>
</seealso>
</element>

<!--
  ********************************************************************
    #rtl.sysutils.TNativeIntHelper
  ********************************************************************
-->


<!-- #rtl.sysutils.TNativeIntHelper Visibility: default -->
<element name="TNativeIntHelper">
<short>Helper for a NativeInt-typed ordinal value</short>
<descr>
<var>TNativeIntHelper</var> contains some auxiliary routines for a NativeInt-typed ordinal value.
It consists mainly of conversion routines to and from other types.
</descr>
<seealso>
<link id="TStringHelper"/>
<link id="TShortIntHelper"/>
<link id="TSmallIntHelper"/>
<link id="TWordHelper"/>
<link id="TCardinalHelper"/>
<link id="TIntegerHelper"/>
<link id="TInt64Helper"/>
<link id="TQWordHelper"/>
<link id="TNativeIntHelper"/>
<link id="TByteHelper"/>
</seealso>
</element>

<!-- constant Visibility: public -->
<element name="TNativeIntHelper.MaxValue">
<short>Maximum value for a NativeInt</short>
<descr>
<var>MaxValue</var> is the biggest value a NativeInt-typed value can contain.
</descr>
<seealso>
<link id="TNativeIntHelper.MinValue"/>
</seealso>
</element>

<!-- constant Visibility: public -->
<element name="TNativeIntHelper.MinValue">
<short>Minimum value for a NativeInt</short>
<descr>
<var>MinValue</var> is the smallest value a NativeInt-typed value can contain.    
</descr>
<seealso>
<link id="TNativeIntHelper.MaxValue"/>
</seealso>
</element>

<!-- class function Visibility: public -->
<element name="TNativeIntHelper.Parse">
<short>Convert from a string</short>
<descr>
<var>Parse</var> will attempt to convert the string <var>AString</var> to a NativeInt value. 
It uses the <link id="StrToInt"/> function to perform the conversion, so no
localization is taken into account. 
</descr>
<errors>
If the string does not contain a valid NativeInt value, an <link id="EConvertError"/> exception is raised.
</errors>
<seealso>
<link id="TNativeIntHelper.ToString"/>
<link id="TNativeIntHelper.TryParse"/>
<link id="StrToInt"/>
</seealso>
</element>

<!-- class function Visibility: public -->
<element name="TNativeIntHelper.Size">
<short>Size, in bytes, of the NativeInt value</short>
<descr>
<var>Size</var> returns the size (in NativeInts) of the NativeInt value. 
This is equivalent to <var>SizeOf(NativeInt)</var>.
</descr>
<errors>
None.
</errors>
<seealso>
<link id="#rtl.system.SizeOf">SizeOf</link>
</seealso>
</element>

<!-- class function Visibility: public -->
<element name="TNativeIntHelper.ToString">
<short>Convert the value to string</short>
<descr>
<var>ToString</var> will, in the class function variant of this method, convert <var>AValue</var> to
a string representation. In the regular method overloaded version of <var>ToString</var>, the NativeInt value itself is used.
The <link id="IntToStr"/> function is used to do the conversion.
</descr>
<seealso>
<link id="TNativeIntHelper.Parse"/>
<link id="IntToStr"/>
</seealso>
</element>

<!-- class function Visibility: public -->
<element name="TNativeIntHelper.TryParse">
<short>Try to convert a string to a NativeInt, report success or failure</short>
<descr>
<p>
<var>TryParse</var> attempts to convert the string <var>AString</var> to a
NativeInt, and reports the success of the attempt. If the attempt is succesful,
then <var>True</var> is returned, and the actual value of the NativeInt is
returned in <var>AValue</var>.
</p>
<p>
It uses the <link id="val"/> function to perform the conversion, so no
localization is taken into account. 
</p>
</descr>
<seealso>
<link id="TNativeIntHelper.Parse"/>
<link id="#rtl.system.val">Val</link>
</seealso>
</element>

<!-- function Visibility: public -->
<element name="TNativeIntHelper.ToBoolean">
<short>Convert to a boolean value</short>
<descr>
<var>ToBoolean</var> converts the NativeInt value to a boolean: it returns
<var>True</var> if the value is nonzero, <var>False</var> if it is zero.
</descr>
<seealso>
<link id="TNativeIntHelper.ToSingle"/>
<link id="TNativeIntHelper.ToDouble"/>
<link id="TNativeIntHelper.ToExtended"/>
<link id="TNativeIntHelper.ToString"/>
<link id="TNativeIntHelper.ToHexString"/>
</seealso>
</element>

<!-- function Visibility: public -->
<element name="TNativeIntHelper.ToDouble">
<short>Convert to a double-sized floating point value</short>
<descr>
<var>ToDouble</var> converts the NativeInt value to a double-sized floating point
value.
</descr>
<seealso>
<link id="TNativeIntHelper.ToBoolean"/>
<link id="TNativeIntHelper.ToExtended"/>
<link id="TNativeIntHelper.ToSingle"/>
<link id="TNativeIntHelper.ToString"/>
<link id="TNativeIntHelper.ToHexString"/>
</seealso>
</element>

<!-- function Visibility: public -->
<element name="TNativeIntHelper.ToExtended">
<short>Convert to an extended-sized floating point value</short>
<descr>
<var>ToDouble</var> converts the NativeInt value to an extended-sized floating point
value.
</descr>
<seealso>
<link id="TNativeIntHelper.ToBoolean"/>
<link id="TNativeIntHelper.ToSingle"/>
<link id="TNativeIntHelper.ToDouble"/>
<link id="TNativeIntHelper.ToString"/>
<link id="TNativeIntHelper.ToHexString"/>
</seealso>
</element>

<!-- function Visibility: public -->
<element name="TNativeIntHelper.ToHexString">
<short>Convert to a hexadecimal string representation</short>
<descr>
<var>ToHexString</var> converts the NativeInt value to a hexadecimal string
representation. The <var>AMinDigits</var> argument specifies the minimal
number of characters in the resulting string. The string will be left-padded
with zeroes if the representation contains less than  <var>AMinDigits</var>
characters.
</descr>
<seealso>
<link id="TNativeIntHelper.ToBoolean"/>
<link id="TNativeIntHelper.ToSingle"/>
<link id="TNativeIntHelper.ToDouble"/>
<link id="TNativeIntHelper.ToString"/>
<link id="TNativeIntHelper.ToExtended"/>
</seealso>
</element>

<!-- function Visibility: public -->
<element name="TNativeIntHelper.ToSingle">
<short>Convert to an single-sized floating point value</short>
<descr>
<var>ToSingle</var> converts the NativeInt value to a single-sized floating point
value.
</descr>
<seealso>
<link id="TNativeIntHelper.ToBoolean"/>
<link id="TNativeIntHelper.ToDouble"/>
<link id="TNativeIntHelper.ToExtended"/>
<link id="TNativeIntHelper.ToString"/>
<link id="TNativeIntHelper.ToHexString"/>
</seealso>
</element>

<!--
  ********************************************************************
    #rtl.sysutils.TNativeUIntHelper
  ********************************************************************
-->


<!-- #rtl.sysutils.NativeUInt Visibility: default -->
<element name="TNativeUIntHelper">
<short>Helper for a NativeUInt-typed ordinal value</short>
<descr>
<var>NativeUInt</var> contains some auxiliary routines for a NativeUInt-typed ordinal value.
It consists mainly of conversion routines to and from other types.
</descr>
<seealso>
<link id="TStringHelper"/>
<link id="TShortIntHelper"/>
<link id="TSmallIntHelper"/>
<link id="TWordHelper"/>
<link id="TCardinalHelper"/>
<link id="TIntegerHelper"/>
<link id="TInt64Helper"/>
<link id="TQWordHelper"/>
<link id="TNativeIntHelper"/>
<link id="TByteHelper"/>
</seealso>
</element>

<!-- constant Visibility: public -->
<element name="TNativeUIntHelper.MaxValue">
<short>Maximum value for a NativeUInt</short>
<descr>
<var>MaxValue</var> is the biggest value a NativeUInt-typed value can contain.
</descr>
<seealso>
<link id="NativeUInt.MinValue"/>
</seealso>
</element>

<!-- constant Visibility: public -->
<element name="TNativeUIntHelper.MinValue">
<short>Minimum value for a NativeUInt</short>
<descr>
<var>MinValue</var> is the smallest value a NativeUInt-typed value can contain.    
</descr>
<seealso>
<link id="NativeUInt.MaxValue"/>
</seealso>
</element>

<!-- class function Visibility: public -->
<element name="TNativeUIntHelper.Parse">
<short>Convert from a string</short>
<descr>
<var>Parse</var> will attempt to convert the string <var>AString</var> to a NativeUInt value. 
It uses the <link id="StrToInt"/> function to perform the conversion, so no
localization is taken into account. 
</descr>
<errors>
If the string does not contain a valid NativeUInt value, an <link id="EConvertError"/> exception is raised.
</errors>
<seealso>
<link id="NativeUInt.ToString"/>
<link id="NativeUInt.TryParse"/>
<link id="StrToInt"/>
</seealso>
</element>

<!-- class function Visibility: public -->
<element name="TNativeUIntHelper.Size">
<short>Size, in bytes, of the NativeUInt value</short>
<descr>
<var>Size</var> returns the size (in NativeUInts) of the NativeUInt value. 
This is equivalent to <var>SizeOf(NativeUInt)</var>.
</descr>
<errors>
None.
</errors>
<seealso>
<link id="#rtl.system.SizeOf">SizeOf</link>
</seealso>
</element>

<!-- class function Visibility: public -->
<element name="TNativeUIntHelper.ToString">
<short>Convert the value to string</short>
<descr>
<var>ToString</var> will, in the class function variant of this method, convert <var>AValue</var> to
a string representation. In the regular method overloaded version of <var>ToString</var>, the NativeUInt value itself is used.
The <link id="IntToStr"/> function is used to do the conversion.
</descr>
<seealso>
<link id="NativeUInt.Parse"/>
<link id="IntToStr"/>
</seealso>
</element>

<!-- class function Visibility: public -->
<element name="TNativeUIntHelper.TryParse">
<short>Try to convert a string to a NativeUInt, report success or failure</short>
<descr>
<p>
<var>TryParse</var> attempts to convert the string <var>AString</var> to a
NativeUInt, and reports the success of the attempt. If the attempt is succesful,
then <var>True</var> is returned, and the actual value of the NativeUInt is
returned in <var>AValue</var>.
</p>
<p>
It uses the <link id="val"/> function to perform the conversion, so no
localization is taken into account. 
</p>
</descr>
<seealso>
<link id="NativeUInt.Parse"/>
<link id="#rtl.system.val">Val</link>
</seealso>
</element>

<!-- function Visibility: public -->
<element name="TNativeUIntHelper.ToBoolean">
<short>Convert to a boolean value</short>
<descr>
<var>ToBoolean</var> converts the NativeUInt value to a boolean: it returns
<var>True</var> if the value is nonzero, <var>False</var> if it is zero.
</descr>
<seealso>
<link id="NativeUInt.ToSingle"/>
<link id="NativeUInt.ToDouble"/>
<link id="NativeUInt.ToExtended"/>
<link id="NativeUInt.ToString"/>
<link id="NativeUInt.ToHexString"/>
</seealso>
</element>

<!-- function Visibility: public -->
<element name="TNativeUIntHelper.ToDouble">
<short>Convert to a double-sized floating point value</short>
<descr>
<var>ToDouble</var> converts the NativeUInt value to a double-sized floating point
value.
</descr>
<seealso>
<link id="NativeUInt.ToBoolean"/>
<link id="NativeUInt.ToExtended"/>
<link id="NativeUInt.ToSingle"/>
<link id="NativeUInt.ToString"/>
<link id="NativeUInt.ToHexString"/>
</seealso>
</element>

<!-- function Visibility: public -->
<element name="TNativeUIntHelper.ToExtended">
<short>Convert to an extended-sized floating point value</short>
<descr>
<var>ToDouble</var> converts the NativeUInt value to an extended-sized floating point
value.
</descr>
<seealso>
<link id="NativeUInt.ToBoolean"/>
<link id="NativeUInt.ToSingle"/>
<link id="NativeUInt.ToDouble"/>
<link id="NativeUInt.ToString"/>
<link id="NativeUInt.ToHexString"/>
</seealso>
</element>

<!-- function Visibility: public -->
<element name="TNativeUIntHelper.ToHexString">
<short>Convert to a hexadecimal string representation</short>
<descr>
<var>ToHexString</var> converts the NativeUInt value to a hexadecimal string
representation. The <var>AMinDigits</var> argument specifies the minimal
number of characters in the resulting string. The string will be left-padded
with zeroes if the representation contains less than  <var>AMinDigits</var>
characters.
</descr>
<seealso>
<link id="NativeUInt.ToBoolean"/>
<link id="NativeUInt.ToSingle"/>
<link id="NativeUInt.ToDouble"/>
<link id="NativeUInt.ToString"/>
<link id="NativeUInt.ToExtended"/>
</seealso>
</element>

<!-- function Visibility: public -->
<element name="TNativeUIntHelper.ToSingle">
<short>Convert to an single-sized floating point value</short>
<descr>
<var>ToSingle</var> converts the NativeUInt value to a single-sized floating point
value.
</descr>
<seealso>
<link id="NativeUInt.ToBoolean"/>
<link id="NativeUInt.ToDouble"/>
<link id="NativeUInt.ToExtended"/>
<link id="NativeUInt.ToString"/>
<link id="NativeUInt.ToHexString"/>
</seealso>
</element>

<!-- enumeration type Visibility: default -->
<element name="TUseBoolStrs">
<short>Use boolean strings</short>
<descr>
<var>TUseBoolStrs</var> is an enumerated type which indicates whether bool
strs must be used when converting boolean to strings.
</descr>
<seealso>
</seealso>
</element>

<!-- enumeration value Visibility: default -->
<element name="TUseBoolStrs.False">
<short>Numerical values should be used (0 and 1)</short>
</element>

<!-- enumeration value Visibility: default -->
<element name="TUseBoolStrs.True">
<short>String representations should be used.</short>
</element>

<!--
  ********************************************************************
    #rtl.sysutils.TBooleanHelper
  ********************************************************************
-->

<!-- #rtl.sysutils.TBooleanHelper Visibility: default -->
<element name="TBooleanHelper">
<short>Helper for the <var>Boolean</var> type.</short>
<descr>
<var>TBooleanHelper</var> is a helper type for the <var>Boolean</var> type.
It contains mostly conversion routines to and from other types.
</descr>
<seealso>
<link id="TStringHelper"/>
<link id="TShortIntHelper"/>
<link id="TSmallIntHelper"/>
<link id="TWordHelper"/>
<link id="TCardinalHelper"/>
<link id="TIntegerHelper"/>
<link id="TInt64Helper"/>
<link id="TQWordHelper"/>
<link id="TNativeIntHelper"/>
<link id="TByteHelper"/>
<link id="TByteBoolHelper"/>
<link id="TWordBoolHelper"/>
<link id="TLongBoolHelper"/>
</seealso>
</element>

<!-- class function Visibility: public -->
<element name="TBooleanHelper.Parse">
<short>Convert string value to boolean value.</short>
<descr>
<var>Parse</var> attempts to convert the string <var>S</var> to a boolean value.
It uses the <link id="StrToBool"/> function to perform the conversion.
</descr>
<errors>
If <var>S</var> does not contain a valid string representation, then an
<link id="EConvertError"/> exception is raised.
</errors>
<seealso>
<link id="TBooleanHelper.TryToParse"/>
<link id="TBooleanHelper.ToString"/>
<link id="TBooleanHelper.ToInteger"/>
</seealso>
</element>

<!-- class function Visibility: public -->
<element name="TBooleanHelper.Size">
<short>Return the size (in bytes) of the </short>
<descr>
<var>Size</var> returns the size (in bytes) of the boolean value. This is
equivalent to <var>SizeOf(Boolean)</var>.
</descr>
<seealso>
<link id="#rtl.system.SizeOf">SizeOf</link>
</seealso>
</element>

<!-- class function Visibility: public -->
<element name="TBooleanHelper.ToString">
<short>Convert a boolean value to string.</short>
<descr>
<p>
<var>ToString</var> will, in the class method version, convert the
<var>AValue</var> boolean to a string representation. In the function method
version the boolean value itself (<var>Self</var>) will be converted.
</p>
<p>
If the <var>UseBoolStrs</var> parameter equals <var>TUseBoolStrs.True</var>, then
the string representation will use the boolean strings <link id="BoolStrs"/>.
The default value for <var>UseBoolStrs</var> is <var>TUseBoolStrs.False</var>.
</p>
<p>
The conversion is done using the <link id="BoolTostr"/> function.
</p>
</descr>
<seealso>
<link id="BoolStrs"/>
<link id="BoolToStr"/>
</seealso>
</element>

<!-- class function Visibility: public -->
<element name="TBooleanHelper.TryToParse">
<short>Try to convert a string to a boolean value</short>
<descr>
<var>TryToParse</var> will attempt to convert the string <var>S</var> to a
boolean value. If the attempt is succesful, <var>True</var> is returned, and
the actual value is returned in <var>AValue</var>. If the attempt failed,
<var>False</var> is returned.
</descr>
<seealso>
<link id="TBooleanHelper.Parse"/>
<link id="TBooleanHelper.ToString"/>
</seealso>
</element>

<!-- function Visibility: public -->
<element name="TBooleanHelper.ToInteger">
<short>Convert to an integer value</short>
<descr>
<var>ToInteger</var> will return the boolean value, typecasted to <var>Integer</var>.
</descr>
<seealso>
<link id="TBooleanHelper.ToString"/>
</seealso>
</element>

<!--
  ********************************************************************
    #rtl.sysutils.TByteBoolHelper
  ********************************************************************
-->


<!-- #rtl.sysutils.TByteBoolHelper Visibility: default -->
<element name="TByteBoolHelper">
<short>Helper for the <var>ByteBool</var> type.</short>
<descr>
<var>TByteBoolHelper</var> is a helper type for the <var>ByteBool</var> type.
It contains mostly conversion routines to and from other types.
</descr>
<seealso>
<link id="TStringHelper"/>
<link id="TShortIntHelper"/>
<link id="TSmallIntHelper"/>
<link id="TWordHelper"/>
<link id="TCardinalHelper"/>
<link id="TIntegerHelper"/>
<link id="TInt64Helper"/>
<link id="TQWordHelper"/>
<link id="TNativeIntHelper"/>
<link id="TByteHelper"/>
<link id="TByteBoolHelper"/>
<link id="TWordBoolHelper"/>
<link id="TLongBoolHelper"/>
</seealso>
</element>

<!-- class function Visibility: public -->
<element name="TByteBoolHelper.Parse">
<short>Convert string value to ByteBool value.</short>
<descr>
<var>Parse</var> attempts to convert the string <var>S</var> to a ByteBool value.
It uses the <link id="StrToBool"/> function to perform the conversion.
</descr>
<errors>
If <var>S</var> does not contain a valid string representation, then an
<link id="EConvertError"/> exception is raised.
</errors>
<seealso>
<link id="TByteBoolHelper.TryToParse"/>
<link id="TByteBoolHelper.ToString"/>
<link id="TByteBoolHelper.ToInteger"/>
</seealso>
</element>

<!-- class function Visibility: public -->
<element name="TByteBoolHelper.Size">
<short>Return the size (in bytes) of the </short>
<descr>
<var>Size</var> returns the size (in bytes) of the ByteBool value. This is
equivalent to <var>SizeOf(ByteBool)</var>.
</descr>
<seealso>
<link id="#rtl.system.SizeOf">SizeOf</link>
</seealso>
</element>

<!-- class function Visibility: public -->
<element name="TByteBoolHelper.ToString">
<short>Convert a ByteBool value to string.</short>
<descr>
<p>
<var>ToString</var> will, in the class method version, convert the
<var>AValue</var> ByteBool to a string representation. In the function method
version the ByteBool value itself (<var>Self</var>) will be converted.
</p>
<p>
If the <var>UseBoolStrs</var> parameter equals <var>TUseBoolStrs.True</var>, then
the string representation will use the ByteBool strings <link id="BoolStrs"/>.
The default value for <var>UseBoolStrs</var> is <var>TUseBoolStrs.False</var>.
</p>
<p>
The conversion is done using the <link id="BoolTostr"/> function.
</p>
</descr>
<seealso>
<link id="BoolStrs"/>
<link id="BoolToStr"/>
</seealso>
</element>

<!-- class function Visibility: public -->
<element name="TByteBoolHelper.TryToParse">
<short>Try to convert a string to a ByteBool value</short>
<descr>
<var>TryToParse</var> will attempt to convert the string <var>S</var> to a
ByteBool value. If the attempt is succesful, <var>True</var> is returned, and
the actual value is returned in <var>AValue</var>. If the attempt failed,
<var>False</var> is returned.
</descr>
<seealso>
<link id="TByteBoolHelper.Parse"/>
<link id="TByteBoolHelper.ToString"/>
</seealso>
</element>

<!-- function Visibility: public -->
<element name="TByteBoolHelper.ToInteger">
<short>Convert to an integer value</short>
<descr>
<var>ToInteger</var> will return the ByteBool value, typecasted to <var>Integer</var>.
</descr>
<seealso>
<link id="TByteBoolHelper.ToString"/>
</seealso>
</element>

<!--
  ********************************************************************
    #rtl.sysutils.TWordBoolHelper
  ********************************************************************
-->



<!-- #rtl.sysutils.TWordBoolHelper Visibility: default -->
<element name="TWordBoolHelper">
<short>Helper for the <var>WordBool</var> type.</short>
<descr>
<var>TWordBoolHelper</var> is a helper type for the <var>WordBool</var> type.
It contains mostly conversion routines to and from other types.
</descr>
<seealso>
<link id="TStringHelper"/>
<link id="TShortIntHelper"/>
<link id="TSmallIntHelper"/>
<link id="TWordHelper"/>
<link id="TCardinalHelper"/>
<link id="TIntegerHelper"/>
<link id="TInt64Helper"/>
<link id="TQWordHelper"/>
<link id="TNativeIntHelper"/>
<link id="TByteHelper"/>
<link id="TByteBoolHelper"/>
<link id="TWordBoolHelper"/>
<link id="TLongBoolHelper"/>
</seealso>
</element>

<!-- class function Visibility: public -->
<element name="TWordBoolHelper.Parse">
<short>Convert string value to WordBool value.</short>
<descr>
<var>Parse</var> attempts to convert the string <var>S</var> to a WordBool value.
It uses the <link id="StrToBool"/> function to perform the conversion.
</descr>
<errors>
If <var>S</var> does not contain a valid string representation, then an
<link id="EConvertError"/> exception is raised.
</errors>
<seealso>
<link id="TWordBoolHelper.TryToParse"/>
<link id="TWordBoolHelper.ToString"/>
<link id="TWordBoolHelper.ToInteger"/>
</seealso>
</element>

<!-- class function Visibility: public -->
<element name="TWordBoolHelper.Size">
<short>Return the size (in bytes) of the </short>
<descr>
<var>Size</var> returns the size (in bytes) of the WordBool value. This is
equivalent to <var>SizeOf(WordBool)</var>.
</descr>
<seealso>
<link id="#rtl.system.SizeOf">SizeOf</link>
</seealso>
</element>

<!-- class function Visibility: public -->
<element name="TWordBoolHelper.ToString">
<short>Convert a WordBool value to string.</short>
<descr>
<p>
<var>ToString</var> will, in the class method version, convert the
<var>AValue</var> WordBool to a string representation. In the function method
version the WordBool value itself (<var>Self</var>) will be converted.
</p>
<p>
If the <var>UseBoolStrs</var> parameter equals <var>TUseBoolStrs.True</var>, then
the string representation will use the WordBool strings <link id="BoolStrs"/>.
The default value for <var>UseBoolStrs</var> is <var>TUseBoolStrs.False</var>.
</p>
<p>
The conversion is done using the <link id="BoolTostr"/> function.
</p>
</descr>
<seealso>
<link id="BoolStrs"/>
<link id="BoolToStr"/>
</seealso>
</element>

<!-- class function Visibility: public -->
<element name="TWordBoolHelper.TryToParse">
<short>Try to convert a string to a WordBool value</short>
<descr>
<var>TryToParse</var> will attempt to convert the string <var>S</var> to a
WordBool value. If the attempt is succesful, <var>True</var> is returned, and
the actual value is returned in <var>AValue</var>. If the attempt failed,
<var>False</var> is returned.
</descr>
<seealso>
<link id="TWordBoolHelper.Parse"/>
<link id="TWordBoolHelper.ToString"/>
</seealso>
</element>

<!-- function Visibility: public -->
<element name="TWordBoolHelper.ToInteger">
<short>Convert to an integer value</short>
<descr>
<var>ToInteger</var> will return the WordBool value, typecasted to <var>Integer</var>.
</descr>
<seealso>
<link id="TWordBoolHelper.ToString"/>
</seealso>
</element>

<!--
  ********************************************************************
    #rtl.sysutils.TLongBoolHelper
  ********************************************************************
-->



<!-- #rtl.sysutils.TLongBoolHelper Visibility: default -->
<element name="TLongBoolHelper">
<short>Helper for the <var>LongBool</var> type.</short>
<descr>
<var>TLongBoolHelper</var> is a helper type for the <var>LongBool</var> type.
It contains mostly conversion routines to and from other types.
</descr>
<seealso>
<link id="TStringHelper"/>
<link id="TShortIntHelper"/>
<link id="TSmallIntHelper"/>
<link id="TWordHelper"/>
<link id="TCardinalHelper"/>
<link id="TIntegerHelper"/>
<link id="TInt64Helper"/>
<link id="TQWordHelper"/>
<link id="TNativeIntHelper"/>
<link id="TByteHelper"/>
<link id="TByteBoolHelper"/>
<link id="TWordBoolHelper"/>
<link id="TLongBoolHelper"/>
</seealso>
</element>

<!-- class function Visibility: public -->
<element name="TLongBoolHelper.Parse">
<short>Convert string value to LongBool value.</short>
<descr>
<var>Parse</var> attempts to convert the string <var>S</var> to a LongBool value.
It uses the <link id="StrToBool"/> function to perform the conversion.
</descr>
<errors>
If <var>S</var> does not contain a valid string representation, then an
<link id="EConvertError"/> exception is raised.
</errors>
<seealso>
<link id="TLongBoolHelper.TryToParse"/>
<link id="TLongBoolHelper.ToString"/>
<link id="TLongBoolHelper.ToInteger"/>
</seealso>
</element>

<!-- class function Visibility: public -->
<element name="TLongBoolHelper.Size">
<short>Return the size (in bytes) of the </short>
<descr>
<var>Size</var> returns the size (in bytes) of the LongBool value. This is
equivalent to <var>SizeOf(LongBool)</var>.
</descr>
<seealso>
<link id="#rtl.system.SizeOf">SizeOf</link>
</seealso>
</element>

<!-- class function Visibility: public -->
<element name="TLongBoolHelper.ToString">
<short>Convert a LongBool value to string.</short>
<descr>
<p>
<var>ToString</var> will, in the class method version, convert the
<var>AValue</var> LongBool to a string representation. In the function method
version the LongBool value itself (<var>Self</var>) will be converted.
</p>
<p>
If the <var>UseBoolStrs</var> parameter equals <var>TUseBoolStrs.True</var>, then
the string representation will use the LongBool strings <link id="BoolStrs"/>.
The default value for <var>UseBoolStrs</var> is <var>TUseBoolStrs.False</var>.
</p>
<p>
The conversion is done using the <link id="BoolTostr"/> function.
</p>
</descr>
<seealso>
<link id="BoolStrs"/>
<link id="BoolToStr"/>
</seealso>
</element>

<!-- class function Visibility: public -->
<element name="TLongBoolHelper.TryToParse">
<short>Try to convert a string to a LongBool value</short>
<descr>
<var>TryToParse</var> will attempt to convert the string <var>S</var> to a
LongBool value. If the attempt is succesful, <var>True</var> is returned, and
the actual value is returned in <var>AValue</var>. If the attempt failed,
<var>False</var> is returned.
</descr>
<seealso>
<link id="TLongBoolHelper.Parse"/>
<link id="TLongBoolHelper.ToString"/>
</seealso>
</element>

<!-- function Visibility: public -->
<element name="TLongBoolHelper.ToInteger">
<short>Convert to an integer value</short>
<descr>
<var>ToInteger</var> will return the LongBool value, typecasted to <var>Integer</var>.
</descr>
<seealso>
<link id="TLongBoolHelper.ToString"/>
</seealso>
</element>

<!--
  ********************************************************************
    #rtl.sysutils.TSingleHelper
  ********************************************************************
-->

<!-- #rtl.sysutils.TSingleHelper Visibility: default -->
<element name="TSingleHelper">
<short>Helper for Single floating point type</short>
<descr>
<var>TSingleHelper</var> is the helper type for the single-sized floating point type.
It contains some conversion methods, as well as access to the low-level
structure of the floating-point representation of a single.
</descr>
<seealso>
<link id="TDoubleHelper"/>
<link id="TExtendedHelper"/>
</seealso>
</element>

<!-- constant Visibility: public -->
<element name="TSingleHelper.Epsilon">
<short>Precision for this floating point type</short>
<descr>
<var>Epsilon</var> returns the precision of the floating point value :
differences smaller than this value cannot be detected or represented.
It can also be viewed as the smallest positive value that can be
represented.
</descr>
<seealso>
<link id="TSingleHelper.MinValue"/>
<link id="TSingleHelper.MaxValue"/>
</seealso>
</element>

<!-- constant Visibility: public -->
<element name="TSingleHelper.MaxValue">
<short>Largest possible value for the <var>Single</var> floating point type</short>
<descr>
<var>MaxValue</var> is the largest possible value that can be represented by
the <var>Single</var> floating point type. For bigger values, <var>Double</var> or
<var>Extended</var> types must be used.
</descr>
<seealso>
<link id="TSingleHelper.MinValue"/>
<link id="TSingleHelper.Epsilon"/>
</seealso>
</element>

<!-- constant Visibility: public -->
<element name="TSingleHelper.MinValue">
<short>Smallest (negative) possible value for the <var>Single</var> floating point type</short>
<descr>
<var>MaxValue</var> is the largest possible value that can be represented by
the <var>Single</var> floating point type. For bigger values,
<var>Double</var> or
<var>Extended</var> types must be used.
</descr>
<seealso>
<link id="TSingleHelper.MaxValue"/>
<link id="TSingleHelper.Epsilon"/> 
<link id="TSingleHelper.PositiveInfinity"/>
<link id="TSingleHelper.NegativeInfinity"/>
<link id="TSingleHelper.NaN"/>
</seealso>
</element>

<!-- constant Visibility: public -->
<element name="TSingleHelper.PositiveInfinity">
<short>Positive infinity as represented by a single floating point type</short>
<descr>
<var>PositiveInfinity</var> is the value representing positive infinity in a
single-sized floating point value.
</descr>
<seealso>
<link id="TSingleHelper.MaxValue"/>
<link id="TSingleHelper.MinValue"/>
<link id="TSingleHelper.Epsilon"/>
<link id="TSingleHelper.NegativeInfinity"/>
<link id="TSingleHelper.NaN"/>
</seealso>
</element>

<!-- constant Visibility: public -->
<element name="TSingleHelper.NegativeInfinity">
<short>Negative infinity as represented by a single floating point type</short>
<descr>
<var>NegativeInfinity</var> is the value representing negative infinity in a
single-sized floating point value.
</descr>
<seealso>
<link id="TSingleHelper.MaxValue"/>
<link id="TSingleHelper.MinValue"/>
<link id="TSingleHelper.Epsilon"/>
<link id="TSingleHelper.PositiveInfinity"/>
<link id="TSingleHelper.NaN"/>
</seealso>
</element>

<!-- constant Visibility: public -->
<element name="TSingleHelper.NaN">
<short>Representation of NaN (Not a Number)</short>
<descr>
<var>NaN</var> is the Representation of NaN (Not a Number) for a single-sized floating point type.
</descr>
<seealso>
<link id="TSingleHelper.MaxValue"/>
<link id="TSingleHelper.MinValue"/>
<link id="TSingleHelper.Epsilon"/> 
<link id="TSingleHelper.PositiveInfinity"/>
<link id="TSingleHelper.NegativeInfinity"/>
</seealso>

</element>

<!-- class function Visibility: public -->
<element name="TSingleHelper.IsNan">
<short>Check whether a value equals <var>NaN</var>.</short>
<descr>
<var>IsNan</var> checks whether a single-sized floating point value is
<var>NaN</var> (Not a Number). If so, it returns <var>True</var>.
When the class function version is used, the value can be specified using
<var>AValue</var>. In the method version, the used value is (<var>Self</var>).
</descr>
<seealso>
<link id="TSingleHelper.IsInfinity"/>
<link id="TSingleHelper.IsPositiveInfinity"/>
<link id="TSingleHelper.IsNegativeInfinity"/>
</seealso>
</element>

<!-- class function Visibility: public -->
<element name="TSingleHelper.IsInfinity">
<short>Check whether a value is positive or negative infinity.</short>
<descr>
<var>IsInfinity</var> checks whether a  single-sized floating point value
represents a positive or negative infinity. If so, it returns <var>True</var>.
When the class function version is used, the value can be specified using
<var>AValue</var>. In the method version, the used value is
(<var>Self</var>).
</descr>
<seealso>
<link id="TSingleHelper.IsNan"/>
<link id="TSingleHelper.IsPositiveInfinity"/>
<link id="TSingleHelper.IsNegativeInfinity"/>
</seealso>
</element>

<!-- class function Visibility: public -->
<element name="TSingleHelper.IsNegativeInfinity">
<short>Check whether a value is  negative infinity.</short>
<descr>
<var>IsNegativeInfinity</var> checks whether a  single-sized floating point value
represents a negative infinity. If so, it returns <var>True</var>.
When the class function version is used, the value can be specified using
<var>AValue</var>. In the method version, the used value is
(<var>Self</var>).
</descr>
<seealso>
<link id="TSingleHelper.IsNan"/>
<link id="TSingleHelper.IsPositiveInfinity"/>
<link id="TSingleHelper.IsInfinity"/>
</seealso>
</element>

<!-- class function Visibility: public -->
<element name="TSingleHelper.IsPositiveInfinity">
<short>Check whether a value is positive infinity.</short>
<descr>
<var>IsPositiveInfinity</var> checks whether a  single-sized floating point value
represents a positive infinity. If so, it returns <var>True</var>.
When the class function version is used, the value can be specified using
<var>AValue</var>. In the method version, the used value is
(<var>Self</var>).
</descr>
<seealso>
<link id="TSingleHelper.IsNan"/>
<link id="TSingleHelper.IsNegativeInfinity"/>
<link id="TSingleHelper.IsInfinity"/>
</seealso>
</element>

<!-- class function Visibility: public -->
<element name="TSingleHelper.Parse">
<short>Convert a string to a floating point value</short>
<descr>
<var>Parse</var> will try to convert <var>AString</var> to a single-sized
floating point value. It will take into account internationalization settings.
(it uses <var>FloatToStr</var>).
</descr>
<errors>
If the string <var>AString</var> is not a valid floating-point value, a
<link id="EConvertError"/> exception is raised.
</errors>
<seealso>
<link id="FloatToStr"/>
<link id="TSingleHelper.ToString"/>
<link id="TSingleHelper.TryParse"/>
</seealso>
</element>

<!-- class function Visibility: public -->
<element name="TSingleHelper.Size">
<short>Size (in bytes) of a single-sized floating point value.</short>
<descr>
<var>Size</var> is the size (in bytes) of a single-sized floating point value.
It is equivalent to calling <var>SizeOf(Single)</var>.
</descr>
<seealso>
<link id="#rtl.system.SizeOf">SizeOf</link>
</seealso>
</element>

<!-- class function Visibility: public -->
<element name="TSingleHelper.ToString">
<short>Convert a single-sized floating point value to a string</short>
<descr>
<p>
<var>ToString</var> will convert <var>AValue</var> (or <var>Self</var> in
the plain method version) to a string. Optionally <var>FormatSettings</var>
can be specified, to be able to specify the decimal separator character to
use.
</p>
<p>
Additionally, a precision <var>APrecision</var> and number of digits
<var>ADigits</var> can be specified, in conjunction with a
<var>AFormat</var> parameter to specify the form in which the floating-point
value must be represented. (see <link id="TFloatFormat"/> for an explanation
of the various values). In this case, <link id="FloatToStrF"/> is used to
format the value. In the absence of these parameters, <link id="FloatToStr"/>
is called.
</p>
</descr>
<seealso>
<link id="FloatToStr"/>
<link id="FloatToStrF"/>
<link id="TFloatFormat"/>
</seealso>
</element>

<!-- class function Visibility: public -->
<element name="TSingleHelper.TryParse">
<short>Try to convert a string to a single-sized floating point value.</short>
<descr>
<p>
<var>TryParse</var> attempts to convert the string <var>AString</var> to
a single-sized floating point value and reports <var>True</var> if the
conversion was succesful. 
In that case the parsed value is returned in <var>AValue</var>.
</p>
<p>
If the conversion failed, <var>False</var> is returned.
</p>
</descr>
<seealso>
<link id="TSingleHelper.Parse"/>
<link id="TSingleHelper.ToString"/>
</seealso>
</element>

<!-- procedure Visibility: public -->
<element name="TSingleHelper.BuildUp">
<short>Build a single-sized floating point from its composing parts</short>
<descr>
<var>BuildUp</var> will compose a single-sized floating point value from the
sign <var>ASignFlag</var>, mantissa <var>AMantissa</var> and exponent
<var>AExponent</var>. It simply sets the <link
id="TSingleHelper.Sign">Sign</link>, <link id="TSingleHelper.Exp">Exp</link>
and <link id="TSingleHelper.Frac">Frac</link> properties in 1 call.
</descr>
<seealso>
<link id="TSingleHelper.Sign"/>
<link id="TSingleHelper.Exp"/>
<link id="TSingleHelper.Frac"/>
</seealso>
</element>

<!-- function Visibility: public -->
<element name="TSingleHelper.Exponent">
<short>Exponent of the floating-point value</short>
<descr>
<var>Exponent</var> is the value <var>X</var> in the representation of the
floating-point value in <var>m*2^X</var>, i.e. the exponent.
</descr>
<seealso>
<link id="TSingleHelper.Sign"/>
<link id="TSingleHelper.Exp"/> 
<link id="TSingleHelper.Frac"/>
<link id="TSingleHelper.Fraction"/>
<link id="TSingleHelper.Mantissa"/>
</seealso>
</element>

<!-- function Visibility: public -->
<element name="TSingleHelper.Fraction">
<short>Fraction of the floating-point value</short>
<descr>
<var>Fraction</var> is the decimal part of the floating-point value.
</descr>
<seealso>
<link id="TSingleHelper.Sign"/>
<link id="TSingleHelper.Exp"/> 
<link id="TSingleHelper.Exponent"/> 
<link id="TSingleHelper.Frac"/>
<link id="TSingleHelper.Mantissa"/>
</seealso>
</element>

<!-- function Visibility: public -->
<element name="TSingleHelper.Mantissa">
<short>Mantissa of the floating-point</short>
<descr>
<var>Mantissa</var> is the value of the significand without the hidden bit.
This means it the plain bit pattern as it is stored in memory.
</descr>
<seealso>
<link id="TSingleHelper.Sign"/>
<link id="TSingleHelper.Exp"/> 
<link id="TSingleHelper.Exponent"/> 
<link id="TSingleHelper.Frac"/>
<link id="TSingleHelper.Fraction"/>
</seealso>
</element>

<!-- function Visibility: public -->
<element name="TSingleHelper.SpecialType">
<short>Return the type of the single-sized floating point value</short>
<descr>
<p>
<var>SpecialType</var> checks whether the single-sized floating point value
equals one of several special values, and returns an enumerated value
describing which value this is. See <link id="TFloatSpecial"/> for an
explanation of the possible values.
</p>
</descr>
<seealso>
<link id="TFloatSpecial"/>
</seealso>
</element>

<!-- property Visibility: public -->
<element name="TSingleHelper.Bytes">
<short>Indexed access to the individual bytes of the floating point value</short>
<descr>
<var>Bytes</var> can be used to get or set the various bytes that make up
the single-sized floating point value. The index runs from 0 to
<var>Size-1</var>.
</descr>
<seealso>
<link id="TSingleHelper.Words"/>
<link id="TSingleHelper.Size"/>
</seealso>
</element>

<!-- property Visibility: public -->
<element name="TSingleHelper.Words">
<short>Indexed access to the words that make up the floating point value</short>
<descr>
<var>Words</var> can be used to get or set the various bytes that make up
the single-sized floating point value. The index runs from 0 to <var>(Size-1) div 2</var>.
</descr>
<seealso>
<link id="TSingleHelper.Bytes"/>
<link id="TSingleHelper.Size"/> 
</seealso>
</element>

<!-- property Visibility: public -->
<element name="TSingleHelper.Sign">
<short>Sign of the floating point value</short>
<descr>
<var>Sign</var> returns <var>True</var> if the sign bit of the value is set (i.e. it is
a negative value) or <var>False</var> if it is not set (i.e. it is a positive value).
</descr>
<seealso>
<link id="TSingleHelper.Bytes"/>
<link id="TSingleHelper.Exp"/>
<link id="TSingleHelper.Frac"/>
<link id="TSingleHelper.Mantissa"/>
<link id="TSingleHelper.Fraction"/>
<link id="TSingleHelper.Exponent"/>
</seealso>
</element>

<!-- property Visibility: public -->
<element name="TSingleHelper.Exp">
<short>The bit pattern of the exponent as stored in memory.</short>
<descr>
<var>Exp</var> is the internal representation of the <link id="TSingleHelper.Exponent">Exponent</link>.
</descr>
<seealso>
<link id="TSingleHelper.Bytes"/>
<link id="TSingleHelper.Sign"/>
<link id="TSingleHelper.Frac"/>
<link id="TSingleHelper.Mantissa"/>
<link id="TSingleHelper.Fraction"/>
<link id="TSingleHelper.Exponent"/>
</seealso>
</element>

<!-- property Visibility: public -->
<element name="TSingleHelper.Frac">
<short>Bitpattern that makes up the fractional part.</short>
<descr>
<var>Frac</var> is the bit pattern representing the fractional part
(significand) including the preceding 1 (the hidden bit).
</descr>
<seealso>
<link id="TSingleHelper.Bytes"/>
<link id="TSingleHelper.Sign"/>
<link id="TSingleHelper.Exp"/>
<link id="TSingleHelper.Mantissa"/>
<link id="TSingleHelper.Fraction"/>
<link id="TSingleHelper.Exponent"/>
</seealso>
</element>

<!--
  ********************************************************************
    #rtl.sysutils.TDoubleHelper
  ********************************************************************
-->

<!-- #rtl.sysutils.TDoubleHelper Visibility: default -->
<element name="TDoubleHelper">
<short>Helper for Double floating point type</short>
<descr>
<var>TDoubleHelper</var> is the helper type for the Double-sized floating point type.
It contains some conversion methods, as well as access to the low-level
structure of the floating-point representation of a Double.
</descr>
<seealso>
<link id="TDoubleHelper"/>
<link id="TExtendedHelper"/>
</seealso>
</element>

<!-- constant Visibility: public -->
<element name="TDoubleHelper.Epsilon">
<short>Precision for this floating point type</short>
<descr>
<var>Epsilon</var> returns the precision of the floating point value :
differences smaller than this value cannot be detected or represented.
It can also be viewed as the smallest positive value that can be
represented.
</descr>
<seealso>
<link id="TDoubleHelper.MinValue"/>
<link id="TDoubleHelper.MaxValue"/>
</seealso>
</element>

<!-- constant Visibility: public -->
<element name="TDoubleHelper.MaxValue">
<short>Largest possible value for the <var>Double</var> floating point type</short>
<descr>
<var>MaxValue</var> is the largest possible value that can be represented by
the <var>Double</var> floating point type. For bigger values, <var>Double</var> or
<var>Extended</var> types must be used.
</descr>
<seealso>
<link id="TDoubleHelper.MinValue"/>
<link id="TDoubleHelper.Epsilon"/>
</seealso>
</element>

<!-- constant Visibility: public -->
<element name="TDoubleHelper.MinValue">
<short>Smallest (negative) possible value for the <var>Double</var> floating point type</short>
<descr>
<var>MaxValue</var> is the largest possible value that can be represented by
the <var>Double</var> floating point type. For bigger values,
<var>Double</var> or
<var>Extended</var> types must be used.
</descr>
<seealso>
<link id="TDoubleHelper.MaxValue"/>
<link id="TDoubleHelper.Epsilon"/> 
<link id="TDoubleHelper.PositiveInfinity"/>
<link id="TDoubleHelper.NegativeInfinity"/>
<link id="TDoubleHelper.NaN"/>
</seealso>
</element>

<!-- constant Visibility: public -->
<element name="TDoubleHelper.PositiveInfinity">
<short>Positive infinity as represented by a Double floating point type</short>
<descr>
<var>PositiveInfinity</var> is the value representing positive infinity in a
Double-sized floating point value.
</descr>
<seealso>
<link id="TDoubleHelper.MaxValue"/>
<link id="TDoubleHelper.MinValue"/>
<link id="TDoubleHelper.Epsilon"/>
<link id="TDoubleHelper.NegativeInfinity"/>
<link id="TDoubleHelper.NaN"/>
</seealso>
</element>

<!-- constant Visibility: public -->
<element name="TDoubleHelper.NegativeInfinity">
<short>Negative infinity as represented by a Double floating point type</short>
<descr>
<var>NegativeInfinity</var> is the value representing negative infinity in a
Double-sized floating point value.
</descr>
<seealso>
<link id="TDoubleHelper.MaxValue"/>
<link id="TDoubleHelper.MinValue"/>
<link id="TDoubleHelper.Epsilon"/>
<link id="TDoubleHelper.PositiveInfinity"/>
<link id="TDoubleHelper.NaN"/>
</seealso>
</element>

<!-- constant Visibility: public -->
<element name="TDoubleHelper.NaN">
<short>Representation of NaN (Not a Number)</short>
<descr>
<var>NaN</var> is the Representation of NaN (Not a Number) for a Double-sized floating point type.
</descr>
<seealso>
<link id="TDoubleHelper.MaxValue"/>
<link id="TDoubleHelper.MinValue"/>
<link id="TDoubleHelper.Epsilon"/> 
<link id="TDoubleHelper.PositiveInfinity"/>
<link id="TDoubleHelper.NegativeInfinity"/>
</seealso>

</element>

<!-- class function Visibility: public -->
<element name="TDoubleHelper.IsNan">
<short>Check whether a value equals <var>NaN</var>.</short>
<descr>
<var>IsNan</var> checks whether a Double-sized floating point value is
<var>NaN</var> (Not a Number). If so, it returns <var>True</var>.
When the class function version is used, the value can be specified using
<var>AValue</var>. In the method version, the used value is (<var>Self</var>).
</descr>
<seealso>
<link id="TDoubleHelper.IsInfinity"/>
<link id="TDoubleHelper.IsPositiveInfinity"/>
<link id="TDoubleHelper.IsNegativeInfinity"/>
</seealso>
</element>

<!-- class function Visibility: public -->
<element name="TDoubleHelper.IsInfinity">
<short>Check whether a value is positive or negative infinity.</short>
<descr>
<var>IsInfinity</var> checks whether a  Double-sized floating point value
represents a positive or negative infinity. If so, it returns <var>True</var>.
When the class function version is used, the value can be specified using
<var>AValue</var>. In the method version, the used value is
(<var>Self</var>).
</descr>
<seealso>
<link id="TDoubleHelper.IsNan"/>
<link id="TDoubleHelper.IsPositiveInfinity"/>
<link id="TDoubleHelper.IsNegativeInfinity"/>
</seealso>
</element>

<!-- class function Visibility: public -->
<element name="TDoubleHelper.IsNegativeInfinity">
<short>Check whether a value is  negative infinity.</short>
<descr>
<var>IsNegativeInfinity</var> checks whether a  Double-sized floating point value
represents a negative infinity. If so, it returns <var>True</var>.
When the class function version is used, the value can be specified using
<var>AValue</var>. In the method version, the used value is
(<var>Self</var>).
</descr>
<seealso>
<link id="TDoubleHelper.IsNan"/>
<link id="TDoubleHelper.IsPositiveInfinity"/>
<link id="TDoubleHelper.IsInfinity"/>
</seealso>
</element>

<!-- class function Visibility: public -->
<element name="TDoubleHelper.IsPositiveInfinity">
<short>Check whether a value is positive infinity.</short>
<descr>
<var>IsPositiveInfinity</var> checks whether a  Double-sized floating point value
represents a positive infinity. If so, it returns <var>True</var>.
When the class function version is used, the value can be specified using
<var>AValue</var>. In the method version, the used value is
(<var>Self</var>).
</descr>
<seealso>
<link id="TDoubleHelper.IsNan"/>
<link id="TDoubleHelper.IsNegativeInfinity"/>
<link id="TDoubleHelper.IsInfinity"/>
</seealso>
</element>

<!-- class function Visibility: public -->
<element name="TDoubleHelper.Parse">
<short>Convert a string to a floating point value</short>
<descr>
<var>Parse</var> will try to convert <var>AString</var> to a Double-sized
floating point value. It will take into account internationalization settings.
(it uses <var>FloatToStr</var>).
</descr>
<errors>
If the string <var>AString</var> is not a valid floating-point value, a
<link id="EConvertError"/> exception is raised.
</errors>
<seealso>
<link id="FloatToStr"/>
<link id="TDoubleHelper.ToString"/>
<link id="TDoubleHelper.TryParse"/>
</seealso>
</element>

<!-- class function Visibility: public -->
<element name="TDoubleHelper.Size">
<short>Size (in bytes) of a Double-sized floating point value.</short>
<descr>
<var>Size</var> is the size (in bytes) of a Double-sized floating point value.
It is equivalent to calling <var>SizeOf(Double)</var>.
</descr>
<seealso>
<link id="#rtl.system.SizeOf">SizeOf</link>
</seealso>
</element>

<!-- class function Visibility: public -->
<element name="TDoubleHelper.ToString">
<short>Convert a Double-sized floating point value to a string</short>
<descr>
<p>
<var>ToString</var> will convert <var>AValue</var> (or <var>Self</var> in
the plain method version) to a string. Optionally <var>FormatSettings</var>
can be specified, to be able to specify the decimal separator character to
use.
</p>
<p>
Additionally, a precision <var>APrecision</var> and number of digits
<var>ADigits</var> can be specified, in conjunction with a
<var>AFormat</var> parameter to specify the form in which the floating-point
value must be represented. (see <link id="TFloatFormat"/> for an explanation
of the various values). In this case, <link id="FloatToStrF"/> is used to
format the value. In the absence of these parameters, <link id="FloatToStr"/>
is called.
</p>
</descr>
<seealso>
<link id="FloatToStr"/>
<link id="FloatToStrF"/>
<link id="TFloatFormat"/>
</seealso>
</element>

<!-- class function Visibility: public -->
<element name="TDoubleHelper.TryParse">
<short>Try to convert a string to a Double-sized floating point value.</short>
<descr>
<p>
<var>TryParse</var> attempts to convert the string <var>AString</var> to
a Double-sized floating point value and reports <var>True</var> if the
conversion was succesful. 
In that case the parsed value is returned in <var>AValue</var>.
</p>
<p>
If the conversion failed, <var>False</var> is returned.
</p>
</descr>
<seealso>
<link id="TDoubleHelper.Parse"/>
<link id="TDoubleHelper.ToString"/>
</seealso>
</element>

<!-- procedure Visibility: public -->
<element name="TDoubleHelper.BuildUp">
<short>Build a Double-sized floating point from its composing parts</short>
<descr>
<var>BuildUp</var> will compose a Double-sized floating point value from the
sign <var>ASignFlag</var>, mantissa <var>AMantissa</var> and exponent
<var>AExponent</var>. It simply sets the <link
id="TDoubleHelper.Sign">Sign</link>, <link id="TDoubleHelper.Exp">Exp</link>
and <link id="TDoubleHelper.Frac">Frac</link> properties in 1 call.
</descr>
<seealso>
<link id="TDoubleHelper.Sign"/>
<link id="TDoubleHelper.Exp"/>
<link id="TDoubleHelper.Frac"/>
</seealso>
</element>

<!-- function Visibility: public -->
<element name="TDoubleHelper.Exponent">
<short>Exponent of the floating-point value</short>
<descr>
<var>Exponent</var> is the value <var>X</var> in the representation of the
floating-point value in <var>m*2^X</var>, i.e. the exponent.
</descr>
<seealso>
<link id="TDoubleHelper.Sign"/>
<link id="TDoubleHelper.Exp"/> 
<link id="TDoubleHelper.Frac"/>
<link id="TDoubleHelper.Fraction"/>
<link id="TDoubleHelper.Mantissa"/>
</seealso>
</element>

<!-- function Visibility: public -->
<element name="TDoubleHelper.Fraction">
<short>Fraction of the floating-point value</short>
<descr>
<var>Fraction</var> is the decimal part of the floating-point value.
</descr>
<seealso>
<link id="TDoubleHelper.Sign"/>
<link id="TDoubleHelper.Exp"/> 
<link id="TDoubleHelper.Exponent"/> 
<link id="TDoubleHelper.Frac"/>
<link id="TDoubleHelper.Mantissa"/>
</seealso>
</element>

<!-- function Visibility: public -->
<element name="TDoubleHelper.Mantissa">
<short>Mantissa of the floating-point</short>
<descr>
<var>Mantissa</var> is the value of the significand without the hidden bit.
This means it the plain bit pattern as it is stored in memory.
</descr>
<seealso>
<link id="TDoubleHelper.Sign"/>
<link id="TDoubleHelper.Exp"/> 
<link id="TDoubleHelper.Exponent"/> 
<link id="TDoubleHelper.Frac"/>
<link id="TDoubleHelper.Fraction"/>
</seealso>
</element>

<!-- function Visibility: public -->
<element name="TDoubleHelper.SpecialType">
<short>Return the type of the Double-sized floating point value</short>
<descr>
<p>
<var>SpecialType</var> checks whether the Double-sized floating point value
equals one of several special values, and returns an enumerated value
describing which value this is. See <link id="TFloatSpecial"/> for an
explanation of the possible values.
</p>
</descr>
<seealso>
<link id="TFloatSpecial"/>
</seealso>
</element>

<!-- property Visibility: public -->
<element name="TDoubleHelper.Bytes">
<short>Indexed access to the individual bytes of the floating point value</short>
<descr>
<var>Bytes</var> can be used to get or set the various bytes that make up
the Double-sized floating point value. The index runs from 0 to
<var>Size-1</var>.
</descr>
<seealso>
<link id="TDoubleHelper.Words"/>
<link id="TDoubleHelper.Size"/>
</seealso>
</element>

<!-- property Visibility: public -->
<element name="TDoubleHelper.Words">
<short>Indexed access to the words that make up the floating point value</short>
<descr>
<var>Words</var> can be used to get or set the various bytes that make up
the Double-sized floating point value. The index runs from 0 to <var>(Size-1) div 2</var>.
</descr>
<seealso>
<link id="TDoubleHelper.Bytes"/>
<link id="TDoubleHelper.Size"/> 
</seealso>
</element>

<!-- property Visibility: public -->
<element name="TDoubleHelper.Sign">
<short>Sign of the floating point value</short>
<descr>
<var>Sign</var> returns <var>True</var> if the sign bit of the value is set (i.e. it is
a negative value) or <var>False</var> if it is not set (i.e. it is a positive value).
</descr>
<seealso>
<link id="TDoubleHelper.Bytes"/>
<link id="TDoubleHelper.Exp"/>
<link id="TDoubleHelper.Frac"/>
<link id="TDoubleHelper.Mantissa"/>
<link id="TDoubleHelper.Fraction"/>
<link id="TDoubleHelper.Exponent"/>
</seealso>
</element>

<!-- property Visibility: public -->
<element name="TDoubleHelper.Exp">
<short>The bit pattern of the exponent as stored in memory.</short>
<descr>
<var>Exp</var> is the internal representation of the <link id="TDoubleHelper.Exponent">Exponent</link>.
</descr>
<seealso>
<link id="TDoubleHelper.Bytes"/>
<link id="TDoubleHelper.Sign"/>
<link id="TDoubleHelper.Frac"/>
<link id="TDoubleHelper.Mantissa"/>
<link id="TDoubleHelper.Fraction"/>
<link id="TDoubleHelper.Exponent"/>
</seealso>
</element>

<!-- property Visibility: public -->
<element name="TDoubleHelper.Frac">
<short>Bitpattern that makes up the fractional part.</short>
<descr>
<var>Frac</var> is the bit pattern representing the fractional part
(significand) including the preceding 1 (the hidden bit).
</descr>
<seealso>
<link id="TDoubleHelper.Bytes"/>
<link id="TDoubleHelper.Sign"/>
<link id="TDoubleHelper.Exp"/>
<link id="TDoubleHelper.Mantissa"/>
<link id="TDoubleHelper.Fraction"/>
<link id="TDoubleHelper.Exponent"/>
</seealso>
</element>

<!--
  ********************************************************************
    #rtl.sysutils.TExtendedHelper
  ********************************************************************
-->

<!-- #rtl.sysutils.TExtendedHelper Visibility: default -->
<element name="TExtendedHelper">
<short>Helper for Extended floating point type</short>
<descr>
<var>TExtendedHelper</var> is the helper type for the Extended-sized floating point type.
It contains some conversion methods, as well as access to the low-level
structure of the floating-point representation of a Extended.
</descr>
<seealso>
<link id="TDoubleHelper"/>
<link id="TExtendedHelper"/>
</seealso>
</element>

<!-- constant Visibility: public -->
<element name="TExtendedHelper.Epsilon">
<short>Precision for this floating point type</short>
<descr>
<var>Epsilon</var> returns the precision of the floating point value :
differences smaller than this value cannot be detected or represented.
It can also be viewed as the smallest positive value that can be
represented.
</descr>
<seealso>
<link id="TExtendedHelper.MinValue"/>
<link id="TExtendedHelper.MaxValue"/>
</seealso>
</element>

<!-- constant Visibility: public -->
<element name="TExtendedHelper.MaxValue">
<short>Largest possible value for the <var>Extended</var> floating point type</short>
<descr>
<var>MaxValue</var> is the largest possible value that can be represented by
the <var>Extended</var> floating point type. For bigger values, <var>Double</var> or
<var>Extended</var> types must be used.
</descr>
<seealso>
<link id="TExtendedHelper.MinValue"/>
<link id="TExtendedHelper.Epsilon"/>
</seealso>
</element>

<!-- constant Visibility: public -->
<element name="TExtendedHelper.MinValue">
<short>Smallest (negative) possible value for the <var>Extended</var> floating point type</short>
<descr>
<var>MaxValue</var> is the largest possible value that can be represented by
the <var>Extended</var> floating point type. For bigger values,
<var>Double</var> or
<var>Extended</var> types must be used.
</descr>
<seealso>
<link id="TExtendedHelper.MaxValue"/>
<link id="TExtendedHelper.Epsilon"/> 
<link id="TExtendedHelper.PositiveInfinity"/>
<link id="TExtendedHelper.NegativeInfinity"/>
<link id="TExtendedHelper.NaN"/>
</seealso>
</element>

<!-- constant Visibility: public -->
<element name="TExtendedHelper.PositiveInfinity">
<short>Positive infinity as represented by a Extended floating point type</short>
<descr>
<var>PositiveInfinity</var> is the value representing positive infinity in a
Extended-sized floating point value.
</descr>
<seealso>
<link id="TExtendedHelper.MaxValue"/>
<link id="TExtendedHelper.MinValue"/>
<link id="TExtendedHelper.Epsilon"/>
<link id="TExtendedHelper.NegativeInfinity"/>
<link id="TExtendedHelper.NaN"/>
</seealso>
</element>

<!-- constant Visibility: public -->
<element name="TExtendedHelper.NegativeInfinity">
<short>Negative infinity as represented by a Extended floating point type</short>
<descr>
<var>NegativeInfinity</var> is the value representing negative infinity in a
Extended-sized floating point value.
</descr>
<seealso>
<link id="TExtendedHelper.MaxValue"/>
<link id="TExtendedHelper.MinValue"/>
<link id="TExtendedHelper.Epsilon"/>
<link id="TExtendedHelper.PositiveInfinity"/>
<link id="TExtendedHelper.NaN"/>
</seealso>
</element>

<!-- constant Visibility: public -->
<element name="TExtendedHelper.NaN">
<short>Representation of NaN (Not a Number)</short>
<descr>
<var>NaN</var> is the Representation of NaN (Not a Number) for a Extended-sized floating point type.
</descr>
<seealso>
<link id="TExtendedHelper.MaxValue"/>
<link id="TExtendedHelper.MinValue"/>
<link id="TExtendedHelper.Epsilon"/> 
<link id="TExtendedHelper.PositiveInfinity"/>
<link id="TExtendedHelper.NegativeInfinity"/>
</seealso>

</element>

<!-- class function Visibility: public -->
<element name="TExtendedHelper.IsNan">
<short>Check whether a value equals <var>NaN</var>.</short>
<descr>
<var>IsNan</var> checks whether a Extended-sized floating point value is
<var>NaN</var> (Not a Number). If so, it returns <var>True</var>.
When the class function version is used, the value can be specified using
<var>AValue</var>. In the method version, the used value is (<var>Self</var>).
</descr>
<seealso>
<link id="TExtendedHelper.IsInfinity"/>
<link id="TExtendedHelper.IsPositiveInfinity"/>
<link id="TExtendedHelper.IsNegativeInfinity"/>
</seealso>
</element>

<!-- class function Visibility: public -->
<element name="TExtendedHelper.IsInfinity">
<short>Check whether a value is positive or negative infinity.</short>
<descr>
<var>IsInfinity</var> checks whether a  Extended-sized floating point value
represents a positive or negative infinity. If so, it returns <var>True</var>.
When the class function version is used, the value can be specified using
<var>AValue</var>. In the method version, the used value is
(<var>Self</var>).
</descr>
<seealso>
<link id="TExtendedHelper.IsNan"/>
<link id="TExtendedHelper.IsPositiveInfinity"/>
<link id="TExtendedHelper.IsNegativeInfinity"/>
</seealso>
</element>

<!-- class function Visibility: public -->
<element name="TExtendedHelper.IsNegativeInfinity">
<short>Check whether a value is  negative infinity.</short>
<descr>
<var>IsNegativeInfinity</var> checks whether a  Extended-sized floating point value
represents a negative infinity. If so, it returns <var>True</var>.
When the class function version is used, the value can be specified using
<var>AValue</var>. In the method version, the used value is
(<var>Self</var>).
</descr>
<seealso>
<link id="TExtendedHelper.IsNan"/>
<link id="TExtendedHelper.IsPositiveInfinity"/>
<link id="TExtendedHelper.IsInfinity"/>
</seealso>
</element>

<!-- class function Visibility: public -->
<element name="TExtendedHelper.IsPositiveInfinity">
<short>Check whether a value is positive infinity.</short>
<descr>
<var>IsPositiveInfinity</var> checks whether a  Extended-sized floating point value
represents a positive infinity. If so, it returns <var>True</var>.
When the class function version is used, the value can be specified using
<var>AValue</var>. In the method version, the used value is
(<var>Self</var>).
</descr>
<seealso>
<link id="TExtendedHelper.IsNan"/>
<link id="TExtendedHelper.IsNegativeInfinity"/>
<link id="TExtendedHelper.IsInfinity"/>
</seealso>
</element>

<!-- class function Visibility: public -->
<element name="TExtendedHelper.Parse">
<short>Convert a string to a floating point value</short>
<descr>
<var>Parse</var> will try to convert <var>AString</var> to a Extended-sized
floating point value. It will take into account internationalization settings.
(it uses <var>FloatToStr</var>).
</descr>
<errors>
If the string <var>AString</var> is not a valid floating-point value, a
<link id="EConvertError"/> exception is raised.
</errors>
<seealso>
<link id="FloatToStr"/>
<link id="TExtendedHelper.ToString"/>
<link id="TExtendedHelper.TryParse"/>
</seealso>
</element>

<!-- class function Visibility: public -->
<element name="TExtendedHelper.Size">
<short>Size (in bytes) of a Extended-sized floating point value.</short>
<descr>
<var>Size</var> is the size (in bytes) of a Extended-sized floating point value.
It is equivalent to calling <var>SizeOf(Extended)</var>.
</descr>
<seealso>
<link id="#rtl.system.SizeOf">SizeOf</link>
</seealso>
</element>

<!-- class function Visibility: public -->
<element name="TExtendedHelper.ToString">
<short>Convert a Extended-sized floating point value to a string</short>
<descr>
<p>
<var>ToString</var> will convert <var>AValue</var> (or <var>Self</var> in
the plain method version) to a string. Optionally <var>FormatSettings</var>
can be specified, to be able to specify the decimal separator character to
use.
</p>
<p>
Additionally, a precision <var>APrecision</var> and number of digits
<var>ADigits</var> can be specified, in conjunction with a
<var>AFormat</var> parameter to specify the form in which the floating-point
value must be represented. (see <link id="TFloatFormat"/> for an explanation
of the various values). In this case, <link id="FloatToStrF"/> is used to
format the value. In the absence of these parameters, <link id="FloatToStr"/>
is called.
</p>
</descr>
<seealso>
<link id="FloatToStr"/>
<link id="FloatToStrF"/>
<link id="TFloatFormat"/>
</seealso>
</element>

<!-- class function Visibility: public -->
<element name="TExtendedHelper.TryParse">
<short>Try to convert a string to a Extended-sized floating point value.</short>
<descr>
<p>
<var>TryParse</var> attempts to convert the string <var>AString</var> to
a Extended-sized floating point value and reports <var>True</var> if the
conversion was succesful. 
In that case the parsed value is returned in <var>AValue</var>.
</p>
<p>
If the conversion failed, <var>False</var> is returned.
</p>
</descr>
<seealso>
<link id="TExtendedHelper.Parse"/>
<link id="TExtendedHelper.ToString"/>
</seealso>
</element>

<!-- procedure Visibility: public -->
<element name="TExtendedHelper.BuildUp">
<short>Build a Extended-sized floating point from its composing parts</short>
<descr>
<var>BuildUp</var> will compose a Extended-sized floating point value from the
sign <var>ASignFlag</var>, mantissa <var>AMantissa</var> and exponent
<var>AExponent</var>. It simply sets the <link
id="TExtendedHelper.Sign">Sign</link>, <link id="TExtendedHelper.Exp">Exp</link>
and <link id="TExtendedHelper.Frac">Frac</link> properties in 1 call.
</descr>
<seealso>
<link id="TExtendedHelper.Sign"/>
<link id="TExtendedHelper.Exp"/>
<link id="TExtendedHelper.Frac"/>
</seealso>
</element>

<!-- function Visibility: public -->
<element name="TExtendedHelper.Exponent">
<short>Exponent of the floating-point value</short>
<descr>
<var>Exponent</var> is the value <var>X</var> in the representation of the
floating-point value in <var>m*2^X</var>, i.e. the exponent.
</descr>
<seealso>
<link id="TExtendedHelper.Sign"/>
<link id="TExtendedHelper.Exp"/> 
<link id="TExtendedHelper.Frac"/>
<link id="TExtendedHelper.Fraction"/>
<link id="TExtendedHelper.Mantissa"/>
</seealso>
</element>

<!-- function Visibility: public -->
<element name="TExtendedHelper.Fraction">
<short>Fraction of the floating-point value</short>
<descr>
<var>Fraction</var> is the decimal part of the floating-point value.
</descr>
<seealso>
<link id="TExtendedHelper.Sign"/>
<link id="TExtendedHelper.Exp"/> 
<link id="TExtendedHelper.Exponent"/> 
<link id="TExtendedHelper.Frac"/>
<link id="TExtendedHelper.Mantissa"/>
</seealso>
</element>

<!-- function Visibility: public -->
<element name="TExtendedHelper.Mantissa">
<short>Mantissa of the floating-point</short>
<descr>
<var>Mantissa</var> is the value of the significand without the hidden bit.
This means it the plain bit pattern as it is stored in memory.
</descr>
<seealso>
<link id="TExtendedHelper.Sign"/>
<link id="TExtendedHelper.Exp"/> 
<link id="TExtendedHelper.Exponent"/> 
<link id="TExtendedHelper.Frac"/>
<link id="TExtendedHelper.Fraction"/>
</seealso>
</element>

<!-- function Visibility: public -->
<element name="TExtendedHelper.SpecialType">
<short>Return the type of the Extended-sized floating point value</short>
<descr>
<p>
<var>SpecialType</var> checks whether the Extended-sized floating point value
equals one of several special values, and returns an enumerated value
describing which value this is. See <link id="TFloatSpecial"/> for an
explanation of the possible values.
</p>
</descr>
<seealso>
<link id="TFloatSpecial"/>
</seealso>
</element>

<!-- property Visibility: public -->
<element name="TExtendedHelper.Bytes">
<short>Indexed access to the individual bytes of the floating point value</short>
<descr>
<var>Bytes</var> can be used to get or set the various bytes that make up
the Extended-sized floating point value. The index runs from 0 to
<var>Size-1</var>.
</descr>
<seealso>
<link id="TExtendedHelper.Words"/>
<link id="TExtendedHelper.Size"/>
</seealso>
</element>

<!-- property Visibility: public -->
<element name="TExtendedHelper.Words">
<short>Indexed access to the words that make up the floating point value</short>
<descr>
<var>Words</var> can be used to get or set the various bytes that make up
the Extended-sized floating point value. The index runs from 0 to <var>(Size-1) div 2</var>.
</descr>
<seealso>
<link id="TExtendedHelper.Bytes"/>
<link id="TExtendedHelper.Size"/> 
</seealso>
</element>

<!-- property Visibility: public -->
<element name="TExtendedHelper.Sign">
<short>Sign of the floating point value</short>
<descr>
<var>Sign</var> returns <var>True</var> if the sign bit of the value is set (i.e. it is
a negative value) or <var>False</var> if it is not set (i.e. it is a positive value).
</descr>
<seealso>
<link id="TExtendedHelper.Bytes"/>
<link id="TExtendedHelper.Exp"/>
<link id="TExtendedHelper.Frac"/>
<link id="TExtendedHelper.Mantissa"/>
<link id="TExtendedHelper.Fraction"/>
<link id="TExtendedHelper.Exponent"/>
</seealso>
</element>

<!-- property Visibility: public -->
<element name="TExtendedHelper.Exp">
<short>The bit pattern of the exponent as stored in memory.</short>
<descr>
<var>Exp</var> is the internal representation of the <link id="TExtendedHelper.Exponent">Exponent</link>.
</descr>
<seealso>
<link id="TExtendedHelper.Bytes"/>
<link id="TExtendedHelper.Sign"/>
<link id="TExtendedHelper.Frac"/>
<link id="TExtendedHelper.Mantissa"/>
<link id="TExtendedHelper.Fraction"/>
<link id="TExtendedHelper.Exponent"/>
</seealso>
</element>

<!-- property Visibility: public -->
<element name="TExtendedHelper.Frac">
<short>Bitpattern that makes up the fractional part.</short>
<descr>
<var>Frac</var> is the bit pattern representing the fractional part
(significand) including the preceding 1 (the hidden bit).
</descr>
<seealso>
<link id="TExtendedHelper.Bytes"/>
<link id="TExtendedHelper.Sign"/>
<link id="TExtendedHelper.Exp"/>
<link id="TExtendedHelper.Mantissa"/>
<link id="TExtendedHelper.Fraction"/>
<link id="TExtendedHelper.Exponent"/>
</seealso>
</element>


<!-- procedure Visibility: default -->
<element name="FreeMemAndNil">
<short>Free the heap memory pointed to by a pointer and set pointer to nil.</short>
<descr>
<var>FreeMemAndNil</var> will free the memory pointed to by <var>P</var> and
will set <var>P</var> to Nil. Note that this function is not type safe; the
programmer is responsible for ensuring that this function is called with a
correct pointer parameter. Failure to do so may result in run-time errors.
</descr>
<seealso>
<link id="FreeAndNil"/>
</seealso>
</element>

<!-- array type Visibility: default -->
<element name="TUnicodeCharArray">
<short>Array of <var>UnicodeChar</var></short>
<descr>
<var>TUnicodeCharArray</var> is a definition of an array of <var>UnicodeChar</var> elements.
</descr>
<seealso>
<link id="UnicodeChar"/>
</seealso>
</element>

<!-- function Visibility: default -->
<element name="UnicodeUpperCase">
<short>Return uppercase version of a string</short>
<descr>
<var>UnicodeUpperCase</var> returns an all-uppercase version of the unicodestring <var>S</var>.
It relies on the unicode manager to do so.
</descr>
<seealso>
<link id="UnicodeLowerCase"/>
<link id="LowerCase"/>
<link id="UpperCase"/>
</seealso>
</element>

<!-- function Visibility: default -->
<element name="UnicodeLowerCase">
<short>Return lowercase version of a string</short>
<descr>
<var>UnicodeLowerCase</var> returns an all-lowercase version of the unicodestring <var>S</var>.
It relies on the unicode manager to do so.
</descr>
<seealso>
<link id="UnicodeUpperCase"/>
<link id="UpperCase"/>
<link id="LowerCase"/>
</seealso>
</element>

<!-- function Visibility: default -->
<element name="UnicodeCompareStr">
<short>Compare 2 unicode strings</short>
<descr>
<p>
<var>UnicodeCompareStr</var> compares 2 unicode strings <var>S1</var> and <var>S2</var> in a case sensitive manner. 
The result of the function is
</p>
<dl>
<dt>&lt; 0</dt><dd>If <var>S1&lt;S2</var></dd>
<dt>0</dt><dd>If <var>S1=S2</var></dd>
<dt>&gt; 0</dt><dd>If <var>S1&gt;S2</var></dd>
</dl>
<p>
This function relies on a widestring manager to perform the actual comparison, as it will take into account various equivalent 
code points: it is not a simple byte-by-byte comparison.
</p>
</descr>
<seealso>
<link id="UnicodeCompareText"/>
<link id="CompareStr"/>
<link id="CompareText"/>
<link id="UnicodeSameStr"/> 
</seealso>
</element>

<!-- function Visibility: default -->
<element name="UnicodeSameStr">
<short>Check whether 2 strings are equal</short>
<descr>
<var>UnicodeSameStr</var> checks whether the unicode strings <var>S1</var> and <var>S2</var> are equal, case sensitively. 
The function returns <var>True</var> if the strings are equal, <var>False</var> if they are not.
This function relies on a widestring manager to perform the actual comparison, as it will take into account various equivalent 
code points: it is not a simple byte-by-byte comparison.
</descr>
<errors>
</errors>
<seealso>
<link id="UnicodeCompareText"/>
<link id="CompareStr"/>
<link id="CompareText"/>
<link id="UnicodeSameText"/>
<link id="SameStr"/>
</seealso>
</element>

<!-- function Visibility: default -->
<element name="UnicodeCompareText">
<short>Compare 2 strings case insentivively</short>
<descr>
<p>
<var>UnicodeCompareText</var> compares 2 unicode strings <var>S1</var> and <var>S2</var>, ignoring case.
The result of the function is
</p>
<dl>
<dt>&lt; 0</dt><dd>If <var>S1&lt;S2</var></dd>
<dt>0</dt><dd>If <var>S1=S2</var></dd>
<dt>&gt; 0</dt><dd>If <var>S1&gt;S2</var></dd>
</dl>
<p>
This function relies on a widestring manager to perform the actual comparison, as it will take into account various equivalent 
code points: it is not a simple byte-by-byte comparison.
</p>
</descr>
<seealso>
<link id="UnicodeCompareText"/>
<link id="CompareStr"/>
<link id="CompareText"/>
<link id="UnicodeSameStr"/> 
</seealso>
</element>

<!-- function Visibility: default -->
<element name="UnicodeSameText">
<short>Check whether 2 strings are the same, ignoring case</short>
<descr>
<var>UnicodeSameText</var> checks whether the unicode strings <var>S1</var> and <var>S2</var> are equal, ignoring case. 
The function returns <var>True</var> if the strings are equal, <var>False</var> if they are not.
This function relies on a widestring manager to perform the actual comparison, as it will take into account various equivalent 
code points: it is not a simple byte-by-byte comparison.
</descr>
<errors>
</errors>
<seealso>
<link id="UnicodeCompareText"/>
<link id="CompareStr"/>
<link id="CompareText"/>
<link id="UnicodeSameStr"/>
<link id="SameText"/>
</seealso>
</element>

<!-- function Visibility: default -->
<element name="UnicodeFormat">
<short>Format unicode string</short>
<descr>
<var>UnicodeFormat</var> is the unicode equivalent of <link id="Format"/>. It follows the same rules and uses the same formatting strings.
</descr>
<errors>
In case of error, an <link id="EConvertError"/> exception is raised.
</errors>
<seealso>
<link id="Format"/>
<link id="UnicodeFormatBuf"/>
</seealso>
</element>

<!-- function Visibility: default -->
<element name="UnicodeFormatBuf">
<short>Format a unicode string with given arguments and store the result in a unicodebuffer.</short>
<descr>
<var>UnicodeFormatBuf</var> is the unicode equivalent of <link id="FormatBuf"/>. It follows the same rules and uses the same formatting st
</descr>
<errors>
In case of error, an <link id="EConvertError"/> exception is raised.
</errors>
<seealso>
<link id="FormatBuf"/>
<link id="UnicodeFormat"/>
</seealso>
</element>

<!-- procedure Visibility: default -->
<element name="UnicodeFmtStr">
<short>Format a string with given arguments, procedural version.</short>
<descr>
<var>UnicodeFmtStr</var> calls <link id="UnicodeFormat"/> with <var>Fmt</var> and <var>Args</var> 
as arguments, and stores the result in <var>Res</var>. 
For more information on how the resulting string is composed, see <link id="UnicodeFormat"/>.
</descr>
<errors>
In case of error, an <link id="EConvertError"/> exception is raised.
</errors>
<seealso>
<link id="UnicodeFormat"/>
<link id="UnicodeFormatBuf"/>
</seealso>
</element>

<!-- function Visibility: default -->
<element name="WideStrAlloc">
<short>Allocate a null-terminated widestring on the heap.</short>
<descr>
<p>
<var>WideStrAlloc</var> reserves memory on the heap for a widestring with length <var>Len</var>,
(terminating <var>#0#0</var> included), and returns a pointer to it.
</p>
<p>
Additionally, <var>WideStrAlloc</var> allocates 4 extra bytes to store the size of
the allocated memory. 
</p>
</descr>
<errors>
None.
</errors>
<seealso>
<link id="StrBufSize"/>
<link id="StrDispose"/>
<link id="#rtl.strings.StrAlloc">StrAlloc</link>
</seealso>
</element>

<!-- function Visibility: default -->
<element name="StringOf">
<short>Create a unicode string from an array of bytes</short>
<descr>
<p>
<var>StringOf</var> converts an array of bytes (<var>Bytes</var>) to a unicode string. 
It interprets the bytes as a single-byte string, using  the default codepage.
</p>
<p>
To create a string where the bytes are interpreted as wide chars, use <link id="WideStringOf"/> instead.
</p>
</descr>
<errors>
None.
</errors>
<seealso>
<link id="WideBytesOf"/>
<link id="WideStringOf"/>
</seealso>
</element>

<!-- function Visibility: default -->
<element name="WideBytesOf">
<short>Returns the contents of a widestring as an array of bytes</short>
<descr>
<var>WideBytesOf</var> returns the contents of the widestring <var>Value</var> as an array of bytes.
The array will have as length twice the length of the wide string, as each wide character contains 2 bytes. 
</descr>
<seealso>
<link id="StringOf"/>
</seealso>
</element>

<!-- function Visibility: default -->
<element name="WideStringOf">
<short>Create unicode string from array of bytes</short>
<descr>
<p>
<var>WideStringOf</var>  converts an array of bytes (<var>Bytes</var>) to a unicode string. 
It considers each pair of bytes in the array as a single wide char.
The array should have an even length. If the length is uneven, the last byte will be ignored.
</p>
<p>
This function performs the opposite operation of <link id="BytesOf"/>.
</p>
<p>
To create a string where the bytes are interpreted as ansichars, use <link id="StringOf"/> instead.
</p>
</descr>
<seealso>
<link id="StringOf"/>
<link id="WideBytesOf"/>
<link id="BytesOf"/>
</seealso>
</element>

<!-- function Visibility: default -->
<element name="ByteLength">
<short>Length (in bytes) of a unicodestring</short>
<descr>
<var>ByteLength</var> returns the length of a unicodestring in bytes. 
This equals the character length of the string (<link id="system.length">Length</link>) multiplied by the number of bytes per character (2).
</descr>
<seealso>
<link id="system.length">Length</link>
</seealso>
</element>

<!-- function Visibility: default -->
<element name="UnicodeStringReplace">
<short>Replace one occurrence of a string with another</short>
<descr>
<var>UnicodeStringReplace</var> is the unicode version of <link id="StringReplace"/>; 
it follows the same rules and has the same behaviour, but operates on unicode strings instead of ansistrings.
</descr>
<seealso>
<link id="StringReplace"/>
</seealso>
</element>

<!--
  ********************************************************************
    #rtl.sysutils.EEncodingError
  ********************************************************************
-->

<!-- class Visibility: default -->
<element name="EEncodingError">
<short>Exception raised by the <var>TEncoding</var> class.</short>
<descr>
<var>EEncodingError</var> is the exception classed used by the <var>TEncoding</var> class to indicatee errors.
</descr>
<seealso>
<link id="TEncoding"/>
</seealso>
</element>

<!--
  ********************************************************************
    #rtl.sysutils.TEncoding
  ********************************************************************
-->

<!-- class Visibility: default -->
<element name="TEncoding">
<short>Encoding support</short>
<descr>
<var>TEncoding</var> is a mostly abstract class that contains various methods to deal with different encodings 
in single- and double-byte strings. In practice, one instance of a descendent of this class for each needed encoding can be 
instantiated and used. The class contains several class methods and properties to create such instances, and 
has several often-used instances available as class properties, in particular the default encoding.
</descr>
<seealso>
<link id="TEncoding.ANSI"/>
<link id="TEncoding.ASCII"/>
<link id="TEncoding.Default"/>
<link id="TEncoding.BigEndianUnicode"/>
<link id="TEncoding.Unicode"/>
<link id="TEncoding.UTF7"/>
<link id="TEncoding.UTF8"/>
</seealso>
</element>

<!-- class procedure Visibility: public -->
<element name="TEncoding.FreeEncodings">
<short>Free all standard encodings</short>
<descr>
<var>FreeEncodings</var> frees all the standard encodings <link id="TEncoding.ANSI"/>,
<link id="TEncoding.ASCII"/>,
<link id="TEncoding.Default"/>,
<link id="TEncoding.BigEndianUnicode"/>,
<link id="TEncoding.Unicode"/>,
<link id="TEncoding.UTF7"/> and
<link id="TEncoding.UTF8"/>. There should be no need to call this function directly, it is called automatically w
hen the program exits.
</descr>
<seealso>
<link id="TEncoding.ANSI"/>
<link id="TEncoding.ASCII"/>
<link id="TEncoding.Default"/>
<link id="TEncoding.BigEndianUnicode"/>
<link id="TEncoding.Unicode"/>
<link id="TEncoding.UTF7"/>
<link id="TEncoding.UTF8"/>
</seealso>
</element>

<!-- function Visibility: public -->
<element name="TEncoding.Clone">
<short>Clone a <var>TEncoding</var> instance</short>
<descr>
<var>Clone</var> creates a copy of a <var>TEncoding</var> instance. This method returns <var>Nil</var> in <var>TEncoding</var>
and must be implemented in descendent classes.
</descr>
<seealso>
<link id="TEncoding.Create"/>
</seealso>
</element>

<!-- class function Visibility: public -->
<element name="TEncoding.Convert">
<short>Convert an array of bytes from one encoding to another</short>
<descr>
<var>Convert</var> will convert the bytes in <var>Bytes</var> from encoding <var>Source</var> to encoding <var>Destination</var> and returns the converted bytes as an array.
If <var>StartIndex</var> and <var>Count</var> are specified, the conversion starts at (zero-based) index <var>StartIndex</var>, and only <var>Count</var> bytes will be converted.
</descr>
<seealso>
<link id="TEncoding.GetBytes"/>
<link id="TEncoding.GetChars"/>
</seealso>
</element>

<!-- class function Visibility: public -->
<element name="TEncoding.IsStandardEncoding">
<short>Check if the encoding is one of the standard encodings</short>
<descr>
<var>IsStandardEncoding</var> will return <var>True</var> is one of the standard encoding instances  <link id="TEncoding.ANSI"/>,
<link id="TEncoding.ASCII"/>,
<link id="TEncoding.Default"/>,
<link id="TEncoding.BigEndianUnicode"/>,
<link id="TEncoding.Unicode"/>,
<link id="TEncoding.UTF7"/> or
<link id="TEncoding.UTF8"/>. Otherwise it returns <var>False</var>.
</descr>
<seealso>
<link id="TEncoding.ANSI"/>
<link id="TEncoding.ASCII"/>
<link id="TEncoding.Default"/>
<link id="TEncoding.BigEndianUnicode"/>
<link id="TEncoding.Unicode"/>
<link id="TEncoding.UTF7"/>
<link id="TEncoding.UTF8"/>
</seealso>
</element>

<!-- class function Visibility: public -->
<element name="TEncoding.GetBufferEncoding">
<short>Attempt to guess the encoding of a buffer</short>
<descr>
<p>
<var>GetBufferEncoding</var> checks the BOM marker of an array of bytes <var>Buffer</var>, and returns the 
found encoding in <var>AEncoding</var>. Only the <link id="TEncoding.BigEndianUnicode"/>
<link id="TEncoding.Unicode"/> and <link id="TEncoding.UTF8"/> encodings will be tried.
</p>
<p>
If <var>AEncoding</var> is non-Nil on entry, it will be used to check  the BOM marker with. 
No other encoding will be tried in that case.
</p>
<p> 
If <var>ADefaultEncoding</var> is specified, it will be returned in case no match was found.
</p>
<p>
The function returns the number of bytes in the BOM Marker. 
</p>
</descr>
<seealso>
<link id="TEncoding.BigEndianUnicode"/>
<link id="TEncoding.Unicode"/>
<link id="TEncoding.UTF8"/> 
<link id="TEncoding.GetPreamble"/> 
</seealso>
</element>

<!-- class function Visibility: public -->
<element name="TEncoding.GetEncoding">
<short>Get an encoding instance for a given codepage.</short>
<descr>
<var>GetEncoding</var> will return an instance of <var>TEncoding</var> for the given codepage <var>CodePage</var>. 
The codepage can also be specified by name <var>EncodingName</var>. The returned instance is an appropriate descendent of 
<var>TEncoding</var> and needs to be freed by the caller.
</descr>
<seealso>
<link id="TUnicodeEncoding"/>
<link id="TBigEndianUnicodeEncoding"/>
<link id="TUTF8Encoding"/>
<link id="TUTF7Encoding"/>
<link id="TMBCSEncoding"/>
</seealso>
</element>

<!-- function Visibility: public -->
<element name="TEncoding.GetMaxByteCount">
<short>Returns the maximum number of bytes needed to represent a string</short>
<descr>
<p>
<var>GetMaxByteCount</var> returns  the maximum number of bytes needed to represent 
a string of <var>CharCount</var> characters in the given encoding.
</p>
<p>
This is an abstract method, implemented by descendents of <var>TEncoding</var>.
</p>
</descr>
<seealso>
<link id="TEncoding.GetMaxCharCount"/>
</seealso>
</element>

<!-- function Visibility: public -->
<element name="TEncoding.GetMaxCharCount">
<short>Return the maximum number of characters that can be represented in a number of bytes</short>
<descr>
<p>
<var>GetMaxCharCount</var> returns the theoretical maximum number of characters that can be represented
in a buffer of length <var>ByteCount</var> in the given encoding. Note that the actual number of 
characters that can be represented may well be much less and depends on the encoding and the actual characters.
</p>
<p>
This is an abstract method, implemented by descendents of <var>TEncoding</var>.
</p>
</descr>
<seealso>
<link id="TEncoding.GetMaxByteCount"/>
</seealso>
</element>

<!-- function Visibility: public -->
<element name="TEncoding.GetPreamble">
<short>Return the BOM Marker used by the encoding</short>
<descr>
<var>GetPreamble</var> returns the BOM marker bytes used by the encoding. 
This is only meaningful for the UTF8 and Unicode encodings, 
for all other encodings there is no BOM Marker.
</descr>
<seealso>
<link id="TUnicodeEncoding"/>
<link id="TBigEndianUnicodeEncoding"/>
<link id="TUTF8Encoding"/>
</seealso>
</element>

<!-- function Visibility: public -->
<element name="TEncoding.GetString">
<short>Return a string based on an array of bytes</short>
<descr>
<p>
<var>GetString</var> will return a unicode string, created from the bytes in the <var>Bytes</var> array.
The bytes array will be interpreted according to the encoding which the <var>TEncoding</var> represents.
</p>
<p>
If <var>ByteIndex</var> and <var>ByteCount</var> are specified, only the <var>ByteCount</var> 
bytes starting at position <var>ByteIndex</var> will be converted.
</p>
</descr>
<errors>
In case of invalid bytes, an <var>EEncodingError</var> exception may be raised.
</errors>
</element>

<!-- property Visibility: public -->
<element name="TEncoding.CodePage">
<short>Codepage for this encoding</short>
<descr>
<var>CodePage</var> is the numerical codepage for this encoding. It is a number as used in the Windows codepage registry.
</descr>
<seealso>
<link id="TEncoding.EncodingName"/>
</seealso>
</element>

<!-- property Visibility: public -->
<element name="TEncoding.EncodingName">
<short>Name of this encoding</short>
<descr>
<var>EncodingName</var> is the  name for this encoding. 
It's based on the windows name for the encoding and is calculated from the codepage.
</descr>
<seealso>
<link id="TEncoding.CodePage"/>
</seealso>
</element>

<!-- property Visibility: public -->
<element name="TEncoding.IsSingleByte">
<short>Is the encoding a single-byte encoding or not ?</short>
<descr>
<var>IsSingleByte</var> determines whether an encoding is single-byte or not. 
It is <var>false</var> for all standard encodings.
</descr>
</element>

<!-- property Visibility: public -->
<element name="TEncoding.ANSI">
<short>Ansi encoding instance</short>
<descr>
<var>ANSI</var> is the ANSI codepage encoding instance, it is the default single-byte string codepage on 
windows (as returned by <link id="DefaultSystemCodePage"/>).
This instance is created and maintained by the system, it should not be freed.
</descr>
<seealso>
<link ID="TEncoding.ASCII"/>
<link id="TEncoding.ASCII"/>
<link id="TEncoding.Default"/>
<link id="TEncoding.BigEndianUnicode"/>
<link id="TEncoding.Unicode"/>
<link id="TEncoding.UTF7"/>
<link id="TEncoding.UTF8"/>
</seealso>
</element>

<!-- property Visibility: public -->
<element name="TEncoding.ASCII">
<short>ASCII encoding instance</short>
<descr>
<var>ASCII</var> is the ASCII codepage (CP_ASCII) encoding instance.
This instance is created and maintained by the system, it should not be freed.
</descr>
<seealso>
<link id="TEncoding.ANSI"/>
<link id="TEncoding.ASCII"/>
<link id="TEncoding.Default"/>
<link id="TEncoding.BigEndianUnicode"/>
<link id="TEncoding.Unicode"/>
<link id="TEncoding.UTF7"/>
<link id="TEncoding.UTF8"/>
</seealso>
</element>

<!-- property Visibility: public -->
<element name="TEncoding.BigEndianUnicode">
<short>Big-endian Unicode (UTF16BE) encoding instance</short>
<descr>
<var>BigEndianUnicode</var> is the Big-endian Unicode encoding instance (CP_UTF16BE)
This instance is created and maintained by the system, it should not be freed.
</descr>
<seealso>
<link ID="TEncoding.ASCII"/>
<link id="TEncoding.ANSI"/>
<link id="TEncoding.ASCII"/>
<link id="TEncoding.Default"/>
<link id="TEncoding.Unicode"/>
<link id="TEncoding.UTF7"/>
<link id="TEncoding.UTF8"/>
</seealso>
</element>

<!-- property Visibility: public -->
<element name="TEncoding.Default">
<short>Default codepage</short>
<descr>
<var>Defaulte</var> is the default encoding instance (it equals the ANSI codepage).
This instance is created and maintained by the system, it should not be freed.
</descr>
<seealso>
<link ID="TEncoding.ASCII"/>
<link id="TEncoding.ANSI"/>
<link id="TEncoding.ASCII"/>
<link id="TEncoding.BigEndianUnicode"/>
<link id="TEncoding.Unicode"/>
<link id="TEncoding.UTF7"/>
<link id="TEncoding.UTF8"/>
</seealso>
</element>

<!-- property Visibility: public -->
<element name="TEncoding.Unicode">
<short>UTF16 encoding instance</short>
<descr>
<var>Unicode</var> is the Big-endian Unicode encoding instance (CP_UTF16)
This instance is created and maintained by the system, it should not be freed.
</descr>
<seealso>
<link ID="TEncoding.ASCII"/>
<link id="TEncoding.ANSI"/>
<link id="TEncoding.ASCII"/>
<link id="TEncoding.Default"/>
<link id="TEncoding.BigEndianUnicode"/>
<link id="TEncoding.Unicode"/>
<link id="TEncoding.UTF7"/>
<link id="TEncoding.UTF8"/>
</seealso>
</element>

<!-- property Visibility: public -->
<element name="TEncoding.UTF7">
<short>UTF7 encoding instance</short>
<descr>
<var>UTF7</var> is the UTF7 encoding instance (CP_UTF7)
This instance is created and maintained by the system, it should not be freed.
</descr>
<seealso>
<link ID="TEncoding.ASCII"/>
<link id="TEncoding.ANSI"/>
<link id="TEncoding.ASCII"/>
<link id="TEncoding.Default"/>
<link id="TEncoding.BigEndianUnicode"/>
<link id="TEncoding.Unicode"/>
<link id="TEncoding.UTF8"/>
</seealso>
</element>

<!-- property Visibility: public -->
<element name="TEncoding.UTF8">
<short>UTF8 encoding instance</short>
<descr>
<var>UTF8</var> is the UTF7 encoding instance (CP_UTF7)
This instance is created and maintained by the system, it should not be freed.
</descr>
<seealso>
<link ID="TEncoding.ASCII"/>
<link id="TEncoding.ANSI"/>
<link id="TEncoding.ASCII"/>
<link id="TEncoding.Default"/>
<link id="TEncoding.BigEndianUnicode"/>
<link id="TEncoding.Unicode"/>
<link id="TEncoding.UTF7"/>
</seealso>
</element>

<!--
  ********************************************************************
    #rtl.sysutils.TMBCSEncoding
  ********************************************************************
-->

<!-- class Visibility: default -->
<element name="TMBCSEncoding">
<short>Multi-Byte character set encoding</short>
<descr>
<p>
<var>TMBCSEncoding</var> is the encoding class used for most of the encodings, except the actual Unicode encodings.
The codepage is specified during creation, and is by default the system codepage. 
</p>
<p>
The name is somewhat misleading, since the MBCS is also used for single-byte encodings.
</p>
</descr>
<seealso>
<link id="TUnicodeEncoding"/>
<link id="TUTF8Encoding"/>
<link id="TUTF7Encoding"/>
<link id="TBigendianUnicodeEncoding"/>
</seealso>
</element>

<!-- constructor Visibility: public -->
<element name="TMBCSEncoding.Create">
<short>Create a new instance of a multi-byte character set encoding</short>
<descr>
<p>
<var>Create</var> instantiates a new instance of the multi-byte character set encoding.
The <var>ACodePage</var> parameter is optional, and defaults to <link id="DefaultSystemCodePage"/>.
</p>
<p>
The <var>MBToWCharFlags</var> and <var>WCharToMBFlags</var> parameters are stored but are otherwise 
unused in the Free Pascal implementation of <var>TMBCSEncoding</var>
</p>
</descr>
</element>

<!-- function Visibility: public -->
<element name="TMBCSEncoding.Clone" link="TEncoding.Clone">
<short>Clone a <var>TMBCSEncoding</var> instance</short>
<descr>
<var>CLone</var> overrides <link id="TEncoding.Clone"/> to provide a clone of the <var>TMBCSEncoding</var> instance.
</descr>
<seealso>
<link id="TEncoding.Clone"/>
</seealso>
</element>

<!-- function Visibility: public -->
<element name="TMBCSEncoding.GetMaxByteCount" link="TEncoding.GetMaxByteCount">
<short>Return max number of bytes needed to represent a string</short>
<descr>
<var>GetMaxByteCount</var> overrides <link id="TEncoding.GetMaxByteCount"/> to return the  
maximum number of bytes needed to represent a string.
</descr>
<seealso>
<link id="TEncoding.GetMaxByteCount"/>
</seealso>
</element>

<!-- function Visibility: public -->
<element name="TMBCSEncoding.GetMaxCharCount" link="TEncoding.GetMaxCharCount">
<short>Return max number of characters that can be represented by an array of bytes</short>
<descr>
<var>GetMaxCharCount</var> overrides <link id="TEncoding.GetMaxCharCount"/> to return the  
maximum number of bytes needed to represent a string.
</descr>
<seealso>
<link id="TEncoding.GetMaxCharCount"/>
</seealso>
</element>

<!-- function Visibility: public -->
<element name="TMBCSEncoding.GetPreamble" link="TEncoding.GetPreamble">
<short>Return BOM marker bytes</short>
<descr>
<var>GetPreamble</var> overrides <link id="TEncoding.GetPreamble"/> to return the  
BOM Marker bytes (none, for this implementation).
</descr>
<seealso>
<link id="TEncoding.GetPreamble"/>
</seealso>
</element>

<!--
  ********************************************************************
    #rtl.sysutils.TUTF7Encoding
  ********************************************************************
-->

<!-- class Visibility: default -->
<element name="TUTF7Encoding">
<short>UTF-7 unicode encoding</short>
<descr>
<p>
<var>TUTF7Encoding</var> is the encoding class used to represent the UTF7 encoding.
This encoding is not so often used, and the class is provided mostly for completeness.
</p>
</descr>
<seealso>
<link id="TUnicodeEncoding"/>
<link id="TUTF8Encoding"/>
<link id="TMBCSEncoding"/>
<link id="TBigendianUnicodeEncoding"/>
</seealso>
</element>

<!-- constructor Visibility: public -->
<element name="TUTF7Encoding.Create">
<short>Create a new instance of the <var>TUTF7Encoding</var> class</short>
<descr>
<var>Create</var> creates a new instance of the <var>TUTF7Encoding</var> class and sets the 
codepage to <var>CP_UTF7</var>.
</descr>
<seealso>
<link id="TEncoding.CodePage"/>
<link id="TEncoding"/>
</seealso>
</element>

<!-- function Visibility: public -->
<element name="TUTF7Encoding.Clone" link="TEncoding.Clone">
<short>Clone a <var>TUTF7Encoding</var> instance</short>
<descr>
<var>CLone</var> overrides <link id="TEncoding.Clone"/> to provide a clone of the <var>TUTF7Encoding</var> instance.
</descr>
<seealso>
<link id="TEncoding.Clone"/>
</seealso>
</element>

<!-- function Visibility: public -->
<element name="TUTF7Encoding.GetMaxByteCount" link="TEncoding.GetMaxByteCount">
<short>Return max number of bytes needed to represent a string</short>
<descr>
<var>GetMaxByteCount</var> overrides <link id="TEncoding.GetMaxByteCount"/> to return the  
maximum number of bytes needed to represent a string.
</descr>
<seealso>
<link id="TEncoding.GetMaxByteCount"/>
</seealso>
</element>

<!-- function Visibility: public -->
<element name="TUTF7Encoding.GetMaxCharCount" link="TEncoding.GetMaxCharCount">
<short>Return max number of characters that can be represented by an array of bytes</short>
<descr>
<var>GetMaxCharCount</var> overrides <link id="TEncoding.GetMaxCharCount"/> to return the  
maximum number of bytes needed to represent a string.
</descr>
<seealso>
<link id="TEncoding.GetMaxCharCount"/>
</seealso>
</element>

<!-- function Visibility: public -->
<element name="TUTF7Encoding.GetPreamble" link="TEncoding.GetPreamble">
<short>Return BOM marker bytes</short>
<descr>
<var>GetPreamble</var> overrides <link id="TEncoding.GetPreamble"/> to return the  
BOM Marker bytes (none, for this implementation).
</descr>
<seealso>
<link id="TEncoding.GetPreamble"/>
</seealso>
</element>

<!--
  ********************************************************************
    #rtl.sysutils.TUTF8Encoding
  ********************************************************************
-->

<!-- class Visibility: default -->
<element name="TUTF8Encoding">
<short>UTF-8 unicode encoding</short>
<descr>
<p>
<var>TUTF8Encoding</var> is the encoding class used to represent the UTF-8 encoding.
</p>
</descr>
<seealso>
<link id="TUnicodeEncoding"/>
<link id="TUTF7Encoding"/>
<link id="TMBCSEncoding"/>
<link id="TBigendianUnicodeEncoding"/>
</seealso>
</element>

<!-- constructor Visibility: public -->
<element name="TUTF8Encoding.Create">
<short>Create a new instance of the <var>TUTF8Encoding</var> class</short>
<descr>
<var>Create</var> creates a new instance of the <var>TUTF8Encoding</var> class and sets the 
codepage to <var>CP_UTF8</var>.
</descr>
<seealso>
<link id="TEncoding.CodePage"/>
<link id="TEncoding"/>
</seealso>
</element>

<!-- function Visibility: public -->
<element name="TUTF8Encoding.Clone" link="TEncoding.Clone">
<short>Clone a <var>TUTF8Encoding</var> instance</short>
<descr>
<var>CLone</var> overrides <link id="TEncoding.Clone"/> to provide a clone of the <var>TUTF8Encoding</var> instance.
</descr>
<seealso>
<link id="TEncoding.Clone"/>
</seealso>
</element>

<!-- function Visibility: public -->
<element name="TUTF8Encoding.GetMaxByteCount" link="TEncoding.GetMaxByteCount">
<short>Return max number of bytes needed to represent a string</short>
<descr>
<var>GetMaxByteCount</var> overrides <link id="TEncoding.GetMaxByteCount"/> to return the  
maximum number of bytes needed to represent a string.
</descr>
<seealso>
<link id="TEncoding.GetMaxByteCount"/>
</seealso>
</element>

<!-- function Visibility: public -->
<element name="TUTF8Encoding.GetMaxCharCount" link="TEncoding.GetMaxCharCount">
<short>Return max number of characters that can be represented by an array of bytes</short>
<descr>
<var>GetMaxCharCount</var> overrides <link id="TEncoding.GetMaxCharCount"/> to return the  
maximum number of bytes needed to represent a string.
</descr>
<seealso>
<link id="TEncoding.GetMaxCharCount"/>
</seealso>
</element>
 
<!-- function Visibility: public -->
<element name="TUTF8Encoding.GetPreamble" link="TEncoding.GetPreamble">
<short>Return BOM marker bytes</short>
<descr>
<var>GetPreamble</var> overrides <link id="TEncoding.GetPreamble"/> to return the  
3 UTF8 BOM Marker bytes ($EF,$BB,$BF).
</descr>
<seealso>
<link id="TEncoding.GetPreamble"/>
</seealso>
</element>

<!--
  ********************************************************************
    #rtl.sysutils.TUnicodeEncoding
  ********************************************************************
-->

<!-- class Visibility: default -->
<element name="TUnicodeEncoding">
<short>UTF-16 unicode encoding</short>
<descr>
<p>
<var>TUnicodeEncoding</var> is the encoding class used to represent the UTF-16 encoding.
</p>
</descr>
<seealso>
<link id="TUnicodeEncoding"/>
<link id="TUTF7Encoding"/>
<link id="TMBCSEncoding"/>
<link id="TBigendianUnicodeEncoding"/>
</seealso>
</element>

<!-- constructor Visibility: public -->
<element name="TUnicodeEncoding.Create">
<short>Create a new instance of the <var>TUnicodeEncoding</var> class</short>
<descr>
<var>Create</var> creates a new instance of the <var>TUnicodeEncoding</var> class and sets the 
codepage to <var>CP_UTF16</var>.
</descr>
<seealso>
<link id="TEncoding.CodePage"/>
<link id="TEncoding"/>
</seealso>
</element>

<!-- function Visibility: public -->
<element name="TUnicodeEncoding.Clone" link="TEncoding.Clone">
<short>Clone a <var>TUnicodeEncoding</var> instance</short>
<descr>
<var>CLone</var> overrides <link id="TEncoding.Clone"/> to provide a clone of the <var>TUnicodeEncoding</var> instance.
</descr>
<seealso>
<link id="TEncoding.Clone"/>
</seealso>
</element>

<!-- function Visibility: public -->
<element name="TUnicodeEncoding.GetMaxByteCount" link="TEncoding.GetMaxByteCount">
<short>Return max number of bytes needed to represent a string</short>
<descr>
<var>GetMaxByteCount</var> overrides <link id="TEncoding.GetMaxByteCount"/> to return the  
maximum number of bytes needed to represent a string.
</descr>
<seealso>
<link id="TEncoding.GetMaxByteCount"/>
</seealso>
</element>

<!-- function Visibility: public -->
<element name="TUnicodeEncoding.GetMaxCharCount" link="TEncoding.GetMaxCharCount">
<short>Return max number of characters that can be represented by an array of bytes</short>
<descr>
<var>GetMaxCharCount</var> overrides <link id="TEncoding.GetMaxCharCount"/> to return the  
maximum number of bytes needed to represent a string.
</descr>
<seealso>
<link id="TEncoding.GetMaxCharCount"/>
</seealso>
</element>
 
<!-- function Visibility: public -->
<element name="TUnicodeEncoding.GetPreamble" link="TEncoding.GetPreamble">
<short>Return BOM marker bytes</short>
<descr>
<var>GetPreamble</var> overrides <link id="TEncoding.GetPreamble"/> to return the  
2 UTF-16 BOM Marker bytes ($FF,$FE).
</descr>
<seealso>
<link id="TEncoding.GetPreamble"/>
</seealso>
</element>

<!--
  ********************************************************************
    #rtl.sysutils.TBigEndianUnicodeEncoding
  ********************************************************************
-->

<!-- class Visibility: default -->
<element name="TBigEndianUnicodeEncoding">
<short>Big-endian UTF-16 unicode encoding</short>
<descr>
<p>
<var>TBigEndianUnicodeEncoding</var> is the encoding class used to represent the UTF-16 big-endian encoding.
</p>
</descr>
<seealso>
<link id="TBigEndianUnicodeEncoding"/>
<link id="TUTF7Encoding"/>
<link id="TMBCSEncoding"/>
<link id="TBigendianUnicodeEncoding"/>
</seealso>
</element>

<!-- constructor Visibility: public -->
<element name="TBigEndianUnicodeEncoding.Create">
<short>Create a new instance of the <var>TBigEndianUnicodeEncoding</var> class</short>
<descr>
<var>Create</var> creates a new instance of the <var>TBigEndianUnicodeEncoding</var> class and sets the 
codepage to <var>CP_UTF16BE</var>.
</descr>
<seealso>
<link id="TEncoding.CodePage"/>
<link id="TEncoding"/>
</seealso>
</element>

<!-- function Visibility: public -->
<element name="TBigEndianUnicodeEncoding.Clone" link="TEncoding.Clone">
<short>Clone a <var>TBigEndianUnicodeEncoding</var> instance</short>
<descr>
<var>CLone</var> overrides <link id="TEncoding.Clone"/> to provide a clone of the <var>TBigEndianUnicodeEncoding</var> instance.
</descr>
<seealso>
<link id="TEncoding.Clone"/>
</seealso>
</element>

 
<!-- function Visibility: public -->
<element name="TBigEndianUnicodeEncoding.GetPreamble" link="TEncoding.GetPreamble">
<short>Return BOM marker bytes</short>
<descr>
<var>GetPreamble</var> overrides <link id="TEncoding.GetPreamble"/> to return the  
2 UTF-16 BOM Marker bytes ($FF,$FE).
</descr>
<seealso>
<link id="TEncoding.GetPreamble"/>
</seealso>
</element>

</module>
</package>
</fpdoc-descriptions>
