#
# Don't edit, this file is generated by FPCMake Version 2.0.0 [2017-08-22 rev 37024]
#
default: help
MAKEFILETARGETS=i386-linux i386-go32v2 i386-win32 i386-os2 i386-freebsd i386-beos i386-haiku i386-netbsd i386-solaris i386-netware i386-openbsd i386-wdosx i386-darwin i386-emx i386-watcom i386-netwlibc i386-wince i386-embedded i386-symbian i386-nativent i386-iphonesim i386-android i386-aros m68k-linux m68k-netbsd m68k-amiga m68k-atari m68k-palmos m68k-macos m68k-embedded powerpc-linux powerpc-netbsd powerpc-amiga powerpc-macos powerpc-darwin powerpc-morphos powerpc-embedded powerpc-wii powerpc-aix sparc-linux sparc-netbsd sparc-solaris sparc-embedded x86_64-linux x86_64-freebsd x86_64-netbsd x86_64-solaris x86_64-openbsd x86_64-darwin x86_64-win64 x86_64-embedded x86_64-iphonesim x86_64-aros x86_64-dragonfly arm-linux arm-palmos arm-darwin arm-wince arm-gba arm-nds arm-embedded arm-symbian arm-android arm-aros powerpc64-linux powerpc64-darwin powerpc64-embedded powerpc64-aix avr-embedded armeb-linux armeb-embedded mips-linux mipsel-linux mipsel-embedded mipsel-android jvm-java jvm-android i8086-embedded i8086-msdos i8086-win16 aarch64-linux aarch64-darwin wasm-wasm sparc64-linux
BSDs = freebsd netbsd openbsd darwin dragonfly
UNIXs = linux $(BSDs) solaris qnx haiku aix
LIMIT83fs = go32v2 os2 emx watcom msdos win16
OSNeedsComspecToRunBatch = go32v2 watcom
FORCE:
.PHONY: FORCE
override PATH:=$(patsubst %/,%,$(subst \,/,$(PATH)))
ifneq ($(findstring darwin,$(OSTYPE)),)
inUnix=1 #darwin
SEARCHPATH:=$(filter-out .,$(subst :, ,$(PATH)))
else
ifeq ($(findstring ;,$(PATH)),)
inUnix=1
SEARCHPATH:=$(filter-out .,$(subst :, ,$(PATH)))
else
SEARCHPATH:=$(subst ;, ,$(PATH))
endif
endif
SEARCHPATH+=$(patsubst %/,%,$(subst \,/,$(dir $(MAKE))))
PWD:=$(strip $(wildcard $(addsuffix /pwd.exe,$(SEARCHPATH))))
ifeq ($(PWD),)
PWD:=$(strip $(wildcard $(addsuffix /pwd,$(SEARCHPATH))))
ifeq ($(PWD),)
$(error You need the GNU utils package to use this Makefile)
else
PWD:=$(firstword $(PWD))
SRCEXEEXT=
endif
else
PWD:=$(firstword $(PWD))
SRCEXEEXT=.exe
endif
ifndef inUnix
ifeq ($(OS),Windows_NT)
inWinNT=1
else
ifdef OS2_SHELL
inOS2=1
endif
endif
else
ifneq ($(findstring cygdrive,$(PATH)),)
inCygWin=1
endif
endif
ifdef inUnix
SRCBATCHEXT=.sh
else
ifdef inOS2
SRCBATCHEXT=.cmd
else
SRCBATCHEXT=.bat
endif
endif
ifdef COMSPEC
ifneq ($(findstring $(OS_SOURCE),$(OSNeedsComspecToRunBatch)),)
ifndef RUNBATCH
RUNBATCH=$(COMSPEC) /C
endif
endif
endif
ifdef inUnix
PATHSEP=/
else
PATHSEP:=$(subst /,\,/)
ifdef inCygWin
PATHSEP=/
endif
endif
ifdef PWD
BASEDIR:=$(subst \,/,$(shell $(PWD)))
ifdef inCygWin
ifneq ($(findstring /cygdrive/,$(BASEDIR)),)
BASENODIR:=$(patsubst /cygdrive%,%,$(BASEDIR))
BASEDRIVE:=$(firstword $(subst /, ,$(BASENODIR)))
BASEDIR:=$(subst /cygdrive/$(BASEDRIVE)/,$(BASEDRIVE):/,$(BASEDIR))
endif
endif
else
BASEDIR=.
endif
ifdef inOS2
ifndef ECHO
ECHO:=$(strip $(wildcard $(addsuffix /gecho$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(ECHO),)
ECHO:=$(strip $(wildcard $(addsuffix /echo$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(ECHO),)
ECHO=echo
else
ECHO:=$(firstword $(ECHO))
endif
else
ECHO:=$(firstword $(ECHO))
endif
endif
export ECHO
endif
ifndef FPC
ifdef PP
FPC=$(PP)
endif
endif
ifndef FPC
FPCPROG:=$(strip $(wildcard $(addsuffix /fpc$(SRCEXEEXT),$(SEARCHPATH))))
ifneq ($(FPCPROG),)
FPCPROG:=$(firstword $(FPCPROG))
ifneq ($(CPU_TARGET),)
FPC:=$(shell $(FPCPROG) -P$(CPU_TARGET) -PB)
else
FPC:=$(shell $(FPCPROG) -PB)
endif
ifneq ($(findstring Error,$(FPC)),)
override FPC=$(firstword $(strip $(wildcard $(addsuffix /ppc386$(SRCEXEEXT),$(SEARCHPATH)))))
else
ifeq ($(strip $(wildcard $(FPC))),)
FPC:=$(firstword $(FPCPROG))
endif
endif
else
override FPC=$(firstword $(strip $(wildcard $(addsuffix /ppc386$(SRCEXEEXT),$(SEARCHPATH)))))
endif
endif
override FPC:=$(subst $(SRCEXEEXT),,$(FPC))
override FPC:=$(subst \,/,$(FPC))$(SRCEXEEXT)
FOUNDFPC:=$(strip $(wildcard $(FPC)))
ifeq ($(FOUNDFPC),)
FOUNDFPC=$(strip $(wildcard $(addsuffix /$(FPC),$(SEARCHPATH))))
ifeq ($(FOUNDFPC),)
$(error Compiler $(FPC) not found)
endif
endif
ifndef FPC_COMPILERINFO
FPC_COMPILERINFO:=$(shell $(FPC) -iVSPTPSOTO)
endif
ifndef FPC_VERSION
FPC_VERSION:=$(word 1,$(FPC_COMPILERINFO))
endif
export FPC FPC_VERSION FPC_COMPILERINFO
unexport CHECKDEPEND ALLDEPENDENCIES
ifndef CPU_TARGET
ifdef CPU_TARGET_DEFAULT
CPU_TARGET=$(CPU_TARGET_DEFAULT)
endif
endif
ifndef OS_TARGET
ifdef OS_TARGET_DEFAULT
OS_TARGET=$(OS_TARGET_DEFAULT)
endif
endif
ifndef CPU_SOURCE
CPU_SOURCE:=$(word 2,$(FPC_COMPILERINFO))
endif
ifndef CPU_TARGET
CPU_TARGET:=$(word 3,$(FPC_COMPILERINFO))
endif
ifndef OS_SOURCE
OS_SOURCE:=$(word 4,$(FPC_COMPILERINFO))
endif
ifndef OS_TARGET
OS_TARGET:=$(word 5,$(FPC_COMPILERINFO))
endif
FULL_TARGET=$(CPU_TARGET)-$(OS_TARGET)
FULL_SOURCE=$(CPU_SOURCE)-$(OS_SOURCE)
ifeq ($(CPU_TARGET),armeb)
ARCH=arm
override FPCOPT+=-Cb
else
ifeq ($(CPU_TARGET),armel)
ARCH=arm
override FPCOPT+=-CaEABI
else
ARCH=$(CPU_TARGET)
endif
endif
ifeq ($(FULL_TARGET),arm-embedded)
ifeq ($(SUBARCH),)
$(error When compiling for arm-embedded, a sub-architecture (e.g. SUBARCH=armv4t or SUBARCH=armv7m) must be defined)
endif
override FPCOPT+=-Cp$(SUBARCH)
endif
ifeq ($(FULL_TARGET),avr-embedded)
ifeq ($(SUBARCH),)
$(error When compiling for avr-embedded, a sub-architecture (e.g. SUBARCH=avr25 or SUBARCH=avr35) must be defined)
endif
override FPCOPT+=-Cp$(SUBARCH)
endif
ifeq ($(FULL_TARGET),mipsel-embedded)
ifeq ($(SUBARCH),)
$(error When compiling for mipsel-embedded, a sub-architecture (e.g. SUBARCH=pic32mx) must be defined)
endif
override FPCOPT+=-Cp$(SUBARCH)
endif
ifneq ($(findstring $(OS_SOURCE),$(LIMIT83fs)),)
TARGETSUFFIX=$(OS_TARGET)
SOURCESUFFIX=$(OS_SOURCE)
else
ifneq ($(findstring $(OS_TARGET),$(LIMIT83fs)),)
TARGETSUFFIX=$(OS_TARGET)
else
TARGETSUFFIX=$(FULL_TARGET)
endif
SOURCESUFFIX=$(FULL_SOURCE)
endif
ifneq ($(FULL_TARGET),$(FULL_SOURCE))
CROSSCOMPILE=1
endif
ifeq ($(findstring makefile,$(MAKECMDGOALS)),)
ifeq ($(findstring $(FULL_TARGET),$(MAKEFILETARGETS)),)
$(error The Makefile doesn't support target $(FULL_TARGET), please run fpcmake first)
endif
endif
ifneq ($(findstring $(OS_TARGET),$(BSDs)),)
BSDhier=1
endif
ifeq ($(OS_TARGET),linux)
linuxHier=1
endif
ifndef CROSSCOMPILE
BUILDFULLNATIVE=1
export BUILDFULLNATIVE
endif
ifdef BUILDFULLNATIVE
BUILDNATIVE=1
export BUILDNATIVE
endif
export OS_TARGET OS_SOURCE ARCH CPU_TARGET CPU_SOURCE FULL_TARGET FULL_SOURCE TARGETSUFFIX SOURCESUFFIX CROSSCOMPILE
ifdef FPCDIR
override FPCDIR:=$(subst \,/,$(FPCDIR))
ifeq ($(wildcard $(addprefix $(FPCDIR)/,rtl)),)
override FPCDIR=wrong
endif
else
override FPCDIR=wrong
endif
ifdef DEFAULT_FPCDIR
ifeq ($(FPCDIR),wrong)
override FPCDIR:=$(subst \,/,$(DEFAULT_FPCDIR))
ifeq ($(wildcard $(addprefix $(FPCDIR)/,rtl)),)
override FPCDIR=wrong
endif
endif
endif
ifeq ($(FPCDIR),wrong)
ifdef inUnix
override FPCDIR=/usr/local/lib/fpc/$(FPC_VERSION)
ifeq ($(wildcard $(FPCDIR)/units),)
override FPCDIR=/usr/lib/fpc/$(FPC_VERSION)
endif
else
override FPCDIR:=$(subst /$(FPC),,$(firstword $(strip $(wildcard $(addsuffix /$(FPC),$(SEARCHPATH))))))
override FPCDIR:=$(FPCDIR)/..
ifeq ($(wildcard $(addprefix $(FPCDIR)/,rtl)),)
override FPCDIR:=$(FPCDIR)/..
ifeq ($(wildcard $(addprefix $(FPCDIR)/,rtl)),)
override FPCDIR:=$(BASEDIR)
ifeq ($(wildcard $(addprefix $(FPCDIR)/,rtl)),)
override FPCDIR=c:/pp
endif
endif
endif
endif
endif
ifndef CROSSBINDIR
CROSSBINDIR:=$(wildcard $(FPCDIR)/bin/$(TARGETSUFFIX))
endif
ifneq ($(findstring $(OS_TARGET),darwin iphonesim),)
ifeq ($(OS_SOURCE),darwin)
DARWIN2DARWIN=1
endif
endif
ifndef BINUTILSPREFIX
ifndef CROSSBINDIR
ifdef CROSSCOMPILE
ifneq ($(OS_TARGET),msdos)
ifndef DARWIN2DARWIN
ifneq ($(CPU_TARGET),jvm)
BINUTILSPREFIX=$(CPU_TARGET)-$(OS_TARGET)-
ifeq ($(OS_TARGET),android)
ifeq ($(CPU_TARGET),arm)
BINUTILSPREFIX=arm-linux-androideabi-
else
ifeq ($(CPU_TARGET),i386)
BINUTILSPREFIX=i686-linux-android-
else
ifeq ($(CPU_TARGET),mipsel)
BINUTILSPREFIX=mipsel-linux-android-
endif
endif
endif
endif
endif
endif
else
BINUTILSPREFIX=$(OS_TARGET)-
endif
endif
endif
endif
UNITSDIR:=$(wildcard $(FPCDIR)/units/$(TARGETSUFFIX))
ifeq ($(UNITSDIR),)
UNITSDIR:=$(wildcard $(FPCDIR)/units/$(OS_TARGET))
endif
PACKAGESDIR:=$(wildcard $(FPCDIR) $(FPCDIR)/packages)
ifndef FPCFPMAKE
ifdef CROSSCOMPILE
ifeq ($(strip $(wildcard $(addsuffix /compiler/ppc$(SRCEXEEXT),$(FPCDIR)))),)
FPCPROG:=$(strip $(wildcard $(addsuffix /fpc$(SRCEXEEXT),$(SEARCHPATH))))
ifneq ($(FPCPROG),)
FPCPROG:=$(firstword $(FPCPROG))
FPCFPMAKE:=$(shell $(FPCPROG) -PB)
ifeq ($(strip $(wildcard $(FPCFPMAKE))),)
FPCFPMAKE:=$(firstword $(FPCPROG))
endif
else
override FPCFPMAKE=$(firstword $(strip $(wildcard $(addsuffix /ppc386$(SRCEXEEXT),$(SEARCHPATH)))))
endif
else
FPCFPMAKE=$(strip $(wildcard $(addsuffix /compiler/ppc$(SRCEXEEXT),$(FPCDIR))))
FPMAKE_SKIP_CONFIG=-n
export FPCFPMAKE
export FPMAKE_SKIP_CONFIG
endif
else
FPMAKE_SKIP_CONFIG=-n
FPCFPMAKE=$(FPC)
endif
endif
override PACKAGE_NAME=fpdocs
override PACKAGE_VERSION=3.0.2
SEARCHFPCSRCPATH=../fpcsrc ../fpc ..
FPCSRCDIR:=$(patsubst %/compiler,%,$(firstword $(strip $(wildcard $(addsuffix /compiler,$(SEARCHFPCSRCPATH))))))
ifeq ($(FULL_TARGET),i386-linux)
override TARGET_PROGRAMS+=cleanxml relinkdocs
endif
ifeq ($(FULL_TARGET),i386-go32v2)
override TARGET_PROGRAMS+=cleanxml relinkdocs
endif
ifeq ($(FULL_TARGET),i386-win32)
override TARGET_PROGRAMS+=cleanxml relinkdocs
endif
ifeq ($(FULL_TARGET),i386-os2)
override TARGET_PROGRAMS+=cleanxml relinkdocs
endif
ifeq ($(FULL_TARGET),i386-freebsd)
override TARGET_PROGRAMS+=cleanxml relinkdocs
endif
ifeq ($(FULL_TARGET),i386-beos)
override TARGET_PROGRAMS+=cleanxml relinkdocs
endif
ifeq ($(FULL_TARGET),i386-haiku)
override TARGET_PROGRAMS+=cleanxml relinkdocs
endif
ifeq ($(FULL_TARGET),i386-netbsd)
override TARGET_PROGRAMS+=cleanxml relinkdocs
endif
ifeq ($(FULL_TARGET),i386-solaris)
override TARGET_PROGRAMS+=cleanxml relinkdocs
endif
ifeq ($(FULL_TARGET),i386-netware)
override TARGET_PROGRAMS+=cleanxml relinkdocs
endif
ifeq ($(FULL_TARGET),i386-openbsd)
override TARGET_PROGRAMS+=cleanxml relinkdocs
endif
ifeq ($(FULL_TARGET),i386-wdosx)
override TARGET_PROGRAMS+=cleanxml relinkdocs
endif
ifeq ($(FULL_TARGET),i386-darwin)
override TARGET_PROGRAMS+=cleanxml relinkdocs
endif
ifeq ($(FULL_TARGET),i386-emx)
override TARGET_PROGRAMS+=cleanxml relinkdocs
endif
ifeq ($(FULL_TARGET),i386-watcom)
override TARGET_PROGRAMS+=cleanxml relinkdocs
endif
ifeq ($(FULL_TARGET),i386-netwlibc)
override TARGET_PROGRAMS+=cleanxml relinkdocs
endif
ifeq ($(FULL_TARGET),i386-wince)
override TARGET_PROGRAMS+=cleanxml relinkdocs
endif
ifeq ($(FULL_TARGET),i386-embedded)
override TARGET_PROGRAMS+=cleanxml relinkdocs
endif
ifeq ($(FULL_TARGET),i386-symbian)
override TARGET_PROGRAMS+=cleanxml relinkdocs
endif
ifeq ($(FULL_TARGET),i386-nativent)
override TARGET_PROGRAMS+=cleanxml relinkdocs
endif
ifeq ($(FULL_TARGET),i386-iphonesim)
override TARGET_PROGRAMS+=cleanxml relinkdocs
endif
ifeq ($(FULL_TARGET),i386-android)
override TARGET_PROGRAMS+=cleanxml relinkdocs
endif
ifeq ($(FULL_TARGET),i386-aros)
override TARGET_PROGRAMS+=cleanxml relinkdocs
endif
ifeq ($(FULL_TARGET),m68k-linux)
override TARGET_PROGRAMS+=cleanxml relinkdocs
endif
ifeq ($(FULL_TARGET),m68k-netbsd)
override TARGET_PROGRAMS+=cleanxml relinkdocs
endif
ifeq ($(FULL_TARGET),m68k-amiga)
override TARGET_PROGRAMS+=cleanxml relinkdocs
endif
ifeq ($(FULL_TARGET),m68k-atari)
override TARGET_PROGRAMS+=cleanxml relinkdocs
endif
ifeq ($(FULL_TARGET),m68k-palmos)
override TARGET_PROGRAMS+=cleanxml relinkdocs
endif
ifeq ($(FULL_TARGET),m68k-macos)
override TARGET_PROGRAMS+=cleanxml relinkdocs
endif
ifeq ($(FULL_TARGET),m68k-embedded)
override TARGET_PROGRAMS+=cleanxml relinkdocs
endif
ifeq ($(FULL_TARGET),powerpc-linux)
override TARGET_PROGRAMS+=cleanxml relinkdocs
endif
ifeq ($(FULL_TARGET),powerpc-netbsd)
override TARGET_PROGRAMS+=cleanxml relinkdocs
endif
ifeq ($(FULL_TARGET),powerpc-amiga)
override TARGET_PROGRAMS+=cleanxml relinkdocs
endif
ifeq ($(FULL_TARGET),powerpc-macos)
override TARGET_PROGRAMS+=cleanxml relinkdocs
endif
ifeq ($(FULL_TARGET),powerpc-darwin)
override TARGET_PROGRAMS+=cleanxml relinkdocs
endif
ifeq ($(FULL_TARGET),powerpc-morphos)
override TARGET_PROGRAMS+=cleanxml relinkdocs
endif
ifeq ($(FULL_TARGET),powerpc-embedded)
override TARGET_PROGRAMS+=cleanxml relinkdocs
endif
ifeq ($(FULL_TARGET),powerpc-wii)
override TARGET_PROGRAMS+=cleanxml relinkdocs
endif
ifeq ($(FULL_TARGET),powerpc-aix)
override TARGET_PROGRAMS+=cleanxml relinkdocs
endif
ifeq ($(FULL_TARGET),sparc-linux)
override TARGET_PROGRAMS+=cleanxml relinkdocs
endif
ifeq ($(FULL_TARGET),sparc-netbsd)
override TARGET_PROGRAMS+=cleanxml relinkdocs
endif
ifeq ($(FULL_TARGET),sparc-solaris)
override TARGET_PROGRAMS+=cleanxml relinkdocs
endif
ifeq ($(FULL_TARGET),sparc-embedded)
override TARGET_PROGRAMS+=cleanxml relinkdocs
endif
ifeq ($(FULL_TARGET),x86_64-linux)
override TARGET_PROGRAMS+=cleanxml relinkdocs
endif
ifeq ($(FULL_TARGET),x86_64-freebsd)
override TARGET_PROGRAMS+=cleanxml relinkdocs
endif
ifeq ($(FULL_TARGET),x86_64-netbsd)
override TARGET_PROGRAMS+=cleanxml relinkdocs
endif
ifeq ($(FULL_TARGET),x86_64-solaris)
override TARGET_PROGRAMS+=cleanxml relinkdocs
endif
ifeq ($(FULL_TARGET),x86_64-openbsd)
override TARGET_PROGRAMS+=cleanxml relinkdocs
endif
ifeq ($(FULL_TARGET),x86_64-darwin)
override TARGET_PROGRAMS+=cleanxml relinkdocs
endif
ifeq ($(FULL_TARGET),x86_64-win64)
override TARGET_PROGRAMS+=cleanxml relinkdocs
endif
ifeq ($(FULL_TARGET),x86_64-embedded)
override TARGET_PROGRAMS+=cleanxml relinkdocs
endif
ifeq ($(FULL_TARGET),x86_64-iphonesim)
override TARGET_PROGRAMS+=cleanxml relinkdocs
endif
ifeq ($(FULL_TARGET),x86_64-aros)
override TARGET_PROGRAMS+=cleanxml relinkdocs
endif
ifeq ($(FULL_TARGET),x86_64-dragonfly)
override TARGET_PROGRAMS+=cleanxml relinkdocs
endif
ifeq ($(FULL_TARGET),arm-linux)
override TARGET_PROGRAMS+=cleanxml relinkdocs
endif
ifeq ($(FULL_TARGET),arm-palmos)
override TARGET_PROGRAMS+=cleanxml relinkdocs
endif
ifeq ($(FULL_TARGET),arm-darwin)
override TARGET_PROGRAMS+=cleanxml relinkdocs
endif
ifeq ($(FULL_TARGET),arm-wince)
override TARGET_PROGRAMS+=cleanxml relinkdocs
endif
ifeq ($(FULL_TARGET),arm-gba)
override TARGET_PROGRAMS+=cleanxml relinkdocs
endif
ifeq ($(FULL_TARGET),arm-nds)
override TARGET_PROGRAMS+=cleanxml relinkdocs
endif
ifeq ($(FULL_TARGET),arm-embedded)
override TARGET_PROGRAMS+=cleanxml relinkdocs
endif
ifeq ($(FULL_TARGET),arm-symbian)
override TARGET_PROGRAMS+=cleanxml relinkdocs
endif
ifeq ($(FULL_TARGET),arm-android)
override TARGET_PROGRAMS+=cleanxml relinkdocs
endif
ifeq ($(FULL_TARGET),arm-aros)
override TARGET_PROGRAMS+=cleanxml relinkdocs
endif
ifeq ($(FULL_TARGET),powerpc64-linux)
override TARGET_PROGRAMS+=cleanxml relinkdocs
endif
ifeq ($(FULL_TARGET),powerpc64-darwin)
override TARGET_PROGRAMS+=cleanxml relinkdocs
endif
ifeq ($(FULL_TARGET),powerpc64-embedded)
override TARGET_PROGRAMS+=cleanxml relinkdocs
endif
ifeq ($(FULL_TARGET),powerpc64-aix)
override TARGET_PROGRAMS+=cleanxml relinkdocs
endif
ifeq ($(FULL_TARGET),avr-embedded)
override TARGET_PROGRAMS+=cleanxml relinkdocs
endif
ifeq ($(FULL_TARGET),armeb-linux)
override TARGET_PROGRAMS+=cleanxml relinkdocs
endif
ifeq ($(FULL_TARGET),armeb-embedded)
override TARGET_PROGRAMS+=cleanxml relinkdocs
endif
ifeq ($(FULL_TARGET),mips-linux)
override TARGET_PROGRAMS+=cleanxml relinkdocs
endif
ifeq ($(FULL_TARGET),mipsel-linux)
override TARGET_PROGRAMS+=cleanxml relinkdocs
endif
ifeq ($(FULL_TARGET),mipsel-embedded)
override TARGET_PROGRAMS+=cleanxml relinkdocs
endif
ifeq ($(FULL_TARGET),mipsel-android)
override TARGET_PROGRAMS+=cleanxml relinkdocs
endif
ifeq ($(FULL_TARGET),jvm-java)
override TARGET_PROGRAMS+=cleanxml relinkdocs
endif
ifeq ($(FULL_TARGET),jvm-android)
override TARGET_PROGRAMS+=cleanxml relinkdocs
endif
ifeq ($(FULL_TARGET),i8086-embedded)
override TARGET_PROGRAMS+=cleanxml relinkdocs
endif
ifeq ($(FULL_TARGET),i8086-msdos)
override TARGET_PROGRAMS+=cleanxml relinkdocs
endif
ifeq ($(FULL_TARGET),i8086-win16)
override TARGET_PROGRAMS+=cleanxml relinkdocs
endif
ifeq ($(FULL_TARGET),aarch64-linux)
override TARGET_PROGRAMS+=cleanxml relinkdocs
endif
ifeq ($(FULL_TARGET),aarch64-darwin)
override TARGET_PROGRAMS+=cleanxml relinkdocs
endif
ifeq ($(FULL_TARGET),wasm-wasm)
override TARGET_PROGRAMS+=cleanxml relinkdocs
endif
ifeq ($(FULL_TARGET),sparc64-linux)
override TARGET_PROGRAMS+=cleanxml relinkdocs
endif
ifeq ($(FULL_TARGET),i386-linux)
override TARGET_UNITS+=relinkhtml
endif
ifeq ($(FULL_TARGET),i386-go32v2)
override TARGET_UNITS+=relinkhtml
endif
ifeq ($(FULL_TARGET),i386-win32)
override TARGET_UNITS+=relinkhtml
endif
ifeq ($(FULL_TARGET),i386-os2)
override TARGET_UNITS+=relinkhtml
endif
ifeq ($(FULL_TARGET),i386-freebsd)
override TARGET_UNITS+=relinkhtml
endif
ifeq ($(FULL_TARGET),i386-beos)
override TARGET_UNITS+=relinkhtml
endif
ifeq ($(FULL_TARGET),i386-haiku)
override TARGET_UNITS+=relinkhtml
endif
ifeq ($(FULL_TARGET),i386-netbsd)
override TARGET_UNITS+=relinkhtml
endif
ifeq ($(FULL_TARGET),i386-solaris)
override TARGET_UNITS+=relinkhtml
endif
ifeq ($(FULL_TARGET),i386-netware)
override TARGET_UNITS+=relinkhtml
endif
ifeq ($(FULL_TARGET),i386-openbsd)
override TARGET_UNITS+=relinkhtml
endif
ifeq ($(FULL_TARGET),i386-wdosx)
override TARGET_UNITS+=relinkhtml
endif
ifeq ($(FULL_TARGET),i386-darwin)
override TARGET_UNITS+=relinkhtml
endif
ifeq ($(FULL_TARGET),i386-emx)
override TARGET_UNITS+=relinkhtml
endif
ifeq ($(FULL_TARGET),i386-watcom)
override TARGET_UNITS+=relinkhtml
endif
ifeq ($(FULL_TARGET),i386-netwlibc)
override TARGET_UNITS+=relinkhtml
endif
ifeq ($(FULL_TARGET),i386-wince)
override TARGET_UNITS+=relinkhtml
endif
ifeq ($(FULL_TARGET),i386-embedded)
override TARGET_UNITS+=relinkhtml
endif
ifeq ($(FULL_TARGET),i386-symbian)
override TARGET_UNITS+=relinkhtml
endif
ifeq ($(FULL_TARGET),i386-nativent)
override TARGET_UNITS+=relinkhtml
endif
ifeq ($(FULL_TARGET),i386-iphonesim)
override TARGET_UNITS+=relinkhtml
endif
ifeq ($(FULL_TARGET),i386-android)
override TARGET_UNITS+=relinkhtml
endif
ifeq ($(FULL_TARGET),i386-aros)
override TARGET_UNITS+=relinkhtml
endif
ifeq ($(FULL_TARGET),m68k-linux)
override TARGET_UNITS+=relinkhtml
endif
ifeq ($(FULL_TARGET),m68k-netbsd)
override TARGET_UNITS+=relinkhtml
endif
ifeq ($(FULL_TARGET),m68k-amiga)
override TARGET_UNITS+=relinkhtml
endif
ifeq ($(FULL_TARGET),m68k-atari)
override TARGET_UNITS+=relinkhtml
endif
ifeq ($(FULL_TARGET),m68k-palmos)
override TARGET_UNITS+=relinkhtml
endif
ifeq ($(FULL_TARGET),m68k-macos)
override TARGET_UNITS+=relinkhtml
endif
ifeq ($(FULL_TARGET),m68k-embedded)
override TARGET_UNITS+=relinkhtml
endif
ifeq ($(FULL_TARGET),powerpc-linux)
override TARGET_UNITS+=relinkhtml
endif
ifeq ($(FULL_TARGET),powerpc-netbsd)
override TARGET_UNITS+=relinkhtml
endif
ifeq ($(FULL_TARGET),powerpc-amiga)
override TARGET_UNITS+=relinkhtml
endif
ifeq ($(FULL_TARGET),powerpc-macos)
override TARGET_UNITS+=relinkhtml
endif
ifeq ($(FULL_TARGET),powerpc-darwin)
override TARGET_UNITS+=relinkhtml
endif
ifeq ($(FULL_TARGET),powerpc-morphos)
override TARGET_UNITS+=relinkhtml
endif
ifeq ($(FULL_TARGET),powerpc-embedded)
override TARGET_UNITS+=relinkhtml
endif
ifeq ($(FULL_TARGET),powerpc-wii)
override TARGET_UNITS+=relinkhtml
endif
ifeq ($(FULL_TARGET),powerpc-aix)
override TARGET_UNITS+=relinkhtml
endif
ifeq ($(FULL_TARGET),sparc-linux)
override TARGET_UNITS+=relinkhtml
endif
ifeq ($(FULL_TARGET),sparc-netbsd)
override TARGET_UNITS+=relinkhtml
endif
ifeq ($(FULL_TARGET),sparc-solaris)
override TARGET_UNITS+=relinkhtml
endif
ifeq ($(FULL_TARGET),sparc-embedded)
override TARGET_UNITS+=relinkhtml
endif
ifeq ($(FULL_TARGET),x86_64-linux)
override TARGET_UNITS+=relinkhtml
endif
ifeq ($(FULL_TARGET),x86_64-freebsd)
override TARGET_UNITS+=relinkhtml
endif
ifeq ($(FULL_TARGET),x86_64-netbsd)
override TARGET_UNITS+=relinkhtml
endif
ifeq ($(FULL_TARGET),x86_64-solaris)
override TARGET_UNITS+=relinkhtml
endif
ifeq ($(FULL_TARGET),x86_64-openbsd)
override TARGET_UNITS+=relinkhtml
endif
ifeq ($(FULL_TARGET),x86_64-darwin)
override TARGET_UNITS+=relinkhtml
endif
ifeq ($(FULL_TARGET),x86_64-win64)
override TARGET_UNITS+=relinkhtml
endif
ifeq ($(FULL_TARGET),x86_64-embedded)
override TARGET_UNITS+=relinkhtml
endif
ifeq ($(FULL_TARGET),x86_64-iphonesim)
override TARGET_UNITS+=relinkhtml
endif
ifeq ($(FULL_TARGET),x86_64-aros)
override TARGET_UNITS+=relinkhtml
endif
ifeq ($(FULL_TARGET),x86_64-dragonfly)
override TARGET_UNITS+=relinkhtml
endif
ifeq ($(FULL_TARGET),arm-linux)
override TARGET_UNITS+=relinkhtml
endif
ifeq ($(FULL_TARGET),arm-palmos)
override TARGET_UNITS+=relinkhtml
endif
ifeq ($(FULL_TARGET),arm-darwin)
override TARGET_UNITS+=relinkhtml
endif
ifeq ($(FULL_TARGET),arm-wince)
override TARGET_UNITS+=relinkhtml
endif
ifeq ($(FULL_TARGET),arm-gba)
override TARGET_UNITS+=relinkhtml
endif
ifeq ($(FULL_TARGET),arm-nds)
override TARGET_UNITS+=relinkhtml
endif
ifeq ($(FULL_TARGET),arm-embedded)
override TARGET_UNITS+=relinkhtml
endif
ifeq ($(FULL_TARGET),arm-symbian)
override TARGET_UNITS+=relinkhtml
endif
ifeq ($(FULL_TARGET),arm-android)
override TARGET_UNITS+=relinkhtml
endif
ifeq ($(FULL_TARGET),arm-aros)
override TARGET_UNITS+=relinkhtml
endif
ifeq ($(FULL_TARGET),powerpc64-linux)
override TARGET_UNITS+=relinkhtml
endif
ifeq ($(FULL_TARGET),powerpc64-darwin)
override TARGET_UNITS+=relinkhtml
endif
ifeq ($(FULL_TARGET),powerpc64-embedded)
override TARGET_UNITS+=relinkhtml
endif
ifeq ($(FULL_TARGET),powerpc64-aix)
override TARGET_UNITS+=relinkhtml
endif
ifeq ($(FULL_TARGET),avr-embedded)
override TARGET_UNITS+=relinkhtml
endif
ifeq ($(FULL_TARGET),armeb-linux)
override TARGET_UNITS+=relinkhtml
endif
ifeq ($(FULL_TARGET),armeb-embedded)
override TARGET_UNITS+=relinkhtml
endif
ifeq ($(FULL_TARGET),mips-linux)
override TARGET_UNITS+=relinkhtml
endif
ifeq ($(FULL_TARGET),mipsel-linux)
override TARGET_UNITS+=relinkhtml
endif
ifeq ($(FULL_TARGET),mipsel-embedded)
override TARGET_UNITS+=relinkhtml
endif
ifeq ($(FULL_TARGET),mipsel-android)
override TARGET_UNITS+=relinkhtml
endif
ifeq ($(FULL_TARGET),jvm-java)
override TARGET_UNITS+=relinkhtml
endif
ifeq ($(FULL_TARGET),jvm-android)
override TARGET_UNITS+=relinkhtml
endif
ifeq ($(FULL_TARGET),i8086-embedded)
override TARGET_UNITS+=relinkhtml
endif
ifeq ($(FULL_TARGET),i8086-msdos)
override TARGET_UNITS+=relinkhtml
endif
ifeq ($(FULL_TARGET),i8086-win16)
override TARGET_UNITS+=relinkhtml
endif
ifeq ($(FULL_TARGET),aarch64-linux)
override TARGET_UNITS+=relinkhtml
endif
ifeq ($(FULL_TARGET),aarch64-darwin)
override TARGET_UNITS+=relinkhtml
endif
ifeq ($(FULL_TARGET),wasm-wasm)
override TARGET_UNITS+=relinkhtml
endif
ifeq ($(FULL_TARGET),sparc64-linux)
override TARGET_UNITS+=relinkhtml
endif
ifdef REQUIRE_UNITSDIR
override UNITSDIR+=$(REQUIRE_UNITSDIR)
endif
ifdef REQUIRE_PACKAGESDIR
override PACKAGESDIR+=$(REQUIRE_PACKAGESDIR)
endif
ifdef ZIPINSTALL
ifneq ($(findstring $(OS_TARGET),$(UNIXs)),)
UNIXHier=1
endif
else
ifneq ($(findstring $(OS_SOURCE),$(UNIXs)),)
UNIXHier=1
endif
endif
ifndef INSTALL_PREFIX
ifdef PREFIX
INSTALL_PREFIX=$(PREFIX)
endif
endif
ifndef INSTALL_PREFIX
ifdef UNIXHier
INSTALL_PREFIX=/usr/local
else
ifdef INSTALL_FPCPACKAGE
INSTALL_BASEDIR:=/pp
else
INSTALL_BASEDIR:=/$(PACKAGE_NAME)
endif
endif
endif
export INSTALL_PREFIX
ifdef INSTALL_FPCSUBDIR
export INSTALL_FPCSUBDIR
endif
ifndef DIST_DESTDIR
DIST_DESTDIR:=$(BASEDIR)
endif
export DIST_DESTDIR
ifndef COMPILER_UNITTARGETDIR
ifdef PACKAGEDIR_MAIN
COMPILER_UNITTARGETDIR=$(PACKAGEDIR_MAIN)/units/$(TARGETSUFFIX)
else
COMPILER_UNITTARGETDIR=units/$(TARGETSUFFIX)
endif
endif
ifndef COMPILER_TARGETDIR
COMPILER_TARGETDIR=.
endif
ifndef INSTALL_BASEDIR
ifdef UNIXHier
ifdef INSTALL_FPCPACKAGE
INSTALL_BASEDIR:=$(INSTALL_PREFIX)/lib/fpc/$(FPC_VERSION)
else
INSTALL_BASEDIR:=$(INSTALL_PREFIX)/lib/$(PACKAGE_NAME)
endif
else
INSTALL_BASEDIR:=$(INSTALL_PREFIX)
endif
endif
ifndef INSTALL_BINDIR
ifdef UNIXHier
INSTALL_BINDIR:=$(INSTALL_PREFIX)/bin
else
INSTALL_BINDIR:=$(INSTALL_BASEDIR)/bin
ifdef INSTALL_FPCPACKAGE
ifdef CROSSCOMPILE
ifdef CROSSINSTALL
INSTALL_BINDIR:=$(INSTALL_BINDIR)/$(SOURCESUFFIX)
else
INSTALL_BINDIR:=$(INSTALL_BINDIR)/$(TARGETSUFFIX)
endif
else
INSTALL_BINDIR:=$(INSTALL_BINDIR)/$(TARGETSUFFIX)
endif
endif
endif
endif
ifndef INSTALL_UNITDIR
INSTALL_UNITDIR:=$(INSTALL_BASEDIR)/units/$(TARGETSUFFIX)
ifdef INSTALL_FPCPACKAGE
ifdef PACKAGE_NAME
INSTALL_UNITDIR:=$(INSTALL_UNITDIR)/$(PACKAGE_NAME)
endif
endif
endif
ifndef INSTALL_LIBDIR
ifdef UNIXHier
INSTALL_LIBDIR:=$(INSTALL_PREFIX)/lib
else
INSTALL_LIBDIR:=$(INSTALL_UNITDIR)
endif
endif
ifndef INSTALL_SOURCEDIR
ifdef UNIXHier
ifdef BSDhier
SRCPREFIXDIR=share/src
else
ifdef linuxHier
SRCPREFIXDIR=share/src
else
SRCPREFIXDIR=src
endif
endif
ifdef INSTALL_FPCPACKAGE
ifdef INSTALL_FPCSUBDIR
INSTALL_SOURCEDIR:=$(INSTALL_PREFIX)/$(SRCPREFIXDIR)/fpc-$(FPC_VERSION)/$(INSTALL_FPCSUBDIR)/$(PACKAGE_NAME)
else
INSTALL_SOURCEDIR:=$(INSTALL_PREFIX)/$(SRCPREFIXDIR)/fpc-$(FPC_VERSION)/$(PACKAGE_NAME)
endif
else
INSTALL_SOURCEDIR:=$(INSTALL_PREFIX)/$(SRCPREFIXDIR)/$(PACKAGE_NAME)-$(PACKAGE_VERSION)
endif
else
ifdef INSTALL_FPCPACKAGE
ifdef INSTALL_FPCSUBDIR
INSTALL_SOURCEDIR:=$(INSTALL_BASEDIR)/source/$(INSTALL_FPCSUBDIR)/$(PACKAGE_NAME)
else
INSTALL_SOURCEDIR:=$(INSTALL_BASEDIR)/source/$(PACKAGE_NAME)
endif
else
INSTALL_SOURCEDIR:=$(INSTALL_BASEDIR)/source
endif
endif
endif
ifndef INSTALL_DOCDIR
ifdef UNIXHier
ifdef BSDhier
DOCPREFIXDIR=share/doc
else
ifdef linuxHier
DOCPREFIXDIR=share/doc
else
DOCPREFIXDIR=doc
endif
endif
ifdef INSTALL_FPCPACKAGE
INSTALL_DOCDIR:=$(INSTALL_PREFIX)/$(DOCPREFIXDIR)/fpc-$(FPC_VERSION)/$(PACKAGE_NAME)
else
INSTALL_DOCDIR:=$(INSTALL_PREFIX)/$(DOCPREFIXDIR)/$(PACKAGE_NAME)-$(PACKAGE_VERSION)
endif
else
ifdef INSTALL_FPCPACKAGE
INSTALL_DOCDIR:=$(INSTALL_BASEDIR)/doc/$(PACKAGE_NAME)
else
INSTALL_DOCDIR:=$(INSTALL_BASEDIR)/doc
endif
endif
endif
ifndef INSTALL_EXAMPLEDIR
ifdef UNIXHier
ifdef INSTALL_FPCPACKAGE
ifdef BSDhier
INSTALL_EXAMPLEDIR:=$(INSTALL_PREFIX)/share/examples/fpc-$(FPC_VERSION)/$(PACKAGE_NAME)
else
ifdef linuxHier
INSTALL_EXAMPLEDIR:=$(INSTALL_DOCDIR)/examples
else
INSTALL_EXAMPLEDIR:=$(INSTALL_PREFIX)/doc/fpc-$(FPC_VERSION)/examples/$(PACKAGE_NAME)
endif
endif
else
ifdef BSDhier
INSTALL_EXAMPLEDIR:=$(INSTALL_PREFIX)/share/examples/$(PACKAGE_NAME)-$(PACKAGE_VERSION)
else
ifdef linuxHier
INSTALL_EXAMPLEDIR:=$(INSTALL_DOCDIR)/examples/$(PACKAGE_NAME)-$(PACKAGE_VERSION)
else
INSTALL_EXAMPLEDIR:=$(INSTALL_PREFIX)/doc/$(PACKAGE_NAME)-$(PACKAGE_VERSION)
endif
endif
endif
else
ifdef INSTALL_FPCPACKAGE
INSTALL_EXAMPLEDIR:=$(INSTALL_BASEDIR)/examples/$(PACKAGE_NAME)
else
INSTALL_EXAMPLEDIR:=$(INSTALL_BASEDIR)/examples
endif
endif
endif
ifndef INSTALL_DATADIR
INSTALL_DATADIR=$(INSTALL_BASEDIR)
endif
ifndef INSTALL_SHAREDDIR
INSTALL_SHAREDDIR=$(INSTALL_PREFIX)/lib
endif
ifdef CROSSCOMPILE
ifndef CROSSBINDIR
CROSSBINDIR:=$(wildcard $(CROSSTARGETDIR)/bin/$(SOURCESUFFIX))
ifeq ($(CROSSBINDIR),)
CROSSBINDIR:=$(wildcard $(INSTALL_BASEDIR)/cross/$(TARGETSUFFIX)/bin/$(FULL_SOURCE))
endif
endif
else
CROSSBINDIR=
endif
BATCHEXT=.bat
LOADEREXT=.as
EXEEXT=.exe
PPLEXT=.ppl
PPUEXT=.ppu
OEXT=.o
ASMEXT=.s
SMARTEXT=.sl
STATICLIBEXT=.a
SHAREDLIBEXT=.so
SHAREDLIBPREFIX=libfp
STATICLIBPREFIX=libp
IMPORTLIBPREFIX=libimp
RSTEXT=.rst
EXEDBGEXT=.dbg
ifeq ($(OS_TARGET),go32v1)
STATICLIBPREFIX=
SHORTSUFFIX=v1
endif
ifeq ($(OS_TARGET),go32v2)
STATICLIBPREFIX=
SHORTSUFFIX=dos
IMPORTLIBPREFIX=
endif
ifeq ($(OS_TARGET),watcom)
STATICLIBPREFIX=
OEXT=.obj
ASMEXT=.asm
SHAREDLIBEXT=.dll
SHORTSUFFIX=wat
IMPORTLIBPREFIX=
endif
ifneq ($(CPU_TARGET),jvm)
ifeq ($(OS_TARGET),android)
BATCHEXT=.sh
EXEEXT=
HASSHAREDLIB=1
SHORTSUFFIX=lnx
endif
endif
ifeq ($(OS_TARGET),linux)
BATCHEXT=.sh
EXEEXT=
HASSHAREDLIB=1
SHORTSUFFIX=lnx
endif
ifeq ($(OS_TARGET),dragonfly)
BATCHEXT=.sh
EXEEXT=
HASSHAREDLIB=1
SHORTSUFFIX=df
endif
ifeq ($(OS_TARGET),freebsd)
BATCHEXT=.sh
EXEEXT=
HASSHAREDLIB=1
SHORTSUFFIX=fbs
endif
ifeq ($(OS_TARGET),netbsd)
BATCHEXT=.sh
EXEEXT=
HASSHAREDLIB=1
SHORTSUFFIX=nbs
endif
ifeq ($(OS_TARGET),openbsd)
BATCHEXT=.sh
EXEEXT=
HASSHAREDLIB=1
SHORTSUFFIX=obs
endif
ifeq ($(OS_TARGET),win32)
SHAREDLIBEXT=.dll
SHORTSUFFIX=w32
endif
ifeq ($(OS_TARGET),os2)
BATCHEXT=.cmd
AOUTEXT=.out
STATICLIBPREFIX=
SHAREDLIBEXT=.dll
SHORTSUFFIX=os2
ECHO=echo
IMPORTLIBPREFIX=
endif
ifeq ($(OS_TARGET),emx)
BATCHEXT=.cmd
AOUTEXT=.out
STATICLIBPREFIX=
SHAREDLIBEXT=.dll
SHORTSUFFIX=emx
ECHO=echo
IMPORTLIBPREFIX=
endif
ifeq ($(OS_TARGET),amiga)
EXEEXT=
SHAREDLIBEXT=.library
SHORTSUFFIX=amg
endif
ifeq ($(OS_TARGET),aros)
EXEEXT=
SHAREDLIBEXT=.library
SHORTSUFFIX=aros
endif
ifeq ($(OS_TARGET),morphos)
EXEEXT=
SHAREDLIBEXT=.library
SHORTSUFFIX=mos
endif
ifeq ($(OS_TARGET),atari)
EXEEXT=.ttp
SHORTSUFFIX=ata
endif
ifeq ($(OS_TARGET),beos)
BATCHEXT=.sh
EXEEXT=
SHORTSUFFIX=be
endif
ifeq ($(OS_TARGET),haiku)
BATCHEXT=.sh
EXEEXT=
SHORTSUFFIX=hai
endif
ifeq ($(OS_TARGET),solaris)
BATCHEXT=.sh
EXEEXT=
SHORTSUFFIX=sun
endif
ifeq ($(OS_TARGET),qnx)
BATCHEXT=.sh
EXEEXT=
SHORTSUFFIX=qnx
endif
ifeq ($(OS_TARGET),netware)
EXEEXT=.nlm
STATICLIBPREFIX=
SHORTSUFFIX=nw
IMPORTLIBPREFIX=imp
endif
ifeq ($(OS_TARGET),netwlibc)
EXEEXT=.nlm
STATICLIBPREFIX=
SHORTSUFFIX=nwl
IMPORTLIBPREFIX=imp
endif
ifeq ($(OS_TARGET),macos)
BATCHEXT=
EXEEXT=
DEBUGSYMEXT=.xcoff
SHORTSUFFIX=mac
IMPORTLIBPREFIX=imp
endif
ifneq ($(findstring $(OS_TARGET),darwin iphonesim),)
BATCHEXT=.sh
EXEEXT=
HASSHAREDLIB=1
SHORTSUFFIX=dwn
EXEDBGEXT=.dSYM
endif
ifeq ($(OS_TARGET),gba)
EXEEXT=.gba
SHAREDLIBEXT=.so
SHORTSUFFIX=gba
endif
ifeq ($(OS_TARGET),symbian)
SHAREDLIBEXT=.dll
SHORTSUFFIX=symbian
endif
ifeq ($(OS_TARGET),NativeNT)
SHAREDLIBEXT=.dll
SHORTSUFFIX=nativent
endif
ifeq ($(OS_TARGET),wii)
EXEEXT=.dol
SHAREDLIBEXT=.so
SHORTSUFFIX=wii
endif
ifeq ($(OS_TARGET),aix)
BATCHEXT=.sh
EXEEXT=
SHORTSUFFIX=aix
endif
ifeq ($(OS_TARGET),java)
OEXT=.class
ASMEXT=.j
SHAREDLIBEXT=.jar
SHORTSUFFIX=java
endif
ifeq ($(CPU_TARGET),jvm)
ifeq ($(OS_TARGET),android)
OEXT=.class
ASMEXT=.j
SHAREDLIBEXT=.jar
SHORTSUFFIX=android
endif
endif
ifeq ($(OS_TARGET),msdos)
STATICLIBPREFIX=
STATICLIBEXT=.a
SHORTSUFFIX=d16
endif
ifeq ($(OS_TARGET),embedded)
ifeq ($(CPU_TARGET),i8086)
STATICLIBPREFIX=
STATICLIBEXT=.a
else
EXEEXT=.bin
endif
SHORTSUFFIX=emb
endif
ifeq ($(OS_TARGET),win16)
STATICLIBPREFIX=
STATICLIBEXT=.a
SHAREDLIBEXT=.dll
SHORTSUFFIX=w16
endif
ifneq ($(findstring $(OS_SOURCE),$(LIMIT83fs)),)
FPCMADE=fpcmade.$(SHORTSUFFIX)
ZIPSUFFIX=$(SHORTSUFFIX)
ZIPCROSSPREFIX=
ZIPSOURCESUFFIX=src
ZIPEXAMPLESUFFIX=exm
else
FPCMADE=fpcmade.$(TARGETSUFFIX)
ZIPSOURCESUFFIX=.source
ZIPEXAMPLESUFFIX=.examples
ifdef CROSSCOMPILE
ZIPSUFFIX=.$(SOURCESUFFIX)
ZIPCROSSPREFIX=$(TARGETSUFFIX)-
else
ZIPSUFFIX=.$(TARGETSUFFIX)
ZIPCROSSPREFIX=
endif
endif
ifndef ECHO
ECHO:=$(strip $(wildcard $(addsuffix /gecho$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(ECHO),)
ECHO:=$(strip $(wildcard $(addsuffix /echo$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(ECHO),)
ECHO= __missing_command_ECHO
else
ECHO:=$(firstword $(ECHO))
endif
else
ECHO:=$(firstword $(ECHO))
endif
endif
export ECHO
ifndef DATE
DATE:=$(strip $(wildcard $(addsuffix /gdate$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(DATE),)
DATE:=$(strip $(wildcard $(addsuffix /date$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(DATE),)
DATE= __missing_command_DATE
else
DATE:=$(firstword $(DATE))
endif
else
DATE:=$(firstword $(DATE))
endif
endif
export DATE
ifndef GINSTALL
GINSTALL:=$(strip $(wildcard $(addsuffix /ginstall$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(GINSTALL),)
GINSTALL:=$(strip $(wildcard $(addsuffix /install$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(GINSTALL),)
GINSTALL= __missing_command_GINSTALL
else
GINSTALL:=$(firstword $(GINSTALL))
endif
else
GINSTALL:=$(firstword $(GINSTALL))
endif
endif
export GINSTALL
ifndef CPPROG
CPPROG:=$(strip $(wildcard $(addsuffix /cp$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(CPPROG),)
CPPROG= __missing_command_CPPROG
else
CPPROG:=$(firstword $(CPPROG))
endif
endif
export CPPROG
ifndef RMPROG
RMPROG:=$(strip $(wildcard $(addsuffix /rm$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(RMPROG),)
RMPROG= __missing_command_RMPROG
else
RMPROG:=$(firstword $(RMPROG))
endif
endif
export RMPROG
ifndef MVPROG
MVPROG:=$(strip $(wildcard $(addsuffix /mv$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(MVPROG),)
MVPROG= __missing_command_MVPROG
else
MVPROG:=$(firstword $(MVPROG))
endif
endif
export MVPROG
ifndef MKDIRPROG
MKDIRPROG:=$(strip $(wildcard $(addsuffix /gmkdir$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(MKDIRPROG),)
MKDIRPROG:=$(strip $(wildcard $(addsuffix /mkdir$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(MKDIRPROG),)
MKDIRPROG= __missing_command_MKDIRPROG
else
MKDIRPROG:=$(firstword $(MKDIRPROG))
endif
else
MKDIRPROG:=$(firstword $(MKDIRPROG))
endif
endif
export MKDIRPROG
ifndef ECHOREDIR
ifndef inUnix
ECHOREDIR=echo
else
ECHOREDIR=$(ECHO)
endif
endif
ifndef COPY
COPY:=$(CPPROG) -fp
endif
ifndef COPYTREE
COPYTREE:=$(CPPROG) -Rfp
endif
ifndef MKDIRTREE
MKDIRTREE:=$(MKDIRPROG) -p
endif
ifndef MOVE
MOVE:=$(MVPROG) -f
endif
ifndef DEL
DEL:=$(RMPROG) -f
endif
ifndef DELTREE
DELTREE:=$(RMPROG) -rf
endif
ifndef INSTALL
ifdef inUnix
INSTALL:=$(GINSTALL) -c -m 644
else
INSTALL:=$(COPY)
endif
endif
ifndef INSTALLEXE
ifdef inUnix
INSTALLEXE:=$(GINSTALL) -c -m 755
else
INSTALLEXE:=$(COPY)
endif
endif
ifndef MKDIR
MKDIR:=$(GINSTALL) -m 755 -d
endif
export ECHOREDIR COPY COPYTREE MOVE DEL DELTREE INSTALL INSTALLEXE MKDIR
ifndef PPUMOVE
PPUMOVE:=$(strip $(wildcard $(addsuffix /ppumove$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(PPUMOVE),)
PPUMOVE= __missing_command_PPUMOVE
else
PPUMOVE:=$(firstword $(PPUMOVE))
endif
endif
export PPUMOVE
ifndef FPCMAKE
FPCMAKE:=$(strip $(wildcard $(addsuffix /fpcmake$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(FPCMAKE),)
FPCMAKE= __missing_command_FPCMAKE
else
FPCMAKE:=$(firstword $(FPCMAKE))
endif
endif
export FPCMAKE
ifndef ZIPPROG
ZIPPROG:=$(strip $(wildcard $(addsuffix /zip$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(ZIPPROG),)
ZIPPROG= __missing_command_ZIPPROG
else
ZIPPROG:=$(firstword $(ZIPPROG))
endif
endif
export ZIPPROG
ifndef TARPROG
TARPROG:=$(strip $(wildcard $(addsuffix /gtar$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(TARPROG),)
TARPROG:=$(strip $(wildcard $(addsuffix /tar$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(TARPROG),)
TARPROG= __missing_command_TARPROG
else
TARPROG:=$(firstword $(TARPROG))
endif
else
TARPROG:=$(firstword $(TARPROG))
endif
endif
export TARPROG
ASNAME=$(BINUTILSPREFIX)as
LDNAME=$(BINUTILSPREFIX)ld
ARNAME=$(BINUTILSPREFIX)ar
RCNAME=$(BINUTILSPREFIX)rc
NASMNAME=$(BINUTILSPREFIX)nasm
ifndef ASPROG
ifdef CROSSBINDIR
ASPROG=$(CROSSBINDIR)/$(ASNAME)$(SRCEXEEXT)
else
ASPROG=$(ASNAME)
endif
endif
ifndef LDPROG
ifdef CROSSBINDIR
LDPROG=$(CROSSBINDIR)/$(LDNAME)$(SRCEXEEXT)
else
LDPROG=$(LDNAME)
endif
endif
ifndef RCPROG
ifdef CROSSBINDIR
RCPROG=$(CROSSBINDIR)/$(RCNAME)$(SRCEXEEXT)
else
RCPROG=$(RCNAME)
endif
endif
ifndef ARPROG
ifdef CROSSBINDIR
ARPROG=$(CROSSBINDIR)/$(ARNAME)$(SRCEXEEXT)
else
ARPROG=$(ARNAME)
endif
endif
ifndef NASMPROG
ifdef CROSSBINDIR
NASMPROG=$(CROSSBINDIR)/$(NASMNAME)$(SRCEXEEXT)
else
NASMPROG=$(NASMNAME)
endif
endif
AS=$(ASPROG)
LD=$(LDPROG)
RC=$(RCPROG)
AR=$(ARPROG)
NASM=$(NASMPROG)
ifdef inUnix
PPAS=./ppas$(SRCBATCHEXT)
else
PPAS=ppas$(SRCBATCHEXT)
endif
ifdef inUnix
LDCONFIG=ldconfig
else
LDCONFIG=
endif
ifdef DATE
DATESTR:=$(shell $(DATE) +%Y%m%d)
else
DATESTR=
endif
ZIPOPT=-9
ZIPEXT=.zip
ifeq ($(USETAR),bz2)
TAROPT=vj
TAREXT=.tar.bz2
else
TAROPT=vz
TAREXT=.tar.gz
endif
ifndef NOCPUDEF
override FPCOPTDEF=$(ARCH)
endif
ifneq ($(OS_TARGET),$(OS_SOURCE))
override FPCOPT+=-T$(OS_TARGET)
endif
ifneq ($(CPU_TARGET),$(CPU_SOURCE))
override FPCOPT+=-P$(ARCH)
endif
ifeq ($(OS_SOURCE),openbsd)
override FPCOPT+=-FD$(NEW_BINUTILS_PATH)
override FPCMAKEOPT+=-FD$(NEW_BINUTILS_PATH)
override FPMAKE_BUILD_OPT+=-FD$(NEW_BINUTILS_PATH)
endif
ifndef CROSSBOOTSTRAP
ifneq ($(BINUTILSPREFIX),)
override FPCOPT+=-XP$(BINUTILSPREFIX)
endif
ifneq ($(BINUTILSPREFIX),)
override FPCOPT+=-Xr$(RLINKPATH)
endif
endif
ifndef CROSSCOMPILE
ifneq ($(BINUTILSPREFIX),)
override FPCMAKEOPT+=-XP$(BINUTILSPREFIX)
override FPMAKE_BUILD_OPT+=-XP$(BINUTILSPREFIX)
endif
endif
ifdef UNITDIR
override FPCOPT+=$(addprefix -Fu,$(UNITDIR))
endif
ifdef LIBDIR
override FPCOPT+=$(addprefix -Fl,$(LIBDIR))
endif
ifdef OBJDIR
override FPCOPT+=$(addprefix -Fo,$(OBJDIR))
endif
ifdef INCDIR
override FPCOPT+=$(addprefix -Fi,$(INCDIR))
endif
ifdef LINKSMART
override FPCOPT+=-XX
endif
ifdef CREATESMART
override FPCOPT+=-CX
endif
ifdef DEBUG
override FPCOPT+=-gl
override FPCOPTDEF+=DEBUG
endif
ifdef RELEASE
ifneq ($(findstring 2.0.,$(FPC_VERSION)),)
ifeq ($(CPU_TARGET),i386)
FPCCPUOPT:=-OG2p3
endif
ifeq ($(CPU_TARGET),powerpc)
FPCCPUOPT:=-O1r
endif
else
FPCCPUOPT:=-O2
endif
override FPCOPT+=-Ur -Xs $(FPCCPUOPT) -n
override FPCOPTDEF+=RELEASE
endif
ifdef STRIP
override FPCOPT+=-Xs
endif
ifdef OPTIMIZE
override FPCOPT+=-O2
endif
ifdef VERBOSE
override FPCOPT+=-vwni
endif
ifdef COMPILER_OPTIONS
override FPCOPT+=$(COMPILER_OPTIONS)
endif
ifdef COMPILER_UNITDIR
override FPCOPT+=$(addprefix -Fu,$(COMPILER_UNITDIR))
endif
ifdef COMPILER_LIBRARYDIR
override FPCOPT+=$(addprefix -Fl,$(COMPILER_LIBRARYDIR))
endif
ifdef COMPILER_OBJECTDIR
override FPCOPT+=$(addprefix -Fo,$(COMPILER_OBJECTDIR))
endif
ifdef COMPILER_INCLUDEDIR
override FPCOPT+=$(addprefix -Fi,$(COMPILER_INCLUDEDIR))
endif
ifdef CROSSBINDIR
override FPCOPT+=-FD$(CROSSBINDIR)
endif
ifdef COMPILER_TARGETDIR
override FPCOPT+=-FE$(COMPILER_TARGETDIR)
ifeq ($(COMPILER_TARGETDIR),.)
override TARGETDIRPREFIX=
else
override TARGETDIRPREFIX=$(COMPILER_TARGETDIR)/
endif
endif
ifdef COMPILER_UNITTARGETDIR
override FPCOPT+=-FU$(COMPILER_UNITTARGETDIR)
ifeq ($(COMPILER_UNITTARGETDIR),.)
override UNITTARGETDIRPREFIX=
else
override UNITTARGETDIRPREFIX=$(COMPILER_UNITTARGETDIR)/
endif
else
ifdef COMPILER_TARGETDIR
override COMPILER_UNITTARGETDIR=$(COMPILER_TARGETDIR)
override UNITTARGETDIRPREFIX=$(TARGETDIRPREFIX)
endif
endif
ifdef CREATESHARED
override FPCOPT+=-Cg
endif
ifneq ($(findstring $(OS_TARGET),dragonfly freebsd openbsd netbsd linux solaris),)
ifneq ($(findstring $(CPU_TARGET),x86_64 mips mipsel),)
override FPCOPT+=-Cg
endif
endif
ifdef LINKSHARED
endif
ifdef OPT
override FPCOPT+=$(OPT)
endif
ifdef FPMAKEBUILDOPT
override FPMAKE_BUILD_OPT+=$(FPMAKEBUILDOPT)
endif
ifdef FPCOPTDEF
override FPCOPT+=$(addprefix -d,$(FPCOPTDEF))
endif
ifdef CFGFILE
override FPCOPT+=@$(CFGFILE)
endif
ifdef USEENV
override FPCEXTCMD:=$(FPCOPT)
override FPCOPT:=!FPCEXTCMD
export FPCEXTCMD
endif
override AFULL_TARGET=$(CPU_TARGET)-$(OS_TARGET)
override AFULL_SOURCE=$(CPU_SOURCE)-$(OS_SOURCE)
ifneq ($(AFULL_TARGET),$(AFULL_SOURCE))
override ACROSSCOMPILE=1
endif
ifdef ACROSSCOMPILE
override FPCOPT+=$(CROSSOPT)
endif
override COMPILER:=$(strip $(FPC) $(FPCOPT))
ifneq (,$(findstring -sh ,$(COMPILER)))
UseEXECPPAS=1
endif
ifneq (,$(findstring -s ,$(COMPILER)))
ifeq ($(FULL_SOURCE),$(FULL_TARGET))
UseEXECPPAS=1
endif
endif
ifneq ($(UseEXECPPAS),1)
EXECPPAS=
else
ifdef RUNBATCH
EXECPPAS:=@$(RUNBATCH) $(PPAS)
else
EXECPPAS:=@$(PPAS)
endif
endif
.PHONY: fpc_units
ifneq ($(TARGET_UNITS)$(TARGET_IMPLICITUNITS),)
override ALLTARGET+=fpc_units
override UNITPPUFILES=$(addsuffix $(PPUEXT),$(TARGET_UNITS))
override IMPLICITUNITPPUFILES=$(addsuffix $(PPUEXT),$(TARGET_IMPLICITUNITS))
override INSTALLPPUFILES+=$(UNITPPUFILES) $(IMPLICITUNITPPUFILES)
override CLEANPPUFILES+=$(UNITPPUFILES) $(IMPLICITUNITPPUFILES)
endif
fpc_units: $(COMPILER_UNITTARGETDIR) $(UNITPPUFILES)
.PHONY: fpc_exes
ifndef CROSSINSTALL
ifneq ($(TARGET_PROGRAMS),)
override EXEFILES=$(addsuffix $(EXEEXT),$(TARGET_PROGRAMS))
override EXEOFILES:=$(addsuffix $(OEXT),$(TARGET_PROGRAMS)) $(addprefix $(STATICLIBPREFIX),$(addsuffix $(STATICLIBEXT),$(TARGET_PROGRAMS))) $(addprefix $(IMPORTLIBPREFIX),$(addsuffix $(STATICLIBEXT),$(TARGET_PROGRAMS)))
override EXEDBGFILES:=$(addsuffix $(EXEDBGEXT),$(TARGET_PROGRAMS))
override ALLTARGET+=fpc_exes
override INSTALLEXEFILES+=$(EXEFILES)
override CLEANEXEFILES+=$(EXEFILES) $(EXEOFILES)
override CLEANEXEDBGFILES+=$(EXEDBGFILES)
ifeq ($(OS_TARGET),os2)
override CLEANEXEFILES+=$(addsuffix $(AOUTEXT),$(TARGET_PROGRAMS))
endif
ifeq ($(OS_TARGET),emx)
override CLEANEXEFILES+=$(addsuffix $(AOUTEXT),$(TARGET_PROGRAMS))
endif
endif
endif
fpc_exes: $(COMPILER_TARGETDIR) $(COMPILER_UNITTARGETDIR) $(EXEFILES)
ifdef TARGET_RSTS
override RSTFILES=$(addsuffix $(RSTEXT),$(TARGET_RSTS))
override CLEANRSTFILES+=$(RSTFILES)
endif
.PHONY: fpc_all fpc_smart fpc_debug fpc_release fpc_shared
$(FPCMADE): $(ALLDEPENDENCIES) $(ALLTARGET)
	@$(ECHOREDIR) Compiled > $(FPCMADE)
fpc_all: $(FPCMADE)
fpc_smart:
	$(MAKE) all LINKSMART=1 CREATESMART=1
fpc_debug:
	$(MAKE) all DEBUG=1
fpc_release:
	$(MAKE) all RELEASE=1
.SUFFIXES: $(EXEEXT) $(PPUEXT) $(OEXT) .pas .lpr .dpr .pp .rc .res
$(COMPILER_UNITTARGETDIR):
	$(MKDIRTREE) $(COMPILER_UNITTARGETDIR)
$(COMPILER_TARGETDIR):
	$(MKDIRTREE) $(COMPILER_TARGETDIR)
%$(PPUEXT): %.pp
	$(COMPILER) $<
	$(EXECPPAS)
%$(PPUEXT): %.pas
	$(COMPILER) $<
	$(EXECPPAS)
%$(EXEEXT): %.pp
	$(COMPILER) $<
	$(EXECPPAS)
%$(EXEEXT): %.pas
	$(COMPILER) $<
	$(EXECPPAS)
%$(EXEEXT): %.lpr
	$(COMPILER) $<
	$(EXECPPAS)
%$(EXEEXT): %.dpr
	$(COMPILER) $<
	$(EXECPPAS)
%.res: %.rc
	windres -i $< -o $@
vpath %.pp $(COMPILER_SOURCEDIR) $(COMPILER_INCLUDEDIR)
vpath %.pas $(COMPILER_SOURCEDIR) $(COMPILER_INCLUDEDIR)
vpath %.lpr $(COMPILER_SOURCEDIR) $(COMPILER_INCLUDEDIR)
vpath %.dpr $(COMPILER_SOURCEDIR) $(COMPILER_INCLUDEDIR)
vpath %.inc $(COMPILER_INCLUDEDIR)
vpath %$(OEXT) $(COMPILER_UNITTARGETDIR)
vpath %$(PPUEXT) $(COMPILER_UNITTARGETDIR)
.PHONY: fpc_shared
override INSTALLTARGET+=fpc_shared_install
ifndef SHARED_LIBVERSION
SHARED_LIBVERSION=$(FPC_VERSION)
endif
ifndef SHARED_LIBNAME
SHARED_LIBNAME=$(PACKAGE_NAME)
endif
ifndef SHARED_FULLNAME
SHARED_FULLNAME=$(SHAREDLIBPREFIX)$(SHARED_LIBNAME)-$(SHARED_LIBVERSION)$(SHAREDLIBEXT)
endif
ifndef SHARED_LIBUNITS
SHARED_LIBUNITS:=$(TARGET_UNITS) $(TARGET_IMPLICITUNITS)
override SHARED_LIBUNITS:=$(filter-out $(INSTALL_BUILDUNIT),$(SHARED_LIBUNITS))
endif
fpc_shared:
ifdef HASSHAREDLIB
	$(MAKE) all CREATESHARED=1 LINKSHARED=1 CREATESMART=1
ifneq ($(SHARED_BUILD),n)
	$(PPUMOVE) -q $(SHARED_LIBUNITS) -i$(COMPILER_UNITTARGETDIR) -o$(SHARED_FULLNAME) -d$(COMPILER_UNITTARGETDIR)
endif
else
	@$(ECHO) Shared Libraries not supported
endif
fpc_shared_install:
ifneq ($(SHARED_BUILD),n)
ifneq ($(SHARED_LIBUNITS),)
ifneq ($(wildcard $(COMPILER_UNITTARGETDIR)/$(SHARED_FULLNAME)),)
	$(INSTALL) $(COMPILER_UNITTARGETDIR)/$(SHARED_FULLNAME) $(INSTALL_SHAREDDIR)
endif
endif
endif
.PHONY: fpc_install fpc_sourceinstall fpc_exampleinstall
ifdef INSTALL_UNITS
override INSTALLPPUFILES+=$(addsuffix $(PPUEXT),$(INSTALL_UNITS))
endif
ifdef INSTALL_BUILDUNIT
override INSTALLPPUFILES:=$(filter-out $(INSTALL_BUILDUNIT)$(PPUEXT),$(INSTALLPPUFILES))
endif
ifdef INSTALLPPUFILES
override INSTALLPPULINKFILES:=$(subst $(PPUEXT),$(OEXT),$(INSTALLPPUFILES)) $(addprefix $(STATICLIBPREFIX),$(subst $(PPUEXT),$(STATICLIBEXT),$(INSTALLPPUFILES))) $(addprefix $(IMPORTLIBPREFIX),$(subst $(PPUEXT),$(STATICLIBEXT),$(INSTALLPPUFILES)))
ifneq ($(UNITTARGETDIRPREFIX),)
override INSTALLPPUFILES:=$(addprefix $(UNITTARGETDIRPREFIX),$(notdir $(INSTALLPPUFILES)))
override INSTALLPPULINKFILES:=$(wildcard $(addprefix $(UNITTARGETDIRPREFIX),$(notdir $(INSTALLPPULINKFILES))))
endif
override INSTALL_CREATEPACKAGEFPC=1
endif
ifdef INSTALLEXEFILES
ifneq ($(TARGETDIRPREFIX),)
override INSTALLEXEFILES:=$(addprefix $(TARGETDIRPREFIX),$(notdir $(INSTALLEXEFILES)))
endif
endif
fpc_install: all $(INSTALLTARGET)
ifdef INSTALLEXEFILES
	$(MKDIR) $(INSTALL_BINDIR)
	$(INSTALLEXE) $(INSTALLEXEFILES) $(INSTALL_BINDIR)
endif
ifdef INSTALL_CREATEPACKAGEFPC
ifdef FPCMAKE
ifdef PACKAGE_VERSION
ifneq ($(wildcard Makefile.fpc),)
	$(FPCMAKE) -p -T$(CPU_TARGET)-$(OS_TARGET) Makefile.fpc
	$(MKDIR) $(INSTALL_UNITDIR)
	$(INSTALL) Package.fpc $(INSTALL_UNITDIR)
endif
endif
endif
endif
ifdef INSTALLPPUFILES
	$(MKDIR) $(INSTALL_UNITDIR)
	$(INSTALL) $(INSTALLPPUFILES) $(INSTALL_UNITDIR)
ifneq ($(INSTALLPPULINKFILES),)
	$(INSTALL) $(INSTALLPPULINKFILES) $(INSTALL_UNITDIR)
endif
ifneq ($(wildcard $(LIB_FULLNAME)),)
	$(MKDIR) $(INSTALL_LIBDIR)
	$(INSTALL) $(LIB_FULLNAME) $(INSTALL_LIBDIR)
ifdef inUnix
	ln -sf $(LIB_FULLNAME) $(INSTALL_LIBDIR)/$(LIB_NAME)
endif
endif
endif
ifdef INSTALL_FILES
	$(MKDIR) $(INSTALL_DATADIR)
	$(INSTALL) $(INSTALL_FILES) $(INSTALL_DATADIR)
endif
fpc_sourceinstall: distclean
	$(MKDIR) $(INSTALL_SOURCEDIR)
	$(COPYTREE) $(BASEDIR)/* $(INSTALL_SOURCEDIR)
fpc_exampleinstall: $(EXAMPLEINSTALLTARGET) $(addsuffix _distclean,$(TARGET_EXAMPLEDIRS))
ifdef HASEXAMPLES
	$(MKDIR) $(INSTALL_EXAMPLEDIR)
endif
ifdef EXAMPLESOURCEFILES
	$(COPY) $(EXAMPLESOURCEFILES) $(INSTALL_EXAMPLEDIR)
endif
ifdef TARGET_EXAMPLEDIRS
	$(COPYTREE) $(addsuffix /*,$(TARGET_EXAMPLEDIRS)) $(INSTALL_EXAMPLEDIR)
endif
.PHONY: fpc_distinstall
fpc_distinstall: install exampleinstall
.PHONY: fpc_zipinstall fpc_zipsourceinstall fpc_zipexampleinstall
ifndef PACKDIR
ifndef inUnix
PACKDIR=$(BASEDIR)/../fpc-pack
else
PACKDIR=/tmp/fpc-pack
endif
endif
ifndef ZIPNAME
ifdef DIST_ZIPNAME
ZIPNAME=$(DIST_ZIPNAME)
else
ZIPNAME=$(PACKAGE_NAME)
endif
endif
ifndef FULLZIPNAME
FULLZIPNAME=$(ZIPCROSSPREFIX)$(ZIPPREFIX)$(ZIPNAME)$(ZIPSUFFIX)
endif
ifndef ZIPTARGET
ifdef DIST_ZIPTARGET
ZIPTARGET=DIST_ZIPTARGET
else
ZIPTARGET=install
endif
endif
ifndef USEZIP
ifdef inUnix
USETAR=1
endif
endif
ifndef inUnix
USEZIPWRAPPER=1
endif
ifdef USEZIPWRAPPER
ZIPPATHSEP=$(PATHSEP)
ZIPWRAPPER=$(subst /,$(PATHSEP),$(DIST_DESTDIR)/fpczip$(SRCBATCHEXT))
else
ZIPPATHSEP=/
endif
ZIPCMD_CDPACK:=cd $(subst /,$(ZIPPATHSEP),$(PACKDIR))
ZIPCMD_CDBASE:=cd $(subst /,$(ZIPPATHSEP),$(BASEDIR))
ifdef USETAR
ZIPDESTFILE:=$(DIST_DESTDIR)/$(FULLZIPNAME)$(TAREXT)
ZIPCMD_ZIP:=$(TARPROG) c$(TAROPT)f $(ZIPDESTFILE) *
else
ZIPDESTFILE:=$(DIST_DESTDIR)/$(FULLZIPNAME)$(ZIPEXT)
ZIPCMD_ZIP:=$(subst /,$(ZIPPATHSEP),$(ZIPPROG)) -Dr $(ZIPOPT) $(ZIPDESTFILE) *
endif
fpc_zipinstall:
	$(MAKE) $(ZIPTARGET) INSTALL_PREFIX=$(PACKDIR) ZIPINSTALL=1
	$(MKDIR) $(DIST_DESTDIR)
	$(DEL) $(ZIPDESTFILE)
ifdef USEZIPWRAPPER
ifneq ($(ECHOREDIR),echo)
	$(ECHOREDIR) -e "$(subst \,\\,$(ZIPCMD_CDPACK))" > $(ZIPWRAPPER)
	$(ECHOREDIR) -e "$(subst \,\\,$(ZIPCMD_ZIP))" >> $(ZIPWRAPPER)
	$(ECHOREDIR) -e "$(subst \,\\,$(ZIPCMD_CDBASE))" >> $(ZIPWRAPPER)
else
	echo $(ZIPCMD_CDPACK) > $(ZIPWRAPPER)
	echo $(ZIPCMD_ZIP) >> $(ZIPWRAPPER)
	echo $(ZIPCMD_CDBASE) >> $(ZIPWRAPPER)
endif
ifdef inUnix
	/bin/sh $(ZIPWRAPPER)
else
ifdef RUNBATCH
	$(RUNBATCH) $(ZIPWRAPPER)
else
	$(ZIPWRAPPER)
endif
endif
	$(DEL) $(ZIPWRAPPER)
else
	$(ZIPCMD_CDPACK) ; $(ZIPCMD_ZIP) ; $(ZIPCMD_CDBASE)
endif
	$(DELTREE) $(PACKDIR)
fpc_zipsourceinstall:
	$(MAKE) fpc_zipinstall ZIPTARGET=sourceinstall ZIPSUFFIX=$(ZIPSOURCESUFFIX)
fpc_zipexampleinstall:
ifdef HASEXAMPLES
	$(MAKE) fpc_zipinstall ZIPTARGET=exampleinstall ZIPSUFFIX=$(ZIPEXAMPLESUFFIX)
endif
fpc_zipdistinstall:
	$(MAKE) fpc_zipinstall ZIPTARGET=distinstall
.PHONY: fpc_clean fpc_cleanall fpc_distclean
ifdef EXEFILES
override CLEANEXEFILES:=$(addprefix $(TARGETDIRPREFIX),$(CLEANEXEFILES))
override CLEANEXEDBGFILES:=$(addprefix $(TARGETDIRPREFIX),$(CLEANEXEDBGFILES))
endif
ifdef CLEAN_PROGRAMS
override CLEANEXEFILES+=$(addprefix $(TARGETDIRPREFIX),$(addsuffix $(EXEEXT), $(CLEAN_PROGRAMS)))
override CLEANEXEDBGFILES+=$(addprefix $(TARGETDIRPREFIX),$(addsuffix $(EXEDBGEXT), $(CLEAN_PROGRAMS)))
endif
ifdef CLEAN_UNITS
override CLEANPPUFILES+=$(addsuffix $(PPUEXT),$(CLEAN_UNITS))
endif
ifdef CLEANPPUFILES
override CLEANPPULINKFILES:=$(subst $(PPUEXT),$(OEXT),$(CLEANPPUFILES)) $(addprefix $(STATICLIBPREFIX),$(subst $(PPUEXT),$(STATICLIBEXT),$(CLEANPPUFILES))) $(addprefix $(IMPORTLIBPREFIX),$(subst $(PPUEXT),$(STATICLIBEXT),$(CLEANPPUFILES)))
ifdef DEBUGSYMEXT
override CLEANPPULINKFILES+=$(subst $(PPUEXT),$(DEBUGSYMEXT),$(CLEANPPUFILES))
endif
override CLEANPPUFILES:=$(addprefix $(UNITTARGETDIRPREFIX),$(CLEANPPUFILES))
override CLEANPPULINKFILES:=$(wildcard $(addprefix $(UNITTARGETDIRPREFIX),$(CLEANPPULINKFILES)))
endif
fpc_clean: $(CLEANTARGET)
ifdef CLEANEXEFILES
	-$(DEL) $(CLEANEXEFILES)
endif
ifdef CLEANEXEDBGFILES
	-$(DELTREE) $(CLEANEXEDBGFILES)
endif
ifdef CLEANPPUFILES
	-$(DEL) $(CLEANPPUFILES)
endif
ifneq ($(CLEANPPULINKFILES),)
	-$(DEL) $(CLEANPPULINKFILES)
endif
ifdef CLEANRSTFILES
	-$(DEL) $(addprefix $(UNITTARGETDIRPREFIX),$(CLEANRSTFILES))
endif
ifdef CLEAN_FILES
	-$(DEL) $(CLEAN_FILES)
endif
ifdef LIB_NAME
	-$(DEL) $(LIB_NAME) $(LIB_FULLNAME)
endif
	-$(DEL) $(FPCMADE) Package.fpc $(PPAS) script.res link.res $(FPCEXTFILE) $(REDIRFILE)
	-$(DEL) *$(ASMEXT) *_ppas$(BATCHEXT)
fpc_cleanall: $(CLEANTARGET)
ifdef CLEANEXEFILES
	-$(DEL) $(CLEANEXEFILES)
endif
ifdef COMPILER_UNITTARGETDIR
ifdef CLEANPPUFILES
	-$(DEL) $(CLEANPPUFILES)
endif
ifneq ($(CLEANPPULINKFILES),)
	-$(DEL) $(CLEANPPULINKFILES)
endif
ifdef CLEANRSTFILES
	-$(DEL) $(addprefix $(UNITTARGETDIRPREFIX),$(CLEANRSTFILES))
endif
endif
ifdef CLEAN_FILES
	-$(DEL) $(CLEAN_FILES)
endif
	-$(DELTREE) units
	-$(DEL) *$(OEXT) *$(PPUEXT) *$(RSTEXT) *$(ASMEXT) *$(STATICLIBEXT) *$(SHAREDLIBEXT) *$(PPLEXT)
ifneq ($(PPUEXT),.ppu)
	-$(DEL) *.o *.ppu *.a
endif
	-$(DELTREE) *$(SMARTEXT)
	-$(DEL) fpcmade.* Package.fpc $(PPAS) script.res link.res $(FPCEXTFILE) $(REDIRFILE)
	-$(DEL) *_ppas$(BATCHEXT)
ifdef AOUTEXT
	-$(DEL) *$(AOUTEXT)
endif
ifdef DEBUGSYMEXT
	-$(DEL) *$(DEBUGSYMEXT)
endif
ifdef LOCALFPMAKEBIN
	-$(DEL) $(LOCALFPMAKEBIN)
	-$(DEL) $(FPMAKEBINOBJ)
endif
fpc_distclean: cleanall
.PHONY: fpc_baseinfo
override INFORULES+=fpc_baseinfo
fpc_baseinfo:
	@$(ECHO)
	@$(ECHO)  == Package info ==
	@$(ECHO)  Package Name..... $(PACKAGE_NAME)
	@$(ECHO)  Package Version.. $(PACKAGE_VERSION)
	@$(ECHO)
	@$(ECHO)  == Configuration info ==
	@$(ECHO)
	@$(ECHO)  FPC.......... $(FPC)
	@$(ECHO)  FPC Version.. $(FPC_VERSION)
	@$(ECHO)  Source CPU... $(CPU_SOURCE)
	@$(ECHO)  Target CPU... $(CPU_TARGET)
	@$(ECHO)  Source OS.... $(OS_SOURCE)
	@$(ECHO)  Target OS.... $(OS_TARGET)
	@$(ECHO)  Full Source.. $(FULL_SOURCE)
	@$(ECHO)  Full Target.. $(FULL_TARGET)
	@$(ECHO)  SourceSuffix. $(SOURCESUFFIX)
	@$(ECHO)  TargetSuffix. $(TARGETSUFFIX)
	@$(ECHO)  FPC fpmake... $(FPCFPMAKE)
	@$(ECHO)
	@$(ECHO)  == Directory info ==
	@$(ECHO)
	@$(ECHO)  Required pkgs... $(REQUIRE_PACKAGES)
	@$(ECHO)
	@$(ECHO)  Basedir......... $(BASEDIR)
	@$(ECHO)  FPCDir.......... $(FPCDIR)
	@$(ECHO)  CrossBinDir..... $(CROSSBINDIR)
	@$(ECHO)  UnitsDir........ $(UNITSDIR)
	@$(ECHO)  PackagesDir..... $(PACKAGESDIR)
	@$(ECHO)
	@$(ECHO)  GCC library..... $(GCCLIBDIR)
	@$(ECHO)  Other library... $(OTHERLIBDIR)
	@$(ECHO)
	@$(ECHO)  == Tools info ==
	@$(ECHO)
	@$(ECHO)  As........ $(AS)
	@$(ECHO)  Ld........ $(LD)
	@$(ECHO)  Ar........ $(AR)
	@$(ECHO)  Rc........ $(RC)
	@$(ECHO)
	@$(ECHO)  Mv........ $(MVPROG)
	@$(ECHO)  Cp........ $(CPPROG)
	@$(ECHO)  Rm........ $(RMPROG)
	@$(ECHO)  GInstall.. $(GINSTALL)
	@$(ECHO)  Echo...... $(ECHO)
	@$(ECHO)  Shell..... $(SHELL)
	@$(ECHO)  Date...... $(DATE)
	@$(ECHO)  FPCMake... $(FPCMAKE)
	@$(ECHO)  PPUMove... $(PPUMOVE)
	@$(ECHO)  Zip....... $(ZIPPROG)
	@$(ECHO)
	@$(ECHO)  == Object info ==
	@$(ECHO)
	@$(ECHO)  Target Loaders........ $(TARGET_LOADERS)
	@$(ECHO)  Target Units.......... $(TARGET_UNITS)
	@$(ECHO)  Target Implicit Units. $(TARGET_IMPLICITUNITS)
	@$(ECHO)  Target Programs....... $(TARGET_PROGRAMS)
	@$(ECHO)  Target Dirs........... $(TARGET_DIRS)
	@$(ECHO)  Target Examples....... $(TARGET_EXAMPLES)
	@$(ECHO)  Target ExampleDirs.... $(TARGET_EXAMPLEDIRS)
	@$(ECHO)
	@$(ECHO)  Clean Units......... $(CLEAN_UNITS)
	@$(ECHO)  Clean Files......... $(CLEAN_FILES)
	@$(ECHO)
	@$(ECHO)  Install Units....... $(INSTALL_UNITS)
	@$(ECHO)  Install Files....... $(INSTALL_FILES)
	@$(ECHO)
	@$(ECHO)  == Install info ==
	@$(ECHO)
	@$(ECHO)  DateStr.............. $(DATESTR)
	@$(ECHO)  ZipName.............. $(ZIPNAME)
	@$(ECHO)  ZipPrefix............ $(ZIPPREFIX)
	@$(ECHO)  ZipCrossPrefix....... $(ZIPCROSSPREFIX)
	@$(ECHO)  ZipSuffix............ $(ZIPSUFFIX)
	@$(ECHO)  FullZipName.......... $(FULLZIPNAME)
	@$(ECHO)  Install FPC Package.. $(INSTALL_FPCPACKAGE)
	@$(ECHO)
	@$(ECHO)  Install base dir..... $(INSTALL_BASEDIR)
	@$(ECHO)  Install binary dir... $(INSTALL_BINDIR)
	@$(ECHO)  Install library dir.. $(INSTALL_LIBDIR)
	@$(ECHO)  Install units dir.... $(INSTALL_UNITDIR)
	@$(ECHO)  Install source dir... $(INSTALL_SOURCEDIR)
	@$(ECHO)  Install doc dir...... $(INSTALL_DOCDIR)
	@$(ECHO)  Install example dir.. $(INSTALL_EXAMPLEDIR)
	@$(ECHO)  Install data dir..... $(INSTALL_DATADIR)
	@$(ECHO)
	@$(ECHO)  Dist destination dir. $(DIST_DESTDIR)
	@$(ECHO)  Dist zip name........ $(DIST_ZIPNAME)
	@$(ECHO)
.PHONY: fpc_info
fpc_info: $(INFORULES)
.PHONY: fpc_makefile fpc_makefiles fpc_makefile_sub1 fpc_makefile_sub2 \
	fpc_makefile_dirs
fpc_makefile:
	$(FPCMAKE) -w -T$(OS_TARGET) Makefile.fpc
fpc_makefile_sub1:
ifdef TARGET_DIRS
	$(FPCMAKE) -w -T$(OS_TARGET) $(addsuffix /Makefile.fpc,$(TARGET_DIRS))
endif
ifdef TARGET_EXAMPLEDIRS
	$(FPCMAKE) -w -T$(OS_TARGET) $(addsuffix /Makefile.fpc,$(TARGET_EXAMPLEDIRS))
endif
fpc_makefile_sub2: $(addsuffix _makefile_dirs,$(TARGET_DIRS) $(TARGET_EXAMPLEDIRS))
fpc_makefile_dirs: fpc_makefile_sub1 fpc_makefile_sub2
fpc_makefiles: fpc_makefile fpc_makefile_dirs
debug: fpc_debug
smart: fpc_smart
release: fpc_release
units: fpc_units
shared: fpc_shared
sourceinstall: fpc_sourceinstall
exampleinstall: fpc_exampleinstall
distinstall: fpc_distinstall
zipinstall: fpc_zipinstall
zipsourceinstall: fpc_zipsourceinstall
zipexampleinstall: fpc_zipexampleinstall
zipdistinstall: fpc_zipdistinstall
cleanall: fpc_cleanall
info: fpc_info
makefiles: fpc_makefiles
.PHONY: debug smart release units shared sourceinstall exampleinstall distinstall zipinstall zipsourceinstall zipexampleinstall zipdistinstall cleanall info makefiles
ifneq ($(wildcard fpcmake.loc),)
include fpcmake.loc
endif
ifndef DOCS
DOCS = user rtl ref prog fpdoc chart fcl fclres
endif
ifndef RTFS
RTFS = fcl rtl fcl-res
endif
PREAMBLETYPE = report
ifndef CROSSCOMPILE
ifndef FPDOC
ifneq ($(wildcard $(FPCSRCDIR)/utils/fpdoc/bin/$(SOURCESUFFIX)/fpdoc),)
FPDOC=$(FPCSRCDIR)/utils/fpdoc/bin/$(SOURCESUFFIX)/fpdoc
else
FPDOC=fpdoc
endif
endif
endif
ifndef CROSSCOMPILE
ifndef MAKESKEL
ifneq ($(wildcard $(FPCSRCDIR)/utils/fpdoc/makeskel),)
MAKESKEL=$(FPCSRCDIR)/utils/fpdoc/makeskel
else
MAKESKEL=makeskel
endif
endif
endif
ifndef FPCSRCDIR
FPCSRCDIR=..
endif
ifndef ASCIIMODE
ASCIIMODE=NO
endif
ifndef HTMLFMT
  HTMLFMT=html
endif
ifndef RTLLINKPREFIX
  ifeq (chm, $(HTMLFMT))
    RTLLINKPREFIX:=ms-its:rtl.chm::/    
  else
    RTLLINKPREFIX:=../rtl/    
  endif
endif
ifndef HIDEPROTECTED
HIDEPROTECTED=YES
endif
ifdef FPDOCOPTS
FPDOCOPTS+= --macro=FPCDIR=$(FPCSRCDIR)
else
FPDOCOPTS=--macro=FPCDIR=$(FPCSRCDIR)
endif
FCLOPTS= --package=fcl --warn-no-node --descr=fcl.xml --content=fcl.xct --import=rtl.xct,$(RTLLINKPREFIX) $(FCLUNITOPTS)
ifeq ($(HIDEPROTECTED),YES)
FCLOPTS+= --hide-protected
endif
FCLRESOPTS= --package=fcl-res --warn-no-node --content=fclres.xct --import=fcl.xct --import=rtl.xct,$(RTLLINKPREFIX) $(FCLRESUNITOPTS)
ifeq ($(HIDEPROTECTED),YES)
FCLOPTS+= --hide-protected
endif
FPDOCHTMLOPTS=--footer-date="mmm dd yyyy"
ifeq (chm,$(HTMLFMT))
  HTMLSUFFIX:=.chm
  FPDOCHTMLOPTS+=--auto-toc --auto-index --make-searchable
  RTLCHMOPTS="--chm-title=(RTL) Runtime Library"
  FCLCHMOPTS="--chm-title=(FCL) Free Component Library"
  FCLRESCHMOPTS="--chm-title=(FCL) Free Pascal Resources support"
endif
ifeq (ipf,$(HTMLFMT))
  HTMLSUFFIX:=.ipf
  FPDOCHTMLOPTS=
  CSSFILE=
endif
ifdef CSSFILE
ifndef (ipf,$(HTMLFMT)
 FPDOCHTMLOPTS+=--css-file=$(CSSFILE)
endif
endif
export inUnix
ifndef LATEX
LATEX = latex
endif
ifndef DVIPS
DVIPS=dvips
endif
ifndef DVITXT
DVITXT=dvi2tty -w132
endif
ifndef PDFLATEX
PDFLATEX=pdflatex
endif
ifndef MAKEINDEX
MAKEINDEX=makeindex
endif
save_size=10000
export save_size
ifdef USEL2H
ifndef LATEX2HTML
LATEX2HTML = /usr/bin/latex2html
endif
ifndef LATEX2HTMLOPTS
LATEX2HTMLOPTS = -no_reuse -up_url "$(FPCSRCDIR)/fpctoc.html"\
		 -up_title "Free Pascal manuals"\
		 -html_version 4.0 -split 3
endif
ifeq ($(ASCIIMODE),YES)
LATEX2HTMLOPTS+=-ascii_mode
endif
endif # USEL2H
ifdef USEHEVEA
ifndef HEVEA
HEVEA = /usr/bin/hevea
endif
ifeq ($(ASCIIMODE),YES)
HEVEAOPTS+=-text
endif
endif # USEHEVEA
ifdef USEPLASTEX
ifndef PLASTEX
PLASTEX = /usr/bin/plastex
endif
endif # USEPLASTEX
export TMP=/tmp
PS = $(addsuffix .ps, $(DOCS))
DVI = $(addsuffix .dvi, $(DOCS))
TXT = $(addsuffix .txt, $(DOCS))
PDF = $(addsuffix .pdf, $(DOCS))
TOC = $(addsuffix .toc, $(DOCS))
AUX = $(addsuffix .aux, $(DOCS))
LOG = $(addsuffix .log, $(DOCS))
LOT = $(addsuffix .lot, $(DOCS))
OUT = $(addsuffix .out, $(DOCS))
HTML = $(DOCS)
CHM = $(addsuffix .chm, $(DOCS))
CHK = $(addsuffix .chk, $(DOCS))
IPF = $(addsuffix .ipf, $(DOCS))
.PHONY: clean dvi help html ps psdist htmldist htmdist htdist pdfdist \
	txtdist htm txt pdf refex alldist messages onechap gtk \
	user ref prog rtl updatexml updatefclxml updatertlxml updatefclresxml
.SUFFIXES: .dvi .tex .ps .txt .pdf
.dvi.ps:
	$(DVIPS) $<
.tex.dvi:
	-rm -f $*.aux $*.idx  $*.ilg  $*.ind  $*.log  $*.out  $*.toc $*.tmp $*.xref $*.4ht
	cp -f preamble.$(PREAMBLETYPE) preamble.inc
	$(LATEX) $*
	-$(MAKEINDEX) $*.idx
	$(LATEX) $*
	-$(MAKEINDEX) $*.idx
	$(LATEX) $*
ifndef USEELINKS
.dvi.txt:
	$(DVITXT) -o $*.txt  $*.dvi
else
include Makefile.txt
endif
.tex.pdf:
	-rm -f $*.aux $*.idx  $*.ilg  $*.ind  $*.log  $*.out  $*.toc $*.tmp $*.xref $*.4ht
	cp -f preamble.$(PREAMBLETYPE) preamble.inc
	$(PDFLATEX) $*
	-$(MAKEINDEX) $*.idx
	$(PDFLATEX) $*
	-$(MAKEINDEX) $*.idx
	$(PDFLATEX) $*
ifndef USEELINKS
$(TXT) : %.txt: %.dvi
else
$(TXT) : %.txt: %.tex
endif
$(DVI) : %.dvi: %.tex
$(PDF) : %.pdf: %.tex
help:
	@echo 'Possible targets :'
	@echo ' dvi           : Make documentation using latex.'
	@echo ' ps            : Make documentation using latex and dvips.'
	@echo ' html          : Make HTML documentation using default converter.'
	@echo ' chm           : Make Compressed HTML documentation. (only the FCL, FCL-res and RTL)'
	@echo ' ipf           : Make fpGUI or OS/2 IPF documentation. (only the FCL, FCL-res and RTL)'
	@echo ' hevea         : Make HTML documentation using hevea'
	@echo ' l2h           : Make HTML documentation using latex2html'
	@echo ' 4ht           : Make HTML documentation using tex4ht'
	@echo ' plastex       : Make HTML documentation using plastex'
	@echo ' pdf           : Make documentation using pdflatex'
	@echo ' txt           : dvi, convert to text using dvi2tty'
	@echo ' htm           : Convert .html to .htm files, zip result'
	@echo ' clean         : Clean up the mess.'
	@echo ' examples      : Compile all generic examples'
	@echo ' linuxexamples : Compile all examples for linux'
	@echo ' dosexamples   : Compile all examples for dos'
	@echo ' execute       : Execute examples (DOS/Windows/OS/2 only)'
	@echo ' htmldist      : html, and rchive result.'
	@echo ' psdist        : ps, and archive result.'
	@echo ' pdfdist       : pdf, and archive result.'
clean: fpc_clean
	-rm -f preamble.inc date.inc messages.inc rtl.inc
	-rm -f *.4tc *.4ct *.css *.lg *.tmp *.xref *.kwd *.xct *.chm *.ipf
	-rm -rf $(DOCS)
	-rm -f $(CHK) $(TOC) $(LOG) $(DVI) $(PDF) $(AUX) $(OUT) $(PS) $(HTML) *.i* $(LOT) $(TXT)
	-rm -f $(notdir $(wildcard styles/*.sty))
distclean: fpc_distclean clean cleanexamples
	-rm -f *.tar.gz *.zip
date.inc:
	@$(ECHO) \\date\{`date +'%B %Y'`\} > date.inc
$(FPCSRCDIR)/compiler/utils/msg2inc$(EXEEXT):
	$(MAKE) -C $(FPCSRCDIR)/compiler/utils msg2inc$(EXEEXT)
messages.inc: $(FPCSRCDIR)/compiler/utils/msg2inc$(EXEEXT) $(FPCSRCDIR)/compiler/msg/errore.msg
	$(FPCSRCDIR)/compiler/utils/msg2inc -TE $(FPCSRCDIR)/compiler/msg/errore.msg messages.inc
ifdef inUnix
USE_UNIX_ECHO=1
else
ifdef inCygWin
USE_UNIX_ECHO=1
else
USE_UNIX_ECHO=
endif
endif
comphelp.inc:
ifdef USE_UNIX_ECHO
	$(ECHO) % Automatically generated Unix version. Do not edit > comphelp.inc
	$(ECHO) -n "\\begin{verbatim}" >> comphelp.inc
	$(FPC) -h | sed 's;\\;\\\\;g' >> comphelp.inc
	$(ECHO) "\\end{verbatim}" >> comphelp.inc
else
	$(ECHO) "% Automatically generated Win version. Do not edit" > comphelp.inc
	$(ECHO) -n '\' >> comphelp.inc
	$(ECHO) 'begin{verbatim}' >> comphelp.inc
	$(FPC) -h >>comphelp.inc
	$(ECHO) '\end{verbatim}' >> comphelp.inc
endif
INCLUDES=date.inc
SYSTEMUNITDIR=$(OS_SOURCE)
ifneq ($(findstring bsd,$(OS_SOURCE)),)
override SYSTEMUNITDIR=bsd
endif
ifneq ($(findstring darwin,$(OS_SOURCE)),)
override SYSTEMUNITDIR=bsd
endif
HOSTOS=$(OS_SOURCE)
ifneq ($(findstring $(OS_SOURCE),linux freebsd darwin netbsd openbsd),)
CLASSESUNITDIR=unix
else
CLASSESUNITDIR=$(OS_SOURCE)
endif
ifneq ($(findstring $(OS_SOURCE),freebsd),)
OSDIRINCLUDES+=-Fi${FPCSRCDIR}/rtl/bsd
endif
ifneq ($(findstring $(OS_SOURCE),win32),)
OSDIRINCLUDES+=-Fi${FPCSRCDIR}/rtl/win -Fi${FPCSRCDIR}/rtl/$(OS_SOURCE) -Fi${FPCSRCDIR}/rtl/unix -Fi${FPCSRCDIR}/rtl/linux
endif 
ifneq ($(findstring $(OS_SOURCE),win64),)
OSDIRINCLUDES+=-Fi${FPCSRCDIR}/rtl/win -Fi${FPCSRCDIR}/rtl/$(OS_SOURCE) -Fi${FPCSRCDIR}/rtl/unix -Fi${FPCSRCDIR}/rtl/linux
endif 
FCLBASEDIR=$(FPCSRCDIR)/packages/fcl-base/src
FCLPROCESSDIR=$(FPCSRCDIR)/packages/fcl-process/src
FCLWEBDIR=$(FPCSRCDIR)/packages/fcl-web/src
FCLDBDIR=$(FPCSRCDIR)/packages/fcl-db/src
FCLZLIBDIR=$(FPCSRCDIR)/packages/paszlib/src
FCLJSONDIR=$(FPCSRCDIR)/packages/fcl-json/src
FCLRESDIR=$(FPCSRCDIR)/packages/fcl-res
ifndef OLDGRAPH
GRAPHDIR=$(FPCSRCDIR)/packages/graph/src
else
GRAPHDIR=$(FPCSRCDIR)/packages/extra/graph
endif
ifdef OLDDAEMON
DAEMONDIR=$(FPCSRCDIR)/packages/fcl-base/src
else
DAEMONDIR=$(FPCSRCDIR)/packages/fcl-extra/src
endif
MAKESKELOPTS=--update --disable-protected --disable-private --emit-class-separator
MAKESKEL+= $(MAKESKELOPTS)
FCLMAKESKEL=$(MAKESKEL) --package=fcl
FCLRESMAKESKEL=$(MAKESKEL) --package=fcl-res
RTLMAKESKEL=$(MAKESKEL) --package=rtl --disable-arguments --disable-function-results
FCLUNITS=iostream pipes streamio process dbugintf contnrs zstream idea bufstream \
	 base64 gettext pooledmm dbugmsg streamex inicol streamcoll cachecls \
	 eventlog syncobjs custapp blowfish simpleipc inifiles rttiutils uriparser \
	 daemonapp libtar ascii85 fptimer db avl_tree ibconnection mssqlconn zipper sqldb \
	 fpjson sqltypes
FCLUNITS+= ezcgi
FCLXML=$(addsuffix .xml,$(FCLUNITS))
FCLNEWXML=$(addsuffix .new.xml,$(FCLUNITS))
FCLIOSTREAM= --descr=iostream.xml --input="-S2 $(FCLBASEDIR)/iostream.pp"
FCLSTREAMIO= --descr=streamio.xml --input="$(FCLBASEDIR)/streamio.pp"
FCLCONTNRS= --descr=contnrs.xml --input="$(FCLBASEDIR)/contnrs.pp"
FCLIDEA= --descr=idea.xml --input="$(FCLBASEDIR)/idea.pp"
FCLBUFSTREAM= --descr=bufstream.xml --input="$(FCLBASEDIR)/bufstream.pp"
FCLBASE64= --descr=base64.xml --input="$(FCLBASEDIR)/base64.pp"
FCLGETTEXT= --descr=gettext.xml --input="$(FCLBASEDIR)/gettext.pp"
FCLPOOLEDMM= --descr=pooledmm.xml --input="$(FCLBASEDIR)/pooledmm.pp"
FCLSTREAMEX= --descr=streamex.xml --input="$(FCLBASEDIR)/streamex.pp"
FCLINICOL= --descr=inicol.xml --input="$(FCLBASEDIR)/inicol.pp"
FCLSTREAMCOL= --descr=streamcoll.xml --input="$(FCLBASEDIR)/streamcoll.pp"
FCLCACHECLS= --descr=cachecls.xml --input="$(FCLBASEDIR)/cachecls.pp"
FCLEVENTLOG= --descr=eventlog.xml --input="$(FCLBASEDIR)/eventlog.pp"
FCLSYNCOBJS= --descr=syncobjs.xml --input="$(FCLBASEDIR)/syncobjs.pp"
FCLCUSTAPP= --descr=custapp.xml --input="$(FCLBASEDIR)/custapp.pp"
FCLBLOWFISH= --descr=blowfish.xml --input="$(FCLBASEDIR)/blowfish.pp"
FCLINIFILES= --descr=inifiles.xml --input="$(FCLBASEDIR)/inifiles.pp"
FCLRTTIUTILS= --descr=rttiutils.xml --input="$(FCLBASEDIR)/rttiutils.pp"
FCLAVLTREE= --descr=avl_tree.xml --input="$(FCLBASEDIR)/avl_tree.pp"
FCLPROCESS= --descr=process.xml --input="$(FCLPROCESSDIR)/process.pp"
FCLPIPES= --descr=pipes.xml --input="$(FCLPROCESSDIR)/pipes.pp"
FCLDBUGINTF= --descr=dbugintf.xml --input="$(FCLPROCESSDIR)/dbugintf.pp" 
FCLDBUGMSG= --descr=dbugmsg.xml --input="$(FCLPROCESSDIR)/dbugmsg.pp"
FCLSIMPLEIPC= --descr=simpleipc.xml --input="$(FCLPROCESSDIR)/simpleipc.pp"
FCLEZCGI= --descr=ezcgi.xml --input="$(FCLWEBDIR)/base/ezcgi.pp"
FCLURIPARSER= --descr=uriparser.xml --input="$(FCLBASEDIR)/uriparser.pp"
FCLZSTREAM= --descr=zstream.xml --input="$(FCLZLIBDIR)/zstream.pp"
FCLDAEMONAPP= --descr=daemonapp.xml --input="$(DAEMONDIR)/daemonapp.pp"
FCLLIBTAR= --descr=libtar.xml --input="$(FPCSRCDIR)/packages/libtar/src/libtar.pp"
FCLASCII85= --descr=ascii85.xml --input="$(FCLBASEDIR)/ascii85.pp"
FCLFPTIMER= --descr=fptimer.xml --input="$(FCLBASEDIR)/fptimer.pp"
FCLDB= --descr=db.xml --input="$(FCLDBDIR)/base/db.pas"
FCLSQLTYPES= --descr=db.xml --input="$(FCLDBDIR)/base/sqltypes.pp"
FCLSQLDB= --descr=sqldb.xml --input="$(FCLDBDIR)/sqldb/sqldb.pp"
FCLIBCONNECTION=  --descr=ibconnection.xml --input="$(FCLDBDIR)/sqldb/interbase/ibconnection.pp"
FCLMSSQLCONN=  --descr=mssqlconn.xml --input="$(FCLDBDIR)/sqldb/mssql/mssqlconn.pp"
FCLZIPPER=  --descr=zipper.xml --input="$(FCLZLIBDIR)/zipper.pp"
FCLJSON= --descr=fpjson.xml --input="$(FCLJSONDIR)/fpjson.pp"
FCLUNITOPTS+= $(FCLIOSTREAM) $(FCLPIPES) $(FCLSTREAMIO) $(FCLPROCESS) $(FCLDBUGINTF)
FCLUNITOPTS+= $(FCLCONTNRS) $(FCLZSTREAM) $(FCLIDEA) $(FCLBUFSTREAM) $(FCLBASE64) 
FCLUNITOPTS+= $(FCLGETTEXT) 
FCLUNITOPTS+= $(FCLEZCGI) 
FCLUNITOPTS+= $(FCLPOOLEDMM) $(FCLDBUGMSG) $(FCLSTREAMEX)
FCLUNITOPTS+= $(FCLINICOL) $(FCLSTREAMCOL) $(FCLCACHECLS) $(FCLEVENTLOG) $(FCLSYNCOBJS)
FCLUNITOPTS+= $(FCLCUSTAPP) $(FCLBLOWFISH) $(FCLSIMPLEIPC) $(FCLINIFILES) $(FCLRTTIUTILS)
FCLUNITOPTS+= $(FCLAVLTREE) $(FCLURIPARSER) $(FCLDAEMONAPP) $(FCLLIBTAR) $(FCLASCII85)
FCLUNITOPTS+= $(FCLFPTIMER) $(FCLDB) $(FCLZIPPER) $(FCLSQLTYPES)
FCLUNITOPTS+= $(FCLSQLDB) $(FCLIBCONNECTION) $(FCLMSSQLCONN) $(FCLJSON)
updatefclxml: fpc_all
	$(FCLMAKESKEL) $(FCLIOSTREAM) --output=iostream.new.xml
	$(FCLMAKESKEL) $(FCLPIPES) --output=pipes.new.xml
	$(FCLMAKESKEL) $(FCLSTREAMIO) --output=streamio.new.xml
	$(FCLMAKESKEL) $(FCLPROCESS) --output=process.new.xml
	$(FCLMAKESKEL) $(FCLDBUGINTF) --output=dbugintf.new.xml
	$(FCLMAKESKEL) $(FCLCONTNRS) --output=contnrs.new.xml
	$(FCLMAKESKEL) $(FCLZSTREAM) --output=zstream.new.xml
	$(FCLMAKESKEL) $(FCLIDEA) --output=idea.new.xml
	$(FCLMAKESKEL) $(FCLBUFSTREAM) --output=bufstream.new.xml
	$(FCLMAKESKEL) $(FCLBASE64) --output=base64.new.xml
	$(FCLMAKESKEL) $(FCLGETTEXT) --output=gettext.new.xml
	$(FCLMAKESKEL) $(FCLEZCGI) --output=ezcgi.new.xml
	$(FCLMAKESKEL) $(FCLPOOLEDMM) --output=pooledmm.new.xml
	$(FCLMAKESKEL) $(FCLDBUGMSG) --output=dbugmsg.new.xml
	$(FCLMAKESKEL) $(FCLSTREAMEX) --output=streamex.new.xml
	$(FCLMAKESKEL) $(FCLINICOL) --output=inicol.new.xml
	$(FCLMAKESKEL) $(FCLSTREAMCOL) --output=streamcoll.new.xml
	$(FCLMAKESKEL) $(FCLCACHECLS) --output=cachecls.new.xml
	$(FCLMAKESKEL) $(FCLEVENTLOG) --output=eventlog.new.xml
	$(FCLMAKESKEL) $(FCLSYNCOBJS) --output=syncobjs.new.xml
	$(FCLMAKESKEL) $(FCLCUSTAPP) --output=custapp.new.xml
	$(FCLMAKESKEL) $(FCLBLOWFISH) --output=blowfish.new.xml
	$(FCLMAKESKEL) $(FCLSIMPLEIPC) --output=simpleipc.new.xml
	$(FCLMAKESKEL) $(FCLINIFILES) --output=inifiles.new.xml
	$(FCLMAKESKEL) $(FCLRTTIUTILS) --output=rttiutils.new.xml
	$(FCLMAKESKEL) $(FCLAVLTREE) --output=avl_tree.new.xml
	$(FCLMAKESKEL) $(FCLDB) --output=db.new.xml
	$(FCLMAKESKEL) $(FCLSQLTYPES) --output=sqltypes.new.xml
	$(FCLMAKESKEL) $(FCLSQLDB) --output=sqldb.new.xml
	$(FCLMAKESKEL) $(FCLZIPPER) --output=zipper.new.xml
	$(FCLMAKESKEL) $(FCLJSON) --output=fpjson.new.xml
	./cleanxml $(FCLNEWXML)
FCLRESUNITS=resource resourcetree resdatastream resfactory resreader reswriter \
	    bitmapresource acceleratorsresource groupresource groupiconresource \
	    groupcursorresource stringtableresource versionconsts versiontypes \
	    versionresource cofftypes coffreader coffwriter winpeimagereader \
	    elfconsts elfreader elfwriter machotypes machoreader machowriter \
	    externaltypes externalreader externalwriter dfmreader
FCLRESXML=$(addprefix $(FCLRESDIR)/xml/,$(addsuffix .xml,$(FCLRESUNITS)))
FCLRESNEWXML=$(addsuffix .new.xml,$(FCLRESUNITS))
FCLRESRESOURCE= --input=$(FCLRESDIR)/src/resource.pp --descr=$(FCLRESDIR)/xml/resource.xml 
FCLRESRESOURCETREE=  --input=$(FCLRESDIR)/src/resourcetree.pp --descr=$(FCLRESDIR)/xml/resourcetree.xml 
FCLRESDATASTREAM=--input=$(FCLRESDIR)/src/resdatastream.pp --descr=$(FCLRESDIR)/xml/resdatastream.xml 
FCLRESRESFACTORY=--input=$(FCLRESDIR)/src/resfactory.pp --descr=$(FCLRESDIR)/xml/resfactory.xml 
FCLRESRESREADER=--input=$(FCLRESDIR)/src/resreader.pp --descr=$(FCLRESDIR)/xml/resreader.xml 
FCLRESRESWRITER=--input=$(FCLRESDIR)/src/reswriter.pp --descr=$(FCLRESDIR)/xml/reswriter.xml 
FCLRESBITMAPRESOURCE=--input=$(FCLRESDIR)/src/bitmapresource.pp --descr=$(FCLRESDIR)/xml/bitmapresource.xml 
FCLRESACCELLERATORRESOURCE=--input=$(FCLRESDIR)/src/acceleratorsresource.pp --descr=$(FCLRESDIR)/xml/acceleratorsresource.xml 
FCLRESGROUPRESOURCE=--input=$(FCLRESDIR)/src/groupresource.pp --descr=$(FCLRESDIR)/xml/groupresource.xml 
FCLRESICONRESOURCE=--input=$(FCLRESDIR)/src/groupiconresource.pp --descr=$(FCLRESDIR)/xml/groupiconresource.xml 
FCLRESGROUPCURSORRESOURCE=--input=$(FCLRESDIR)/src/groupcursorresource.pp --descr=$(FCLRESDIR)/xml/groupcursorresource.xml 
FCLRESSTRINGTABLERESOURCE=--input=$(FCLRESDIR)/src/stringtableresource.pp --descr=$(FCLRESDIR)/xml/stringtableresource.xml 
FCLRESVERSIONCONSTS=--input=$(FCLRESDIR)/src/versionconsts.pp --descr=$(FCLRESDIR)/xml/versionconsts.xml 
FCLRESVERSIONTYPES=--input=$(FCLRESDIR)/src/versiontypes.pp --descr=$(FCLRESDIR)/xml/versiontypes.xml 
FCLRESVERSIONRESOURCE=--input=$(FCLRESDIR)/src/versionresource.pp --descr=$(FCLRESDIR)/xml/versionresource.xml 
FCLRESCOFFTYPES=--input=$(FCLRESDIR)/src/cofftypes.pp --descr=$(FCLRESDIR)/xml/cofftypes.xml 
FCLRESCOFFREADER=--input=$(FCLRESDIR)/src/coffreader.pp --descr=$(FCLRESDIR)/xml/coffreader.xml 
FCLRESCOFFWRITER=--input=$(FCLRESDIR)/src/coffwriter.pp --descr=$(FCLRESDIR)/xml/coffwriter.xml 
FCLRESWINPEIMAGEREADER=--input=$(FCLRESDIR)/src/winpeimagereader.pp --descr=$(FCLRESDIR)/xml/winpeimagereader.xml 
FCLRESELFCONST=--input=$(FCLRESDIR)/src/elfconsts.pp --descr=$(FCLRESDIR)/xml/elfconsts.xml 
FCLRESELFREADER=--input=$(FCLRESDIR)/src/elfreader.pp --descr=$(FCLRESDIR)/xml/elfreader.xml 
FCLRESELFWRITER=--input=$(FCLRESDIR)/src/elfwriter.pp --descr=$(FCLRESDIR)/xml/elfwriter.xml 
FCLRESMACHOTYPES=--input=$(FCLRESDIR)/src/machotypes.pp --descr=$(FCLRESDIR)/xml/machotypes.xml 
FCLRESMACHOREADER=--input=$(FCLRESDIR)/src/machoreader.pp --descr=$(FCLRESDIR)/xml/machoreader.xml 
FCLRESMACHOWRITER=--input=$(FCLRESDIR)/src/machowriter.pp --descr=$(FCLRESDIR)/xml/machowriter.xml 
FCLRESEXTERNALTYPES=--input=$(FCLRESDIR)/src/externaltypes.pp --descr=$(FCLRESDIR)/xml/externaltypes.xml 
FCLRESEXTERNALREADER=--input=$(FCLRESDIR)/src/externalreader.pp --descr=$(FCLRESDIR)/xml/externalreader.xml 
FCLRESEXTERNALWRITER=--input=$(FCLRESDIR)/src/externalwriter.pp --descr=$(FCLRESDIR)/xml/externalwriter.xml 
FCLRESDFMREADER=--input=$(FCLRESDIR)/src/dfmreader.pp --descr=$(FCLRESDIR)/xml/dfmreader.xml
FCLRESUNITOPTS=$(FCLRESRESOURCE) $(FCLRESRESOURCETREE) $(FCLRESDATASTREAM) $(FCLRESRESFACTORY) 
FCLRESUNITOPTS+= $(FCLRESRESREADER) $(FCLRESRESWRITER) $(FCLRESBITMAPRESOURCE) $(FCLRESACCELLERATORRESOURCE)
FCLRESUNITOPTS+= $(FCLRESGROUPRESOURCE) $(FCLRESICONRESOURCE) $(FCLRESGROUPCURSORRESOURCE) $(FCLRESSTRINGTABLERESOURCE) 
FCLRESUNITOPTS+= $(FCLRESVERSIONCONSTS) $(FCLRESVERSIONTYPES) $(FCLRESVERSIONRESOURCE) $(FCLRESCOFFTYPES) 
FCLRESUNITOPTS+= $(FCLRESCOFFREADER) $(FCLRESCOFFWRITER) $(FCLRESWINPEIMAGEREADER) $(FCLRESELFCONST) 
FCLRESUNITOPTS+= $(FCLRESELFREADER) $(FCLRESELFWRITER) $(FCLRESMACHOTYPES) $(FCLRESMACHOREADER) 
FCLRESUNITOPTS+= $(FCLRESMACHOWRITER) $(FCLRESEXTERNALTYPES) $(FCLRESEXTERNALREADER) $(FCLRESEXTERNALWRITER) 
FCLRESUNITOPTS+= $(FCLRESDFMREADER)
FCLRESOPTS=$(FPDOCOPTS) --package=fcl-res --warn-no-node --content=fclres.xct --import=fcl.xct --import=rtl.xct,$(RTLLINKPREFIX) $(FCLRESUNITOPTS)
ifeq ($(HIDEPROTECTED),YES)
FCLOPTS+= --hide-protected
endif
updatefclresxml: fpc_all
	$(RTLMAKESKEL) $(FCLRESRESOURCE) --output=resource.new.xml
	$(RTLMAKESKEL) $(FCLRESRESOURCETREE) --output=resourcetree.new.xml
	$(RTLMAKESKEL) $(FCLRESDATASTREAM) --output=datastream.new.xml
	$(RTLMAKESKEL) $(FCLRESRESFACTORY) --output=resfactory.new.xml
	$(RTLMAKESKEL) $(FCLRESRESREADER) --output=resreader.new.xml
	$(RTLMAKESKEL) $(FCLRESRESWRITER) --output=reswriter.new.xml
	$(RTLMAKESKEL) $(FCLRESBITMAPRESOURCE) --output=resbitmapresource.new.xml
	$(RTLMAKESKEL) $(FCLRESACCELLERATORRESOURCE) --output=resaccelleratorresource.new.xml
	$(RTLMAKESKEL) $(FCLRESGROUPRESOURCE) --output=groupresource.new.xml
	$(RTLMAKESKEL) $(FCLRESICONRESOURCE) --output=iconresource.new.xml
	$(RTLMAKESKEL) $(FCLRESGROUPCURSORRESOURCE) --output=groupcursorresource.new.xml
	$(RTLMAKESKEL) $(FCLRESSTRINGTABLERESOURCE) --output=stringtableresource.new.xml
	$(RTLMAKESKEL) $(FCLRESVERSIONCONSTS) --output=versionconsts.new.xml
	$(RTLMAKESKEL) $(FCLRESVERSIONTYPES) --output=versiontypes.new.xml
	$(RTLMAKESKEL) $(FCLRESVERSIONRESOURCE) --output=versionresource.new.xml
	$(RTLMAKESKEL) $(FCLRESCOFFTYPES) --output=cofftypes.new.xml
	$(RTLMAKESKEL) $(FCLRESCOFFREADER) --output=coffreader.new.xml
	$(RTLMAKESKEL) $(FCLRESCOFFWRITER) --output=coffwriter.new.xml
	$(RTLMAKESKEL) $(FCLRESWINPEIMAGEREADER) --output=winpeimagereader.new.xml
	$(RTLMAKESKEL) $(FCLRESELFCONST) --output=elfconst.new.xml
	$(RTLMAKESKEL) $(FCLRESELFREADER) --output=elfreader.new.xml
	$(RTLMAKESKEL) $(FCLRESELFWRITER) --output=elfwriter.new.xml
	$(RTLMAKESKEL) $(FCLRESMACHOTYPES) --output=machotypes.new.xml
	$(RTLMAKESKEL) $(FCLRESMACHOREADER) --output=machoreader.new.xml
	$(RTLMAKESKEL) $(FCLRESMACHOWRITER) --output=machowriter.new.xml
	$(RTLMAKESKEL) $(FCLRESEXTERNALTYPES) --output=externaltypes.new.xml
	$(RTLMAKESKEL) $(FCLRESEXTERNALREADER) --output=externalreader.new.xml
	$(RTLMAKESKEL) $(FCLRESEXTERNALWRITER) --output=externalwriter.new.xml
	$(RTLMAKESKEL) $(FCLRESDFMREADER) --output=dfmreader.new.xml
	./cleanxml $(FCLRESNEWXML)
RTLOPTS= --warn-no-node --package=rtl --descr=rtl.xml --content=rtl.xct
ifeq ($(HIDEPROTECTED),YES)
RTLOPTS+= --hide-protected
endif
ifdef CURRENTXMLONLY
RTLXML=crt.xml
RTLOPTS+=--descr=dateutils.xml --input="$(FPCSRCDIR)/rtl/unix/crt.pp -Fi$(FPCSRCDIR)/rtl/inc $(OSDIRINCLUDES)"
else
RTLUNITS=system objpas types sysutils strutils dateutils strings mouse keyboard \
	 crt video dos sockets objects heaptrc mmx ipc printer typinfo \
	 ports getopts emu387 dxeload go32 gpm  baseunix \
	 unixtype unix classes unixutil x86 dynlibs linux math matrix \
	 dateutils rtl wincrt clocale cthreads cmem cwstring \
	 exeinfo lineinfo lnfodwrf ctypes errors fpwidestring fgl character unicodedata \
	 unicodeducet cp895 cp932 cp936 cp949 cp950 collation_de collation_es collation_fr_ca \
	 collation_ja collation_ko collation_ru collation_sv collation_zh charset windirs \
	 cp1250 cp1251 cp1252 cp1253 cp1254 cp1255 cp1256 cp1257 cp1258 cp437 cp646 cp850 \
	 cp852 cp856 cp866 cp874 cp8859_1 cp8859_2 cp8859_5 cpall sharemem unixcp
RTLXML=$(addsuffix .xml,$(RTLUNITS)) rtl-project.xml
RTLNEWXML=$(addsuffix .new.xml,$(RTLUNITS))
RTLTYPES= --descr=types.xml --input="$(FPCSRCDIR)/rtl/objpas/types.pp $(OSDIRINCLUDES)"
RTLSTRUTILS= --descr=strutils.xml --input="$(FPCSRCDIR)/packages/rtl-objpas/src/inc/strutils.pp $(OSDIRINCLUDES)"
RTLSYSUTILS= --descr=sysutils.xml --input="-dFPC_HAS_TYPE_SINGLE -dFPC_HAS_TYPE_DOUBLE -dFPC_HAS_TYPE_EXTENDED -dFPC_HAS_UNICODESTRING $(FPCSRCDIR)/rtl/unix/sysutils.pp -Fi$(FPCSRCDIR)/rtl/objpas/sysutils -Fi$(FPCSRCDIR)/rtl/inc $(OSDIRINCLUDES)"
RTLSTRINGS= --descr=strings.xml --input="$(FPCSRCDIR)/rtl/inc/strings.pp -Fi$(FPCSRCDIR)/rtl/i386 -Fi$(FPCSRCDIR)/rtl/inc $(OSDIRINCLUDES)"
RTLMOUSE= --descr=mouse.xml --input="$(FPCSRCDIR)/packages/rtl-console/src/unix/mouse.pp -Fi$(FPCSRCDIR)/packages/rtl-console/src/inc $(OSDIRINCLUDES)"
RTLKEYBOARD= --descr=keyboard.xml --input="$(FPCSRCDIR)/packages/rtl-console/src/unix/keyboard.pp -Fi$(FPCSRCDIR)/packages/rtl-console/src/inc $(OSDIRINCLUDES)"
RTLCRT= --descr=crt.xml --input="$(FPCSRCDIR)/packages/rtl-console/src/unix/crt.pp -Fi$(FPCSRCDIR)/packages/rtl-console/src/inc $(OSDIRINCLUDES)"
RTLVIDEO= --descr=video.xml --input="$(FPCSRCDIR)/packages/rtl-console/src/unix/video.pp -Fi$(FPCSRCDIR)/packages/rtl-console/src/inc $(OSDIRINCLUDES)"
RTLDOS= --descr=dos.xml --input="$(FPCSRCDIR)/rtl/unix/dos.pp -Fi$(FPCSRCDIR)/rtl/inc -dcpui386 $(OSDIRINCLUDES)"
RTLSOCKETS= --descr=sockets.xml --input="-dver1_0 $(FPCSRCDIR)/packages/rtl-extra/src/unix/sockets.pp -Fi$(FPCSRCDIR)/packages/rtl-extra/src/inc -Fi$(FPCSRCDIR)/packages/rtl-extra/src/$(OS_SOURCE) $(OSDIRINCLUDES)"
RTLOBJECTS= --descr=objects.xml --input="$(FPCSRCDIR)/packages/rtl-extra/src/inc/objects.pp -Fi$(FPCSRCDIR)/rtl/i386 -Fi$(FPCSRCDIR)/rtl/$(OS_SOURCE) $(OSDIRINCLUDES)"
RTLHEAPTRC= --descr=heaptrc.xml --input="$(FPCSRCDIR)/rtl/inc/heaptrc.pp -Fi$(FPCSRCDIR)/rtl/i386 -Fi$(FPCSRCDIR)/rtl/$(OS_SOURCE) $(OSDIRINCLUDES)"
RTLMMX= --descr=mmx.xml --input="$(FPCSRCDIR)/rtl/i386/mmx.pp -Fi$(FPCSRCDIR)/rtl/$(OS_SOURCE) $(OSDIRINCLUDES)"
RTLIPC= --descr=ipc.xml --input="$(FPCSRCDIR)/packages/rtl-extra/src/unix/ipc.pp -Fi$(FPCSRCDIR)/rtl/$(OS_SOURCE) $(OSDIRINCLUDES)"
RTLPRINTER= --descr=printer.xml --input="$(FPCSRCDIR)/packages/rtl-extra/src/unix/printer.pp -Fi$(FPCSRCDIR)/packages/rtl-extra/src/$(OS_SOURCE) -Fi$(FPCSRCDIR)/packages/rtl-extra/src/inc $(OSDIRINCLUDES)"
RTLTYPINFO= --descr=typinfo.xml --input="$(FPCSRCDIR)/rtl/objpas/typinfo.pp -Fi$(FPCSRCDIR)/rtl/$(OS_SOURCE) $(OSDIRINCLUDES)"
RTLPORTS= --descr=ports.xml --input="$(FPCSRCDIR)/rtl/unix/ports.pp -Fi$(FPCSRCDIR)/rtl/$(OS_SOURCE) $(OSDIRINCLUDES)"
RTLGETOPTS= --descr=getopts.xml --input="$(FPCSRCDIR)/rtl/inc/getopts.pp -Fi$(FPCSRCDIR)/rtl/$(OS_SOURCE) $(OSDIRINCLUDES)"
RTLEMU387= --descr=emu387.xml --input="$(FPCSRCDIR)/rtl/go32v2/emu387.pp -Fi$(FPCSRCDIR)/rtl/i386 $(OSDIRINCLUDES)"
RTLDXELOAD= --descr=dxeload.xml --input="$(FPCSRCDIR)/rtl/go32v2/dxeload.pp -Fi$(FPCSRCDIR)/rtl/i386 $(OSDIRINCLUDES)"
RTLGO32= --descr=go32.xml --input="$(FPCSRCDIR)/rtl/go32v2/go32.pp -Fi$(FPCSRCDIR)/rtl/i386 $(OSDIRINCLUDES)"
RTLGPM= --descr=gpm.xml --input="-dVER1_0 $(FPCSRCDIR)/packages/rtl-extra/src/unix/gpm.pp -Fi$(FPCSRCDIR)/rtl/i386 $(OSDIRINCLUDES)"
RTLGRAPH= --descr=graph.xml --input="$(GRAPHDIR)/unix/graph.pp -Fi$(GRAPHDIR)/inc $(OSDIRINCLUDES)"
RTLWINCRT= --descr=wincrt.xml --input="$(GRAPHDIR)/win32/wincrt.pp"
RTLUNIXTYPE= --descr=unixtype.xml --input="-dcpu64 $(FPCSRCDIR)/rtl/unix/unixtype.pp -Fi$(FPCSRCDIR)/rtl/unix -Fi$(FPCSRCDIR)/rtl/linux -Fi$(FPCSRCDIR)/rtl/linux/i386 $(OSDIRINCLUDES)"
RTLBASEUNIX= --descr=baseunix.xml --input="-dcpu64 $(FPCSRCDIR)/rtl/unix/baseunix.pp -Fi$(FPCSRCDIR)/rtl/unix -Fi$(FPCSRCDIR)/rtl/linux -Fi$(FPCSRCDIR)/rtl/linux/i386 $(OSDIRINCLUDES)"
RTLUNIX= --descr=unix.xml  --input="-dcpu64 $(FPCSRCDIR)/rtl/unix/unix.pp -Fi$(FPCSRCDIR)/rtl/unix -Fi$(FPCSRCDIR)/rtl/linux -Fi$(FPCSRCDIR)/rtl/linux/i386 $(OSDIRINCLUDES)"
RTLCLASSES= --descr=classes.xml --input="$(FPCSRCDIR)/rtl/$(CLASSESUNITDIR)/classes.pp -Fi$(FPCSRCDIR)/rtl/objpas/classes $(OSDIRINCLUDES) -dfpdocsystem"
RTLUNIXUTIL= --descr=unixutil.xml --input="-dcpu64 $(FPCSRCDIR)/rtl/unix/unixutil.pp $(OSDIRINCLUDES)"
RTLX86= --descr=x86.xml --input="$(FPCSRCDIR)/rtl/unix/x86.pp $(OSDIRINCLUDES)"
RTLDYNLIBS= --descr=dynlibs.xml --input="$(FPCSRCDIR)/rtl/inc/dynlibs.pas -Fi$(FPCSRCDIR)/rtl/unix  -Fi$(FPCSRCDIR)/rtl/linux $(OSDIRINCLUDES)"
RTLLINUX= --descr=linux.xml --input="-dclone_implemented $(FPCSRCDIR)/rtl/linux/linux.pp -Fi$(FPCSRCDIR)/rtl/linux -Fi$(FPCSRCDIR)/rtl/unix $(OSDIRINCLUDES)"
RTLMATH= --descr=math.xml --input="-dFPDOC_MATH $(FPCSRCDIR)/rtl/objpas/math.pp -Fi$(FPCSRCDIR)/rtl/i386 -dFPC_HAS_TYPE_EXTENDED $(OSDIRINCLUDES)"
RTLMATRIX= --descr=matrix.xml --input="$(FPCSRCDIR)/packages/rtl-extra/src/inc/matrix.pp -Fi$(FPCSRCDIR)/packages/rtl-extra/src/inc $(OSDIRINCLUDES)"
RTLSYSTEM= --descr=system.xml --input="-Sd -dfpdocsystem -dHASGETHEAPSTATUS -dSUPPORT_DOUBLE $(FPCSRCDIR)/rtl/$(SYSTEMUNITDIR)/system.pp -Fi$(FPCSRCDIR)/rtl/$(OS_SOURCE) -Fi$(FPCSRCDIR)/rtl/unix -Fi$(FPCSRCDIR)/rtl/inc -Fi$(FPCSRCDIR)/rtl/i386 -dCPU32 -dHASVARIANT -dFPC_HAS_TYPE_EXTENDED -dHASWIDECHAR $(OSDIRINCLUDES)"
RTLOBJPAS= --descr=objpas.xml --input="-dHASINTF $(FPCSRCDIR)/rtl/objpas/objpas.pp $(OSDIRINCLUDES)"
RTLDATEUTILS= --descr=dateutils.xml --input="$(FPCSRCDIR)/packages/rtl-objpas/src/inc/dateutils.pp -Fi$(FPCSRCDIR)/rtl/objpas $(OSDIRINCLUDES)"
RTLCLOCALE= --descr=clocale.xml --input="$(FPCSRCDIR)/packages/rtl-extra/src/unix/clocale.pp $(OSDIRINCLUDES)"
RTLCTHREADS= --descr=cthreads.xml --input="$(FPCSRCDIR)/rtl/unix/cthreads.pp $(OSDIRINCLUDES)"
RTLCMEM= --descr=cmem.xml --input="$(FPCSRCDIR)/rtl/inc/cmem.pp $(OSDIRINCLUDES)"
RTLCWSTRING= --descr=cwstring.xml --input="$(FPCSRCDIR)/rtl/unix/cwstring.pp $(OSDIRINCLUDES)"
RTLEXEINFO= --descr=exeinfo.xml --input="$(FPCSRCDIR)/rtl/inc/exeinfo.pp $(OSDIRINCLUDES)"
RTLLINEINFO= --descr=lineinfo.xml --input="$(FPCSRCDIR)/rtl/inc/lineinfo.pp $(OSDIRINCLUDES)"
RTLLNFODWRF= --descr=lnfodwrf.xml --input="$(FPCSRCDIR)/rtl/inc/lnfodwrf.pp $(OSDIRINCLUDES)"
RTLCTYPES= --descr=ctypes.xml --input="$(FPCSRCDIR)/rtl/inc/ctypes.pp -Fi$(FPCSRCDIR)/rtl/unix $(OSDIRINCLUDES)"
RTLFPWIDESTRING= --descr=fpwidestring.xml --input="$(FPCSRCDIR)/rtl/objpas/fpwidestring.pp -Fi$(FPCSRCDIR)/rtl/inc -Fi$(FPCSRCDIR)/rtl/linux $(OSDIRINCLUDES)"
RTLERRORS= --descr=errors.xml --input="$(FPCSRCDIR)/rtl/unix/errors.pp -Fi$(FPCSRCDIR)/rtl/linux/  $(OSDIRINCLUDES)"
RTLFGL= --descr=fgl.xml --input="$(FPCSRCDIR)/rtl/objpas/fgl.pp  $(OSDIRINCLUDES)"
RTLCHARACTER= --descr=character.xml --input="$(FPCSRCDIR)/rtl/objpas/character.pas  $(OSDIRINCLUDES)"
RTLOPTS+= $(RTLSYSTEM) $(RTLOBJPAS) $(RTLTYPES) 
RTLOPTS+= $(RTLSTRUTILS) $(RTLSYSUTILS) $(RTLSTRINGS) $(RTLMOUSE) $(RTLKEYBOARD)
RTLOPTS+= $(RTLCRT) $(RTLVIDEO) $(RTLDOS) $(RTLSOCKETS) $(RTLOBJECTS)
RTLOPTS+= $(RTLHEAPTRC) $(RTLMMX) $(RTLIPC) $(RTLPRINTER) $(RTLTYPINFO) 
RTLOPTS+= $(RTLPORTS) $(RTLGETOPTS) $(RTLEMU387) $(RTLDXELOAD) $(RTLGO32)
RTLOPTS+= $(RTLGPM) $(RTLGRAPH) $(RTLUNIXTYPE) $(RTLBASEUNIX)
RTLOPTS+= $(RTLUNIX) $(RTLCLASSES) $(RTLUNIXUTIL) $(RTLX86) $(RTLDYNLIBS)
RTLOPTS+= $(RTLLINUX) $(RTLMATH) $(RTLMATRIX) 
RTLOPTS+= $(RTLDATEUTILS) $(RTLWINCRT) $(RTLCLOCALE) $(RTLCTHREADS) $(RTLCMEM)
RTLOPTS+= $(RTLCWSTRING) $(RTLEXEINFO) $(RTLLINEINFO) $(RTLLNFODWRF) $(RTLCTYPES)
RTLOPTS+= $(RTLFPWIDESTRING) $(RTLERRORS) $(RTLFGL) $(RTLCHARACTER)
endif 
updatexml: updatefclxml updatertlxml updatefclresxml
updatertlxml: fpc_all
	$(RTLMAKESKEL) $(RTLTYPES) --output=types.new.xml
	$(RTLMAKESKEL) $(RTLSTRUTILS) --output=strutils.new.xml
	$(RTLMAKESKEL) $(RTLSYSUTILS) --output=sysutils.new.xml
	$(RTLMAKESKEL) $(RTLSTRINGS) --output=strings.new.xml
	$(RTLMAKESKEL) $(RTLMOUSE) --output=mouse.new.xml
	$(RTLMAKESKEL) $(RTLKEYBOARD) --output=keyboard.new.xml
	$(RTLMAKESKEL) $(RTLCRT) --output=crt.new.xml
	$(RTLMAKESKEL) $(RTLVIDEO) --output=video.new.xml
	$(RTLMAKESKEL) $(RTLDOS) --output=dos.new.xml
	$(RTLMAKESKEL) $(RTLSOCKETS) --output=sockets.new.xml
	$(RTLMAKESKEL) $(RTLOBJECTS) --output=objects.new.xml
	$(RTLMAKESKEL) $(RTLHEAPTRC) --output=heaptrc.new.xml
	$(RTLMAKESKEL) $(RTLMMX) --output=mmx.new.xml
	$(RTLMAKESKEL) $(RTLIPC) --output=ipc.new.xml
	$(RTLMAKESKEL) $(RTLPRINTER) --output=printer.new.xml
	$(RTLMAKESKEL) $(RTLTYPINFO) --output=typinfo.new.xml
	$(RTLMAKESKEL) $(RTLPORTS) --output=ports.new.xml
	$(RTLMAKESKEL) $(RTLGETOPTS) --output=getopts.new.xml
	$(RTLMAKESKEL) $(RTLEMU387) --output=emu387.new.xml
	$(RTLMAKESKEL) $(RTLDXELOAD) --output=dxeload.new.xml
	$(RTLMAKESKEL) $(RTLGO32) --output=go32.new.xml
	$(RTLMAKESKEL) $(RTLGPM) --output=gpm.new.xml
	$(RTLMAKESKEL) $(RTLGRAPH) --output=graph.new.xml
	$(RTLMAKESKEL) $(RTLUNIXTYPE) --output=unixtype.new.xml
	$(RTLMAKESKEL) $(RTLBASEUNIX) --output=baseunix.new.xml
	$(RTLMAKESKEL) $(RTLUNIX) --output=unix.new.xml
	$(RTLMAKESKEL) $(RTLCLASSES) --output=classes.new.xml
	$(RTLMAKESKEL) $(RTLUNIXUTIL) --output=unixutil.new.xml
	$(RTLMAKESKEL) $(RTLX86) --output=x86.new.xml
	$(RTLMAKESKEL) $(RTLDYNLIBS) --output=dynlibs.new.xml
	$(RTLMAKESKEL) $(RTLLINUX) --output=linux.new.xml
	$(RTLMAKESKEL) $(RTLMATH) --output=math.new.xml
	$(RTLMAKESKEL) $(RTLMATRIX) --output=matrix.new.xml
	$(RTLMAKESKEL) $(RTLSYSTEM) --output=system.new.xml
	$(RTLMAKESKEL) $(RTLOBJPAS) --output=objpas.new.xml
	$(RTLMAKESKEL) $(RTLDATEUTILS) --output=dateutils.new.xml
	$(RTLMAKESKEL) $(RTLCMEM) --output=cmem.new.xml
	$(RTLMAKESKEL) $(RTLCLOCALE) --output=clocale.new.xml
	$(RTLMAKESKEL) $(RTLCWSTRING) --output=cwstring.new.xml
	$(RTLMAKESKEL) $(RTLEXEINFO) --output=exeinfo.new.xml
	$(RTLMAKESKEL) $(RTLLINEINFO) --output=lineinfo.new.xml
	$(RTLMAKESKEL) $(RTLLNFODWRF) --output=lnfodwrf.new.xml
	$(RTLMAKESKEL) $(RTLCTYPES) --output=ctypes.new.xml
	$(RTLMAKESKEL) $(RTLFPWIDESTRING) --output=fpwidestring.new.xml
	$(RTLMAKESKEL) $(RTLERRORS) --output=errors.new.xml 
	$(RTLMAKESKEL) $(RTLFGL) --output=fgl.new.xml
	$(RTLMAKESKEL) $(RTLCHARACTER) --output=character.new.xml
	./cleanxml $(RTLNEWXML)
rtl.inc: $(RTLXML)
	$(FPDOC)  $(FPDOCOPTS) --output=rtl.inc --project=rtl-project.xml --format=latex
fcl.inc: $(FCLXML)
	$(FPDOC) $(FPDOCOPTS) --output=fcl.inc --project=fcl-project.xml --format=latex
fclres.inc: $(FCLRESXML)
	$(FPDOC) $(FPDOCOPTS) --output=fclres.inc $(FCLRESOPTS) --format=latex
RTFFILES = $(addsuffix .rtf,$(RTFS))
rtf: $(RTFFILES)
rtl.rtf: $(RTLXML)
	$(FPDOC) $(FPDOCOPTS) --output=rtl.rtf --project=rtl-project.xml --format=rtf
fcl.rtf: $(FCLXML)
	$(FPDOC) $(FPDOCOPTS) --output=fcl.rtf --project=fcl-project.xml --format=rtf
fclres.rtf: $(FCLXML)
	$(FPDOC) $(FPDOCOPTS) --output=fclres.rtf $(FCLRESOPTS) --format=rtf
ref.dvi: ref.tex $(INCLUDES)
prog.dvi: prog.tex $(INCLUDES)
user.dvi: user.tex $(INCLUDES) messages.inc comphelp.inc
fpdoc.dvi: fpdoc.tex $(INCLUDES)
fcl.dvi: fcl.tex fcl.inc $(INCLUDES)
fclres.dvi: fclres.tex fclres.inc $(INCLUDES)
chart.dvi: chart.tex
ref.pdf: ref.tex $(INCLUDES)
user.pdf: user.tex $(INCLUDES) messages.inc comphelp.inc
prog.pdf: prog.tex $(INCLUDES)
onechap.pdf: onechap.tex $(INCLUDES)
onechap.dvi: onechap.tex $(INCLUDES)
fpdoc.pdf: fpdoc.tex $(INCLUDES)
fcl.pdf: fcl.tex fcl.inc $(INCLUDES)
fclres.pdf: fclres.tex fclres.inc $(INCLUDES)
chart.pdf: chart.tex
rtl.dvi: rtl.tex rtl.inc $(INCLUDES)
rtl.pdf: rtl.tex rtl.inc $(INCLUDES)
dvi : $(DVI)
ifndef USEELINKS
txt : dvi $(TXT)
else
fcl.txt: $(FCLXML)
	$(FPDOC) $(FPDOCOPTS) --project=fcl-project.xml --format=txt --output=fcl.txt
	unix2dos fcl.txt
fclres.txt: $(FCLRESXML)
	$(FPDOC) $(FPDOCOPTS) $(FCLRESOPTS) --format=txt --output=fclres.txt
	unix2dos fcl.txt
rtl.txt: $(RTLXML)
	$(FPDOC) $(FPDOCOPTS) --project=rtl-project.xml --format=txt --output=rtl.txt
	unix2dos rtl.txt
user.txt: messages.inc
txt : fpc_all comphelp.inc $(INCLUDES) $(TXT)
endif
ps : dvi $(PS)
pdf : $(PDF)
all : dvi ps pdf txt html
.PHONY: htex user prog onechap ref internal html hevea
ifdef INSTALLDEBUG
$(HTML):
	mkdir $@
	cp $@.tex $@/index.html
html: $(HTML)
else
ifdef USEHEVEA
include Makefile.hev
else
ifdef USEPLASTEX
include Makefile.ptx
else
ifdef USEL2H
include Makefile.l2h
else
include Makefile.4ht
endif  # USEL2H
endif  # USEPLASTEX
endif  # USEHEVEA
fcl.chk: $(FCLXML) fcl-project.xml
	$(FPDOC) $(FPDOCOPTS) --project=fcl-project.xml --format=$(HTMLFMT) --output=fcl$(HTMLSUFFIX) $(FPDOCHTMLOPTS) $(FCLCHMOPTS)
ifndef CSSFILE
	cp fpdoc.cst fcl/fpdoc.css
endif
	@$(ECHO) '' > fcl.chk
fclres.chk: $(FCLRESXML)
	$(FPDOC) $(FPDOCOPTS) $(FCLRESOPTS) --format=$(HTMLFMT) --output=fclres$(HTMLSUFFIX) $(FPDOCHTMLOPTS) $(FCLRESCHMOPTS) 
ifndef CSSFILE
	cp fpdoc.cst fclres/fpdoc.css
endif
	@$(ECHO) '' > fclres.chk
rtl.chk: $(RTLXML) rtl-project.xml
	$(FPDOC) $(FPDOCOPTS) --project=rtl-project.xml --format=$(HTMLFMT) --output=rtl$(HTMLSUFFIX) $(FPDOCHTMLOPTS) $(RTLCHMOPTS)
ifndef CSSFILE
	cp fpdoc.cst rtl/fpdoc.css
endif
	@$(ECHO) '' > rtl.chk
user.chk: $(INCLUDES) user.tex messages.inc
prog.chk: $(INCLUDES) prog.tex
onechap.chk: $(INCLUDES) onechap.tex
ref.chk: $(INCLUDES) ref.tex
fpdoc.chk: $(INCLUDES) fpdoc.tex
chart.chk: $(INCLUDES) chart.tex
html: fpc_all comphelp.inc $(INCLUDES) $(CHK)
chm: 
	$(MAKE) html HTMLFMT=chm
ipf:
	$(MAKE) html HTMLFMT=ipf
endif  # INSTALLDEBUG
hevea:
	$(MAKE) html USEHEVEA=1
l2h:
	$(MAKE) html USEL2H=1
4ht:
	$(MAKE) html USETEX4HT=1
plastex:
	$(MAKE) html USEPLASTEX=1
GTKPDF=$(addsuffix .pdf,$(addprefix gtk, 1 2 3 4 5))
gtk: $(GTKPDF)
gtk1.pdf: gtk1.tex
gtk2.pdf: gtk2.tex
gtk3.pdf: gtk3.tex
gtk4.pdf: gtk4.tex
gtk5.pdf: gtk5.tex
.PHONY: pdfinstall psinstall dviinstall txtinstall
pdfinstall: pdf
	$(GINSTALL) -d -m 755 $(INSTALL_DOCDIR)
	cp $(PDF) $(INSTALL_DOCDIR)
psinstall: ps
	$(GINSTALL) -d -m 755 $(INSTALL_DOCDIR)
	cp $(PS) $(INSTALL_DOCDIR)
dviinstall: dvi
	$(GINSTALL) -d -m 755 $(INSTALL_DOCDIR)
	cp $(DVI) $(INSTALL_DOCDIR)
txtinstall: txt
	$(GINSTALL) -d -m 755 $(INSTALL_DOCDIR)
	cp $(TXT) $(INSTALL_DOCDIR)
htmlinstall: html
	$(GINSTALL) -d -m 755 $(INSTALL_DOCDIR)
	cp fpctoc.html $(INSTALL_DOCDIR)
	$(GINSTALL) -d -m 755 $(INSTALL_DOCDIR)/buttons
	cp buttons/*.* $(INSTALL_DOCDIR)/buttons
	$(GINSTALL) -d -m 755 $(INSTALL_DOCDIR)/pics
	cp pics/*.* $(INSTALL_DOCDIR)/pics
	cp -R $(HTML) $(INSTALL_DOCDIR)
	find $(INSTALL_DOCDIR) -name 'CVS' -or -name '*.eps' | xargs -n1 rm -rf
install:
	@echo Choose install from:
	@echo pdfinstall,htmlinstall,htmldosinstall
	@exit
pstar:
	$(MAKE) zipinstall ZIPTARGET=psinstall UNIXHier= USETAR=y FULLZIPNAME=doc-ps
pszip:
	$(MAKE) zipinstall ZIPTARGET=psinstall UNIXHier= USEZIP=y FULLZIPNAME=doc-ps
pdftar:
	$(MAKE) zipinstall ZIPTARGET=pdfinstall UNIXHier= USETAR=y FULLZIPNAME=doc-pdf
pdfzip:
	$(MAKE) zipinstall ZIPTARGET=pdfinstall UNIXHier= USEZIP=y FULLZIPNAME=doc-pdf
dvizip:
	$(MAKE) zipinstall ZIPTARGET=dviinstall UNIXHier= USEZIP=y FULLZIPNAME=doc-dvi
txtzip:
	$(MAKE) zipinstall ZIPTARGET=txtinstall UNIXHier= USEZIP=y FULLZIPNAME=doc-txt
htmltar:
	$(MAKE) zipinstall ZIPTARGET=htmlinstall UNIXHier= USETAR=y FULLZIPNAME=doc-html
htmlzip:
	$(MAKE) zipinstall ZIPTARGET=htmlinstall UNIXHier= USEZIP=y FULLZIPNAME=doc-html
psdist: pszip pstar
pdfdist: pdfzip pdftar
txtdist: txtzip
dvidist: dvizip
htmldist: htmlzip htmltar
alldist: dvidist psdist txtdist pdfdist htmldist
examples:
	$(MAKE) -C crtex
	$(MAKE) -C dosex
	$(MAKE) -C optex
	$(MAKE) -C mathex
	$(MAKE) -C printex
	$(MAKE) -C progex
	$(MAKE) -C refex
	$(MAKE) -C stringex
	$(MAKE) -C objectex
	$(MAKE) -C sysutex
	$(MAKE) -C typinfex
	$(MAKE) -C kbdex
cleanexamples:
	$(MAKE) -C crtex clean
	$(MAKE) -C dosex clean
	$(MAKE) -C optex clean
	$(MAKE) -C mathex clean
	$(MAKE) -C printex clean
	$(MAKE) -C progex clean
	$(MAKE) -C refex clean
	$(MAKE) -C stringex clean
	$(MAKE) -C objectex clean
	$(MAKE) -C sysutex clean
	$(MAKE) -C typinfex clean
	$(MAKE) -C kbdex clean
	$(MAKE) -C go32ex clean
	$(MAKE) -C mouseex clean
	$(MAKE) -C linuxex clean
	$(MAKE) -C sockex clean
	$(MAKE) -C ipcex clean
dosexamples: examples
	$(MAKE) -C go32ex
	$(MAKE) -C mouseex
linuxexamples: examples
	$(MAKE) -C linuxex
	$(MAKE) -C sockex
	$(MAKE) -C ipcex
execute:
	$(MAKE) -C dosex all
	$(MAKE) -C dosex execute
	$(MAKE) -C refex all
	$(MAKE) -C refex execute
	$(MAKE) -C mathex all
	$(MAKE) -C mathex execute
	$(MAKE) -C stringex all
	$(MAKE) -C stringex execute
	$(MAKE) -C objectex all
	$(MAKE) -C objectex execute
	$(MAKE) -C sysutex all
	$(MAKE) -C sysutex execute
	$(MAKE) -C typinfex all
	$(MAKE) -C typinfex execute
