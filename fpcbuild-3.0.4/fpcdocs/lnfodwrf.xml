<?xml version="1.0" encoding="ISO-8859-1"?>
<fpdoc-descriptions>
<package name="rtl">

<!--
  ====================================================================
    lnfodwrf
  ====================================================================
-->

<module name="lnfodwrf">
<short>Return adress line information</short>
<descr>
<p>
The <file>lnfodwrf</file> provides a routine that reads the debug
information of an executable (if any exists) and returns source code
information about this address. It works with <var>DWARF</var> debug
information. Note that this unit is not thread-safe, and that its
behaviour is undefined if multiple threads try to write a backtrace
at the same time.
</p>
<p>
For stabs debug information, the <link id="#rtl.lineinfo">lineinfo</link> 
unit must be used.
</p>
</descr>

<!-- function Visibility: default -->
<element name="GetLineInfo">
<short>Return source line information about an address.</short>
<descr>
<var>GetLineInfo</var> returns source line information about the address
<var>addr</var>. It searches this information in the DWARF debugging
information found in the binary: If the file was compiled without debug
information, nothing will be returned. Upon succesful retrieval of the
debug information, <var>True</var> is returned, and the
<var>func</var> parameter is filled with the name of the function in which the address
is located. The <var>source</var> parameter contains the name of the file in
which the function was implemented, and <var>line</var> contains the line
number in the source file for <var>addr</var>.
</descr>
<errors>
If no debug information is found, <var>False</var> is returned.
</errors>
</element>

<!-- function result Visibility: default -->
<element name="GetLineInfo.Result">
<short><var>True</var> if the line information was found, <var>False</var> if not.</short>
</element>

<!-- argument Visibility: default -->
<element name="GetLineInfo.addr">
<short>Address to examine</short>
</element>

<!-- argument Visibility: default -->
<element name="GetLineInfo.func">
<short>Name of function in which <var>Addr</var> resides.</short>
</element>

<!-- argument Visibility: default -->
<element name="GetLineInfo.source">
<short>Source file in which <var>Addr</var> was implemented.</short>
</element>

<!-- argument Visibility: default -->
<element name="GetLineInfo.line">
<short>Line number on which <var>Addr</var> was implemented.</short>
</element>

<!-- function Visibility: default -->
<element name="DwarfBackTraceStr">
<short>Get a backtrace from an address</short>
<descr>
<p>
<var>DwarfBackTraceStr</var> returns a backtrace from a memory address
<var>Addr</var>.
</p>
<p>
This is the actual callback for the backtrace handler <link id="System.BackTraceStrFunc"/>.
</p>
</descr>
<errors>
None.
</errors>
<seealso>
<link id="GetLineInfo"/>
</seealso>
</element>

<!-- procedure Visibility: default -->
<element name="CloseDwarf">
<short>Close DWARF info file descriptor</short>
<descr>
<var>CloseDwarf</var> will close the file descriptor that was used to read
DWARF debug information. This is useful if <link id="AllowReuseOfLineInfoData"/> 
is used to cache DWARF information.
</descr>
<errors>
None.
</errors>
<seealso>
<link id="AllowReuseOfLineInfoData"/>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="AllowReuseOfLineInfoData">
<short>Speed up LineInfo reading by reusing already-read information</short>
<descr>
<var>AllowReuseOfLineInfoData</var> can be set to <var>True</var> to keep
the last opened file open. When regularly creating backtraces (e.g. in a
program log), this will significantly speed up operations. 
</descr>
<seealso>
<link id="CloseDwarf"/>
</seealso>
</element>

</module> <!-- lineinfo -->

</package>
</fpdoc-descriptions>
