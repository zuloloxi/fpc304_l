<?xml version="1.0" encoding="ISO-8859-1"?>
<fpdoc-descriptions>
<package name="rtl">

<!--
  ====================================================================
    types
  ====================================================================
-->

<module name="types">
<short>Various types</short>
<descr>
Starting with D6, types from Windows specific units that were needed in
Kylix were extracted to this unit. So it mostly contains type of Windows
origin that are needed in the VCL framework.
</descr>

<!-- constant Visibility: default -->
<element name="RT_RCDATA">
<short>Resource type RCDATA</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- alias type Visibility: default -->
<element name="DWORD">
<short>Alias for cardinal type</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- alias type Visibility: default -->
<element name="PLongint">
<short>Pointer to longint type</short>
<descr>
<var>PLongint</var> is defined in the system unit. This is an alias for
Delphi/Kylix compatibility.
</descr>
</element>

<!-- alias type Visibility: default -->
<element name="PSmallInt">
<short>Pointer to smallint type</short>
<descr>
<var>PSmallInt</var> is defined in the system unit. This is an alias for
Delphi/Kylix compatibility.
</descr>
<seealso>
</seealso>
</element>

<!-- alias type Visibility: default -->
<element name="PDouble">
<short>Pointer do double type</short>
<descr>
<var>PDouble</var> is defined in the system unit. This is an alias for
Delphi/Kylix compatibility.
</descr>
</element>

<!-- alias type Visibility: default -->
<element name="PByte">
<short>Pointer to byte type</short>
<descr>
<var>PByte</var> is defined in the system unit. This is an alias for
Delphi/Kylix compatibility.
</descr>
</element>

<!-- alias type Visibility: default -->
<element name="Largeint">
<short>Alias for the Int64 type</short>
<descr>
<var>Largeint</var> is an alias for the Int64 type defined in the system unit. This is an alias for
Delphi/Kylix compatibility.
</descr>
</element>

<!-- alias type Visibility: default -->
<element name="LARGE_INT">
<short>Alias for the Int64 type</short>
<descr>
<var>LARGE_INT</var> is an alias for the Int64 type defined in the system unit. This is an alias for
Delphi/Kylix compatibility.
</descr>
</element>

<!-- pointer type Visibility: default -->
<element name="PLargeInt">
<short>Pointer to <var>LargeInt</var></short>
<descr>
<var>PLargeInt</var> is an alias for the PInt64 type defined in the system unit. This is an alias for
Delphi/Kylix compatibility.
</descr>
</element>

<!-- alias type Visibility: default -->
<element name="LargeUint">
<short>Alias for the QWord type</short>
<descr>
<var>LargeUInt</var> is an alias for the <var>QWord</var> type defined in the system unit. This is an alias for
Delphi/Kylix compatibility.
</descr>
</element>

<!-- alias type Visibility: default -->
<element name="LARGE_UINT">
<short>Alias for the QWord type</short>
<descr>
<var>LARGE_UINT</var> is an alias for the <var>QWord</var> type defined in the system unit. This is an alias for
Delphi/Kylix compatibility.
</descr>
</element>

<!-- pointer type Visibility: default -->
<element name="PLargeuInt">
<short>Pointer to QWord type</short>
<descr>
<var>PLargeUInt</var> is an alias for the PQWord type defined in the system
unit. This is an alias for Delphi/Kylix compatibility.
</descr>
</element>

<!-- array type Visibility: default -->
<element name="TIntegerDynArray">
<short>Dynamic array of (32-bit, signed) integers</short>
<descr>
<var>TIntegerDynArray</var> is a standard definition of a dynamical array of
(32-bit, signed) integers.
</descr>
<seealso>
<link id="TCardinalDynArray"/>
<link id="TWordDynArray"/>
<link id="TSmallIntDynArray"/>
<link id="TByteDynArray"/>
</seealso>
</element>

<!-- array type Visibility: default -->
<element name="TCardinalDynArray">
<short>Dynamic array of (32-bit, unsigned) cardinals</short>
<descr>
<var>TCardinalDynArray</var> is a standard definition of a dynamical array of
(32-bit, unsigned) cardinals.
</descr>
<seealso>
<link id="TIntegerDynArray"/>
<link id="TWordDynArray"/>
<link id="TSmallIntDynArray"/>
<link id="TShortIntDynArray"/>
<link id="TByteDynArray"/>
<link id="TInt64DynArray"/>
</seealso>
</element>

<!-- array type Visibility: default -->
<element name="TWordDynArray">
<short>Dynamic array of (16-bit, unsigned) words</short>
<descr>
<var>TWordDynArray</var> is a standard definition of a dynamical array
of (16-bit, unsigned) words.
</descr>
<seealso>
<link id="TIntegerDynArray"/>
<link id="TCardinalDynArray"/>
<link id="TSmallIntDynArray"/>
<link id="TShortIntDynArray"/>
<link id="TByteDynArray"/>
<link id="TInt64DynArray"/>
</seealso>
</element>

<!-- array type Visibility: default -->
<element name="TSmallIntDynArray">
<short>Dynamic array of (16-bit, signed) smallints</short>
<descr>
<var>TSmallintDynArray</var> is a standard definition of a dynamical array
of (16-bit, unsigned) integers.
</descr>
<seealso>
<link id="TIntegerDynArray"/>
<link id="TCardinalDynArray"/>
<link id="TShortIntDynArray"/>
<link id="TWordDynArray"/>   
<link id="TByteDynArray"/>
<link id="TInt64DynArray"/>
</seealso>
</element>

<!-- array type Visibility: default -->
<element name="TByteDynArray">
<short>Dynamic array of (8-bit, unsigned) bytes</short>
<descr>
<var>TByteDynArray</var> is a standard definition of a dynamical array
of (8-bit, unsigned) bytes.
</descr>
<seealso>
<link id="TIntegerDynArray"/>
<link id="TCardinalDynArray"/>
<link id="TWordDynArray"/>    
<link id="TShortIntDynArray"/>
<link id="TSmallIntDynArray"/>
<link id="TInt64DynArray"/>
</seealso>
</element>

<!-- array type Visibility: default -->
<element name="TShortIntDynArray">
<short>Dynamic array of (8-bit, signed) shortints</short>
<descr>
<var>TShortintDynArray</var> is a standard definition of a dynamical array   
of (8-bit, signed) shortints. 
</descr>
<seealso>
<link id="TIntegerDynArray"/>
<link id="TCardinalDynArray"/>
<link id="TWordDynArray"/>
<link id="TSmallIntDynArray"/>
<link id="TByteDynArray"/>
<link id="TInt64DynArray"/>
</seealso>
</element>

<!-- array type Visibility: default -->
<element name="TInt64DynArray">
<short>Dynamic array of (64-bit, signed) int64s</short>
<descr>
<var>TInt64DynArray</var> is a standard definition of a dynamical array
of (64-bit, signed) int64s.
</descr>
<seealso>
<link id="TIntegerDynArray"/>
<link id="TCardinalDynArray"/>
<link id="TWordDynArray"/>
<link id="TSmallIntDynArray"/>
<link id="TByteDynArray"/>
<link id="TShortIntDynArray"/>
</seealso>
</element>

<!-- array type Visibility: default -->
<element name="TQWordDynArray">
<short>Dynamic array of (64-bit, unsigned) QWords</short>
<descr>
<var>TQWordDynArray</var> is a standard definition of a dynamical array
of (64-bit, unsigned) QWords.
</descr>
<seealso>
<link id="TIntegerDynArray"/>
<link id="TCardinalDynArray"/>
<link id="TWordDynArray"/>
<link id="TSmallIntDynArray"/>
<link id="TByteDynArray"/>
<link id="TShortIntDynArray"/>
<link id="TInt64DynArray"/>
</seealso>
</element>

<!-- array type Visibility: default -->
<element name="TLongWordDynArray">
<short>Dynamic array of (32-bit, unsigned) LongWords</short>
<descr>
<var>TLongWordDynArray</var> is a standard definition of a dynamical array
of (32-bit, unsigned) LongWords.
</descr>
<seealso>
<link id="TIntegerDynArray"/>
<link id="TCardinalDynArray"/>
<link id="TWordDynArray"/>
<link id="TSmallIntDynArray"/>
<link id="TByteDynArray"/>
<link id="TShortIntDynArray"/>
<link id="TInt64DynArray"/>
<link id="TQWordDynArray"/>
</seealso>
</element>

<!-- array type Visibility: default -->
<element name="TSingleDynArray">
<short>Array of (single-sized) floats</short>
<descr>
<var>TSingleDynArray</var> is a standard definition of a dynamical array
of singles. (smallest floating point type)
</descr>
<seealso>
<link id="TDoubleDynArray"/>
</seealso>
</element>

<!-- array type Visibility: default -->
<element name="TDoubleDynArray">
<short>Dynamic array of (Double-sized) floats</short>
<descr>
<var>TSoubleDynArray</var> is a standard definition of a dynamical array
of doubles. (regular floating point type)
</descr>
<seealso>
<link id="TSingleDynArray"/>
</seealso>
</element>

<!-- array type Visibility: default -->
<element name="TBooleanDynArray">
<short>Dynamic array of booleans</short>
<descr>
<var>TBooleanDynArray</var> is a standard definition of a dynamical array
of booleans.
</descr>
<seealso>
<link id="TIntegerDynArray"/>
<link id="TByteDynArray"/>
</seealso>
</element>

<!-- array type Visibility: default -->
<element name="TStringDynArray">
<short>Dynamic array of AnsiStrings</short>
<descr>
<var>TStringDynArray</var> is a standard definition of a dynamical array
of Ansistrings.
</descr>
<seealso>
<link id="TIntegerDynArray"/>
<link id="TWideStringDynArray"/>
</seealso>
</element>

<!-- array type Visibility: default -->
<element name="TWideStringDynArray">
<short>Dynamic array of WideStrings</short>
<descr>
<var>TWideStringDynArray</var> is a standard definition of a dynamical array
of WideStrings.
</descr>
<seealso>
<link id="TStringDynArray"/>
</seealso>
</element>

<!-- array type Visibility: default -->
<element name="TPointerDynArray">
<short>Dynamic array of untyped pointers</short>
<descr>
</descr>
<var>TPointerDynArray</var> is a standard definition of a dynamical array
of untyped pointers.
<seealso>
<link id="TStringDynArray"/>
</seealso>
</element>

<!-- record type Visibility: default -->
<element name="TPoint">
<short>Point in a plane</short>
<descr>
<p>
<var>TPoint</var> is a generic definition of a point in a 2-dimensional
discrete plane, where <var>X</var> indicates the horizontal position, and
<var>Y</var> the vertical position (positions usually measured in pixels), 
and <var>0,0</var> is the origin of the plane.
</p>
<p>
Usually, the origin is the upper-left corner of the screen, with Y
increasing as one moves further down the screen - this is opposite to the
mathematical view where Y increases as one moves upwards.
</p>
<p>
The coordinates are integers, (32-bit, signed) so the coordinate system 
runs from <var>-MaxInt</var> to <var>MaxInt</var>.
</p>
</descr>
<seealso>
<link id="TRect"/>
<link id="TSize"/>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TPoint.X">
<short>Horizontal position</short>
</element>

<!-- variable Visibility: default -->
<element name="TPoint.Y">
<short>Vertical position</short>
</element>

<!-- pointer type Visibility: default -->
<element name="PPoint">
<short>Pointer to <var>TPoint</var> type.</short>
<descr>
<var>PPoint</var> is a typed pointer to the <link id="TPoint"/> type.
</descr>
<seealso>
<link id="TPoint"/>
</seealso>
</element>

<!-- alias type Visibility: default -->
<element name="tagPOINT">
<short>Alias for <var>TPoint</var></short>
<descr>
<var>tagPOINT</var> is a simple alias for <link id="TPoint"/>
</descr>
<seealso>
<link id="TPoint"/>
</seealso>
</element>

<!-- record type Visibility: default -->
<element name="TRect">
<short>Rectangle in a plane</short>
<descr>
<var>TRect</var> defines a rectangle in a discrete plane. It is described by the
horizontal (<var>left</var>, <var>right</var>) or vertical
(<var>top</var>, <var>Bottom</var>) positions (in pixels) 
of the edges, or, alternatively, by the coordinates of the top left (<var>TopLeft</var>) and bottom right
(<var>BottomRight</var>) corners.
</descr>
<seealso>
<link id="TPoint"/>
<link id="TSize"/>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TRect.Left">
<short>Horizontal position of left edge</short>
</element>

<!-- variable Visibility: default -->
<element name="TRect.Top">
<short>Vertical position of top edge</short>
</element>

<!-- variable Visibility: default -->
<element name="TRect.Right">
<short>Horizontal position of right edge</short>
</element>

<!-- variable Visibility: default -->
<element name="TRect.Bottom">
<short>Vertical position of bottom edge</short>
</element>

<!-- variable Visibility: default -->
<element name="TRect.TopLeft">
<short>Position of top-left corner</short>
</element>

<!-- variable Visibility: default -->
<element name="TRect.BottomRight">
<short>Position of bottom-right corner</short>
</element>

<!-- pointer type Visibility: default -->
<element name="PRect">
<short>Pointer to <var>TRect</var> structure</short>
<descr>
<var>PRect</var> is a typed pointer to the <link id="TRect"/> type.
</descr>
<seealso>
<link id="TRect"/>
</seealso>
</element>

<!-- record type Visibility: default -->
<element name="TSize">
<short>Area size</short>
<descr>
<var>TSize</var> is a type to describe the size of a rectangular area, where
<var>cx</var> is the width, <var>cy</var> is the height (in pixels) of the rectangle.
</descr>
<seealso>
<link id="TRect"/>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TSize.cx">
<short>Width in pixels</short>
</element>

<!-- variable Visibility: default -->
<element name="TSize.cy">
<short>Height in pixels</short>
</element>

<!-- pointer type Visibility: default -->
<element name="PSize">
<short>Pointer to <var>TSize</var> type</short>
<descr>
<var>PSize</var> is a typed pointer to the <link id="TSize"/> type.
</descr>
<seealso>
</seealso>
</element>

<!-- alias type Visibility: default -->
<element name="tagSIZE">
<short>Alias for <var>TSize</var></short>
<descr>
<var>tagSize</var> is an alias for the <link id="TSize"/> type.
</descr>
<seealso>
<link id="TSize"/>
</seealso>
</element>

<!-- record type Visibility: default -->
<element name="TSmallPoint">
<short>Small point</short>
<descr>
<var>TSmallPoint</var> defines a point in a 2-dimensional plane, just like
<link id="TPoint"/>, but the coordinates have a smaller range: The
coordinates are smallints (16-bit, signed) and they run from
<var>-MaxSmallInt</var> to <var>maxSmallint</var>.
</descr>
<seealso>
<link id="TPoint"/>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TSmallPoint.x">
<short>Horizontal position in the plane.</short>
</element>

<!-- variable Visibility: default -->
<element name="TSmallPoint.y">
<short>Vertical position in the plane.</short>
</element>

<!-- pointer type Visibility: default -->
<element name="PSmallPoint">
<short>Pointer to <var>TSmallPoint</var> type</short>
<descr>
<var>PSmallPoint</var> is a typed pointer to the <link
id="TSmallPoint"/> record.
</descr>
<seealso>
<link id="TSmallPoint"/>
</seealso>
</element>

<!-- enumeration type Visibility: default -->
<element name="TDuplicates">
<short>Enumeration type, indicating what to do with duplicates in a list.</short>
<descr>
<p>
<var>TDuplicates</var> can be used to indicate how a list structure acts on
the addition of a duplicate item to the list.
</p>
<dl>
<dt>dupIgnore</dt><dd><printshort id="TDuplicates.dupIgnore"/></dd>
<dt>dupAccept</dt><dd><printshort id="TDuplicates.dupAccept"/></dd>
<dt>dupError</dt><dd><printshort id="TDuplicates.dupError"/></dd>
</dl>
</descr>
</element>

<!-- enumeration value Visibility: default -->
<element name="TDuplicates.dupIgnore">
<short>Ignore the new item, do not add it to the list.</short>
</element>

<!-- enumeration value Visibility: default -->
<element name="TDuplicates.dupAccept">
<short>Accept duplicates, adding them to the list.</short>
</element>

<!-- enumeration value Visibility: default -->
<element name="TDuplicates.dupError">
<short>Raise an error when an attempt is made to add a duplicate.</short>
</element>

<!-- alias type Visibility: default -->
<element name="TOleChar">
<short>Alias for the widechar type</short>
<descr>
<var>TOleChar</var> is an alias for the <var>WideChar</var> type, defined
in the system unit.
</descr>
<seealso>
<link id="POleStr"/>
</seealso>
</element>

<!-- alias type Visibility: default -->
<element name="POleStr">
<short>Pointer to <var>WideChar</var></short>
<descr>
<var>POleStr</var> is a pointer to a (double) null-terminated array of
<var>TOleChar</var> characters.
</descr>
<seealso>
<link id="TOleChar"/>
</seealso>
</element>

<!-- pointer type Visibility: default -->
<element name="PPOleStr">
<short>Pointer to <var>POleStr</var> type</short>
<descr>
<var>PPOleStr</var> is a typed pointer to a <var>POleStr</var> variable.
</descr>
<seealso>
<link id="POleStr"/>
</seealso>
</element>

<!-- procedure type Visibility: default -->
<element name="TListCallback">
<short>Method callback for list operations</short>
<descr>
<var>TListCallback</var> is the prototype for a <var>Foreach</var> operation
on a list. It will be called with as <var>Data</var> the pointer in the
list, and <var>Arg</var> will contain the extra user data added to the
<var>Foreach</var> call. It can be used in methods of objects; for a version
that can be used as a global procedure, see <link id="TListStaticCallback"/>
</descr>
<seealso>
<link id="TListStaticCallback"/>
</seealso>
</element>

<!-- procedure type Visibility: default -->
<element name="TListStaticCallback">
<short>Callback for list operations</short>
<descr>
<var>TListStaticCallback</var> is the prototype for a <var>Foreach</var> operation
on a list. It will be called with as <var>Data</var> the pointer in the
list, and <var>Arg</var> will contain the extra user data added to the 
<var>Foreach</var> call. It can be used in plain procedures; for a version
that can be used as a method, see <link id="TListCallback"/>
</descr>
<seealso>
<link id="TListCallback"/>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="GUID_NULL">
<short>Null GUID</short>
<descr>
<var>GUID_NULL</var> is the definition of the NULL (empty) GUID.
</descr>
</element>

<!-- constant Visibility: default -->
<element name="STGTY_STORAGE">
<short>Storage type - Storage</short>
<descr>
Defined for Delphi compatibility, this should not be used.
</descr>
</element>

<!-- constant Visibility: default -->
<element name="STGTY_STREAM">
<short>Storage type - stream</short>
<descr>
Defined for Delphi compatibility, this should not be used.
</descr>
</element>

<!-- constant Visibility: default -->
<element name="STGTY_LOCKBYTES">
<short>Storage type - byte array</short>
<descr>
Defined for Delphi compatibility, this should not be used.
</descr>
</element>

<!-- constant Visibility: default -->
<element name="STGTY_PROPERTY">
<short>Storage type - Property storage</short>
<descr>
Defined for Delphi compatibility, this should not be used.
</descr>
</element>

<!-- constant Visibility: default -->
<element name="STREAM_SEEK_SET">
<short>Storage Stream seek operation offset type : set absolute position</short>
<descr>
Defined for Delphi compatibility, this should not be used.
</descr>
</element>

<!-- constant Visibility: default -->
<element name="STREAM_SEEK_CUR">
<short>Storage Stream seek operation offset type : relative position</short>
<descr>
Defined for Delphi compatibility, this should not be used.
</descr>
</element>

<!-- constant Visibility: default -->
<element name="STREAM_SEEK_END">
<short>Storage Stream seek operation offset type : Position relative to end of stream</short>
<descr>
Defined for Delphi compatibility, this should not be used.
</descr>
</element>

<!-- constant Visibility: default -->
<element name="LOCK_WRITE">
<short>Storage Lock stream data: lock for writing operation</short>
<descr>
Defined for Delphi compatibility, this should not be used.
</descr>
</element>

<!-- constant Visibility: default -->
<element name="LOCK_EXCLUSIVE">
<short>Storage Lock stream data: lock exclusively for writing operation</short>
<descr>
Defined for Delphi compatibility, this should not be used.
</descr>
</element>

<!-- constant Visibility: default -->
<element name="LOCK_ONLYONCE">
<short>Storage Lock stream data: lock is granted only once</short>
<descr>
Defined for Delphi compatibility, this should not be used.
</descr>
</element>

<!-- constant Visibility: default -->
<element name="STATFLAG_DEFAULT">
<short>Storage Statistics should contain pwcsName structure</short>
<descr>
Defined for Delphi compatibility, this should not be used.
</descr>
</element>

<!-- constant Visibility: default -->
<element name="STATFLAG_NONAME">
<short>Storage Statistics must not contain pwcsName structure</short>
<descr>
Defined for Delphi compatibility, this should not be used.
</descr>
</element>

<!-- constant Visibility: default -->
<element name="STATFLAG_NOOPEN">
<short>Storage : Not implemented</short>
<descr>
Defined for Delphi compatibility, this should not be used.
</descr>
</element>

<!-- constant Visibility: default -->
<element name="E_FAIL">
<short>COM/RPC Error code : operation failed</short>
<descr>
Defined for Delphi compatibility, this should not be used.
</descr>
</element>

<!-- constant Visibility: default -->
<element name="E_INVALIDARG">
<short>COM/RPC Error code: Invalid arguments were specified.</short>
<descr>
Defined for Delphi compatibility, this should not be used.
</descr>
</element>

<!-- constant Visibility: default -->
<element name="STG_E_INVALIDFUNCTION">
<short>Storage COM/RPC Error code: An invalid operation was called.</short>
<descr>
Defined for Delphi compatibility, this should not be used.
</descr>
</element>

<!-- constant Visibility: default -->
<element name="STG_E_FILENOTFOUND">
<short>Storage COM/RPC Error code: the file could not be found</short>
<descr>
Defined for Delphi compatibility, this should not be used.
</descr>
</element>

<!-- constant Visibility: default -->
<element name="STG_E_PATHNOTFOUND">
<short>Storage COM/RPC Error code: the path could not be found</short>
<descr>
Defined for Delphi compatibility, this should not be used.
</descr>
</element>

<!-- constant Visibility: default -->
<element name="STG_E_TOOMANYOPENFILES">
<short>Storage COM/RPC Error code: too many open files.</short>
<descr>
Defined for Delphi compatibility, this should not be used.
</descr>
</element>

<!-- constant Visibility: default -->
<element name="STG_E_ACCESSDENIED">
<short>Storage COM/RPC Error code: access to specified resource is denied</short>
<descr>
Defined for Delphi compatibility, this should not be used.
</descr>
</element>

<!-- constant Visibility: default -->
<element name="STG_E_INVALIDHANDLE">
<short>Storage COM/RPC Error code: invalid object for operation</short>
<descr>
Defined for Delphi compatibility, this should not be used.
</descr>
</element>

<!-- constant Visibility: default -->
<element name="STG_E_INSUFFICIENTMEMORY">
<short>Storage COM/RPC Error code: not enough operation for the operation</short>
<descr>
Defined for Delphi compatibility, this should not be used.
</descr>
</element>

<!-- constant Visibility: default -->
<element name="STG_E_INVALIDPOINTER">
<short>Storage COM/RPC Error code: invalid pointer specified.</short>
<descr>
Defined for Delphi compatibility, this should not be used.
</descr>
</element>

<!-- constant Visibility: default -->
<element name="STG_E_NOMOREFILES">
<short>Storage COM/RPC Error code: no more objects to return.</short>
<descr>
Defined for Delphi compatibility, this should not be used.
</descr>
</element>

<!-- constant Visibility: default -->
<element name="STG_E_DISKISWRITEPROTECTED">
<short>Storage COM/RPC Error code: Disk is read-only</short>
<descr>
Defined for Delphi compatibility, this should not be used.
</descr>
</element>

<!-- constant Visibility: default -->
<element name="STG_E_SEEKERROR">
<short>Storage COM/RPC Error code: Error during seek operation</short>
<descr>
Defined for Delphi compatibility, this should not be used.
</descr>
</element>

<!-- constant Visibility: default -->
<element name="STG_E_WRITEFAULT">
<short>Storage COM/RPC Error code: Error during write operation</short>
<descr>
Defined for Delphi compatibility, this should not be used.
</descr>
</element>

<!-- constant Visibility: default -->
<element name="STG_E_READFAULT">
<short>Storage COM/RPC Error code: Error during read operation</short>
<descr>
Defined for Delphi compatibility, this should not be used.
</descr>
</element>

<!-- constant Visibility: default -->
<element name="STG_E_SHAREVIOLATION">
<short>Storage COM/RPC Error code: A sharing violation occurred</short>
<descr>
Defined for Delphi compatibility, this should not be used.
</descr>
</element>

<!-- constant Visibility: default -->
<element name="STG_E_LOCKVIOLATION">
<short>Storage COM/RPC Error code: A locking violation occurred</short>
<descr>
Defined for Delphi compatibility, this should not be used.
</descr>
</element>

<!-- constant Visibility: default -->
<element name="STG_E_FILEALREADYEXISTS">
<short>Storage COM/RPC Error code: the specified object already exists.</short>
<descr>
Defined for Delphi compatibility, this should not be used.
</descr>
</element>

<!-- constant Visibility: default -->
<element name="STG_E_INVALIDPARAMETER">
<short>Storage COM/RPC Error code: an invalid parameter was specified.</short>
<descr>
Defined for Delphi compatibility, this should not be used.
</descr>
</element>

<!-- constant Visibility: default -->
<element name="STG_E_MEDIUMFULL">
<short>Storage COM/RPC Error code: the medium was full.</short>
<descr>
Defined for Delphi compatibility, this should not be used.
</descr>
</element>

<!-- constant Visibility: default -->
<element name="STG_E_PROPSETMISMATCHED">
<short>Storage COM/RPC Error code: Attempt to write a complex property to a simple property storage</short>
<descr>
Defined for Delphi compatibility, this should not be used.
</descr>
</element>

<!-- constant Visibility: default -->
<element name="STG_E_ABNORMALAPIEXIT">
<short>Storage COM/RPC Error code: Abnormal exit of an API call.</short>
<descr>
Defined for Delphi compatibility, this should not be used.
</descr>
</element>

<!-- constant Visibility: default -->
<element name="STG_E_INVALIDHEADER">
<short>Storage COM/RPC Error code: Not a valid compound file</short>
<descr>
Defined for Delphi compatibility, this should not be used.
</descr>
</element>

<!-- constant Visibility: default -->
<element name="STG_E_INVALIDNAME">
<short>Storage COM/RPC Error code: Not a valid name</short>
<descr>
Defined for Delphi compatibility, this should not be used.
</descr>
</element>

<!-- constant Visibility: default -->
<element name="STG_E_UNKNOWN">
<short>Storage COM/RPC Error code: unknown error.</short>
<descr>
Defined for Delphi compatibility, this should not be used.
</descr>
</element>

<!-- constant Visibility: default -->
<element name="STG_E_UNIMPLEMENTEDFUNCTION">
<short>Storage COM/RPC Error code: unimplemnted function</short>
<descr>
Defined for Delphi compatibility, this should not be used.
</descr>
</element>

<!-- constant Visibility: default -->
<element name="STG_E_INVALIDFLAG">
<short>Storage COM/RPC Error code: invalid flag</short>
<descr>
Defined for Delphi compatibility, this should not be used.
</descr>
</element>

<!-- constant Visibility: default -->
<element name="STG_E_INUSE">
<short>Storage COM/RPC Error code: object is in use.</short>
<descr>
Defined for Delphi compatibility, this should not be used.
</descr>
</element>

<!-- constant Visibility: default -->
<element name="STG_E_NOTCURRENT">
<short>Storage COM/RPC Error code: contents changed by another user</short>
<descr>
Defined for Delphi compatibility, this should not be used.
</descr>
</element>

<!-- constant Visibility: default -->
<element name="STG_E_REVERTED">
<short>Storage COM/RPC Error code: object no longer exists</short>
<descr>
Defined for Delphi compatibility, this should not be used.
</descr>
</element>

<!-- constant Visibility: default -->
<element name="STG_E_CANTSAVE">
<short>Storage COM/RPC Error code: cannot save</short>
<descr>
Defined for Delphi compatibility, this should not be used.
</descr>
</element>

<!-- constant Visibility: default -->
<element name="STG_E_OLDFORMAT">
<short>Storage COM/RPC Error code: old compound file format</short>
<descr>
Defined for Delphi compatibility, this should not be used.
</descr>
</element>

<!-- constant Visibility: default -->
<element name="STG_E_OLDDLL">
<short>Storage COM/RPC Error code: old format of DLL</short>
<descr>
Defined for Delphi compatibility, this should not be used.
</descr>
</element>

<!-- constant Visibility: default -->
<element name="STG_E_SHAREREQUIRED">
<short>Storage COM/RPC Error code: share.exe required for this operation</short>
<descr>
Defined for Delphi compatibility, this should not be used.
</descr>
</element>

<!-- constant Visibility: default -->
<element name="STG_E_EXTANTMARSHALLINGS">
<short>Storage COM/RPC Error code: extant marshallings exist on object</short>
<descr>
Defined for Delphi compatibility, this should not be used.
</descr>
</element>

<!-- constant Visibility: default -->
<element name="STG_E_DOCFILECORRUPT">
<short>Storage COM/RPC Error code: Document file is corrupted</short>
<descr>
Defined for Delphi compatibility, this should not be used.
</descr>
</element>

<!-- constant Visibility: default -->
<element name="STG_E_BADBASEADDRESS">
<short>Storage COM/RPC Error code: wrong address for OLE32.</short>
<descr>
Defined for Delphi compatibility, this should not be used.
</descr>
</element>

<!-- constant Visibility: default -->
<element name="STG_E_INCOMPLETE">
<short>Storage COM/RPC Error code: download interrupted, resulting in incomplete file.</short>
<descr>
Defined for Delphi compatibility, this should not be used.
</descr>
</element>

<!-- constant Visibility: default -->
<element name="STG_E_TERMINATED">
<short>Storage COM/RPC Error code: download terminated.</short>
<descr>
Defined for Delphi compatibility, this should not be used.
</descr>
</element>

<!-- constant Visibility: default -->
<element name="STG_S_CONVERTED">
<short>Storage COM/RPC Error code: object was converted to compound file.</short>
<descr>
Defined for Delphi compatibility, this should not be used.
</descr>
</element>

<!-- constant Visibility: default -->
<element name="STG_S_BLOCK">
<short>Storage COM/RPC Error code: storage operation would block till more data comes available.</short>
<descr>
Defined for Delphi compatibility, this should not be used.
</descr>
</element>

<!-- constant Visibility: default -->
<element name="STG_S_RETRYNOW">
<short>Storage COM/RPC Error code: Retry operation</short>
<descr>
Defined for Delphi compatibility, this should not be used.
</descr>
</element>

<!-- constant Visibility: default -->
<element name="STG_S_MONITORING">
<short>Storage COM/RPC Error code: ?</short>
<descr>
Defined for Delphi compatibility, this should not be used.
</descr>
</element>

<!-- alias type Visibility: default -->
<element name="PCLSID">
<short>Pointer to <var>TCLSID</var> type</short>
<descr>
<var>PCLSID</var> is a pointer to a <var>TCLSID</var> type.
</descr>
<seealso>
<link id="TCLSID"/>
</seealso>
</element>

<!-- alias type Visibility: default -->
<element name="TCLSID">
<short>Class ID identifier (GUID)</short>
<descr>
<var>TCLSID</var> is an alias for the <link id="#rtl.system.TGUID"/> type.
</descr>
<seealso>
<link id="#rtl.system.TGUID"/>
</seealso>
</element>

<!-- pointer type Visibility: default -->
<element name="PDWord">
<short>Pointer to <var>DWord</var> type</short>
<descr>
<var>PDWord</var> is equivalent to the <var>PCardinal</var> type.
</descr>
<seealso>
<link id="DWord"/>
</seealso>
</element>

<!-- alias type Visibility: default -->
<element name="PDisplay">
<short>Untyped pointer type.</short>
<descr>
<var>PDisplay</var> is defined for Delphi/Kylix compatibility and should not be used.
</descr>
</element>

<!-- alias type Visibility: default -->
<element name="PEvent">
<short>Untyped pointer type.</short>
<descr>
<var>PEvent</var> is defined for Delphi/Kylix compatibility and should not be
used.
</descr>
</element>

<!-- record type Visibility: default -->
<element name="TXrmOptionDescRec">
<short>Opaque record type</short>
<descr>
<var>TXrmOptionDescRec</var> is defined for Delphi/Kylix compatibility and should not be       
used.    
</descr>
</element>

<!-- alias type Visibility: default -->
<element name="XrmOptionDescRec">
<short>Alias for <var>TXrmOptionDescRec</var></short>
<descr>
<var>XrmOptionDescRec</var> is defined for Delphi/Kylix compatibility and
should not be
used.    
</descr>
</element>

<!-- pointer type Visibility: default -->
<element name="PXrmOptionDescRec">
<short>Pointer to <var>TXrmOptionDescRec</var></short>
<descr>
<var>PXrmOptionDescRec</var> is defined for Delphi/Kylix compatibility and
should not be used.    
</descr>
</element>

<!-- alias type Visibility: default -->
<element name="Widget">
<short>Untyped pointer type</short>
<descr>
<var>Widget</var> is defined for Delphi/Kylix compatibility and
should not be used.    
</descr>
</element>

<!-- alias type Visibility: default -->
<element name="WidgetClass">
<short>Untyped pointer type</short>
<descr>
<var>WidgetClass</var> is defined for Delphi/Kylix compatibility and
should not be used.  
</descr>
</element>

<!-- alias type Visibility: default -->
<element name="ArgList">
<short>Untyped pointer type</short>
<descr>
<var>ArgList</var> is defined for Delphi/Kylix compatibility and
should not be used.
</descr>
</element>

<!-- alias type Visibility: default -->
<element name="Region">
<short>Untyped pointer type</short>
<descr>
<var>Region</var> is defined for Delphi/Kylix compatibility and
should not be used.
</descr>
</element>

<!-- record type Visibility: default -->
<element name="_FILETIME">
<short>Filetime record type</short>
<descr>
<var>_FILETIME</var> describes a file time stamp. It is defined or
Delphi/Kylix compatibility and should not be used except when implementing
or accessing the <var>IStream</var> interface. 
The <var>TDateTime</var> type should be used instead.
</descr>
<seealso>
<link id="IStream"/>
<link id="IStream.Stat"/>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="_FILETIME.dwLowDateTime">
<short>Lower dword of the file date/time</short>
</element>

<!-- variable Visibility: default -->
<element name="_FILETIME.dwHighDateTime">
<short>High dword of the file date/time</short>
</element>

<!-- alias type Visibility: default -->
<element name="TFileTime">
<short>Alias for the <var>_FILETIME</var> type</short>
</element>

<!-- alias type Visibility: default -->
<element name="FILETIME">
<short>Alias for the <var>_FILETIME</var> type</short>
</element>

<!-- pointer type Visibility: default -->
<element name="PFileTime">
<short>Pointer to <var>TFileTime</var> type</short>
</element>

<!-- record type Visibility: default -->
<element name="tagSTATSTG">
<short>Storage statistics type for <var>IStream</var> interface.</short>
<descr>
<var>tagSTATSTG</var> is used in the <link id="IStream.Stat"/> call. It
describes a storage medium (typically a file).
</descr>
<seealso>
<link id="IStream.Stat"/> 
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="tagSTATSTG.pwcsName">
<short>Name for the storage object. Typically the filename.</short>
</element>

<!-- variable Visibility: default -->
<element name="tagSTATSTG.dwType">
<short>Storage type</short>
</element>

<!-- variable Visibility: default -->
<element name="tagSTATSTG.cbSize">
<short>Storage size</short>
</element>

<!-- variable Visibility: default -->
<element name="tagSTATSTG.mtime">
<short>Modification time</short>
</element>

<!-- variable Visibility: default -->
<element name="tagSTATSTG.ctime">
<short>Creation time</short>
</element>

<!-- variable Visibility: default -->
<element name="tagSTATSTG.atime">
<short>Last access time</short>
</element>

<!-- variable Visibility: default -->
<element name="tagSTATSTG.grfMode">
<short>?</short>
</element>

<!-- variable Visibility: default -->
<element name="tagSTATSTG.grfLocksSupported">
<short>Locking operations supported by Storage type</short>
</element>

<!-- variable Visibility: default -->
<element name="tagSTATSTG.clsid">
<short>Class ID for the storage type</short>
</element>

<!-- variable Visibility: default -->
<element name="tagSTATSTG.grfStateBits">
<short>State bits</short>
</element>

<!-- variable Visibility: default -->
<element name="tagSTATSTG.reserved">
<short>Reserved bits</short>
</element>

<!-- alias type Visibility: default -->
<element name="TStatStg">
<short>Record describing storage medium.</short>
<descr>
<var>TStatStg</var> is a record type describing a storage medium. It is uses
in the <link id="IStream.Stat"/> function.
</descr>
<seealso>
<link id="IStream.Stat"/>
</seealso>
</element>

<!-- alias type Visibility: default -->
<element name="STATSTG">
<short>Alias for the <var>TStatStg</var> type.</short>
<descr>
</descr>
<seealso>
<link id="TStatStg"/>
</seealso>
</element>

<!-- pointer type Visibility: default -->
<element name="PStatStg">
<short>Pointer to <var>TStatStg</var> record.</short>
<seealso>
<link id="TStatStg"/>
</seealso>
</element>

<!-- interface Visibility: default -->
<element name="IClassFactory">
<short>Class defined for ActiveX compatibility.</short>
<descr>
<var>IClassFactory</var> is defined for Delphi/Kylix compatibility and
should not be used.
</descr>
</element>

<!-- function Visibility: default -->
<element name="IClassFactory.CreateInstance">
<short>Create a new instance of an interface.</short>
<descr>
<var>IClassFactory.CreateInstance</var> is defined for Delphi/Kylix compatibility and
should not be used.
</descr>
</element>

<!-- function Visibility: default -->
<element name="IClassFactory.LockServer">
<short>Lock ActiveX server object.</short>
<descr>
<var>IClassFactory.LocksServer</var> is defined for Delphi/Kylix
compatibility and should not be used.
</descr>
</element>

<!-- interface Visibility: default -->
<element name="ISequentialStream">
<short>Sequential stream object interface</short>
<descr>
<var>ISequentialStream</var> is the interface for streams which only support
sequential reading of chunks of data. It is defined for Delphi/Kylix
compatibility and should not be used.
</descr>
<seealso>
<link id="IStream"/>
</seealso>
</element>

<!-- function Visibility: default -->
<element name="ISequentialStream.Read">
<short>Read data from the stream</short>
<descr>
<var>Read</var> reads <var>cbCount</var> bytes from the stream into the
memory pointed to by <var>pv</var> and returns the number of bytes
read in <var>pcbread</var>. The result is zero for success or an error code.
</descr>
<seealso>
<link id="ISequentialStream.Write"/>
</seealso>
</element>

<!-- function Visibility: default -->
<element name="ISequentialStream.Write">
<short>Write data to the stream</short>
<descr>
<var>Write</var> writes <var>cbCount</var> bytes from the 
memory pointed to by <var>pv</var> to the stream and returns the number of bytes 
written in <var>pcbwritten</var>. The result is zero for success or an error code.
</descr>
<seealso>
<link id="ISequentialStream.Read"/>
</seealso>
</element>

<!-- interface Visibility: default -->
<element name="IStream">
<short>COM stream abstraction</short>
<descr>
An abstract interface for an external (non pascal) stream, as defined in
Microsoft COM interfaces
</descr>
<errors>
</errors>
<seealso>
</seealso>
</element>

<!-- function Visibility: default -->
<element name="IStream.Seek">
<short>Set the stream position</short>
<descr>
<var>Seek</var> sets the stream position at <var>dlibMove</var> bytes from
<var>dwOrigin</var> (one of the <var>SEEK_*</var> constants) and returns 
the new absolute position in <var>libNewPosition</var>. 
The function returns zero on success, or an error code.
</descr>
<errors>
On error, a nonzero exit code is returned.
</errors>
</element>

<!-- function Visibility: default -->
<element name="IStream.SetSize">
<short>Set the stream size</short>
<descr>
<var>SetSize</var> sets the size of the stream to <var>libNewSize</var>
bytes, if the stream allows it. On sucess, zero is returned.
</descr>
<errors>
On error, a nonzero exit code is returned.
</errors>
</element>

<!-- function Visibility: default -->
<element name="IStream.CopyTo">
<short>Copy data from one stream to another</short>
<descr>
<var>CopyTo</var> copies <var>cb</var> bytes  from the stream to target
stream <var>stm</var>. <var>cbRead</var> returns how many bytes were read
from the stream, <var>cbwrite</var> returns how many bytes were actually
written to the destination stream. The function returns zero on success.
</descr>
<errors>
On error, a nonzero exit code is returned.
</errors>
</element>

<!-- function Visibility: default -->
<element name="IStream.Commit">
<short>Commit data to the stream</short>
<descr>
<var>Commit</var> commits the data in the stream to the underlying medium.
Flags is a set of options to control the commit operation (see MSDN for the
possible flags).
</descr>
<errors>
On error, a nonzero exit code is returned.
</errors>
<seealso>
</seealso>
</element>

<!-- function Visibility: default -->
<element name="IStream.Revert">
<short>Revert changes</short>
<descr>
<var>Revert</var> reverts all changes that were done to a transacted
stream, i.e. all changes since the last commit. The function returns zero on
success.
</descr>
<errors>
On error, a nonzero exit code is returned.
</errors>
</element>

<!-- function Visibility: default -->
<element name="IStream.LockRegion">
<short>Lock a region of bytes in the stream</short>
<descr>
<var>LockRegion</var> locks a region of the storage, starting at
<var>libOffset</var>, for <var>cbCount</var> bytes. The applied lock is of
type <var>dwLockType</var>. The function returns zero if the lock was
succesfully applied.
</descr>
<errors>
On error, a nonzero exit code is returned.
</errors>
</element>

<!-- function Visibility: default -->
<element name="IStream.UnlockRegion">
<short>Unlocks a previously locked region of bytes in the stream</short>
<descr>
<var>UnlockRegion</var> removes the lock on a region of the storage, starting at
<var>libOffset</var>, for <var>cbCount</var> bytes. The lock must be of  
type <var>dwLockType</var>. The function returns zero if the lock was
succesfully removed.
</descr>
<errors>
On error, a nonzero exit code is returned.
</errors>
</element>

<!-- function Visibility: default -->
<element name="IStream.Stat">
<short>return information about the stream.</short>
<descr>
<var>Stat</var> returns information about the stream in <var>statstg</var>,
taking into account the flags in <var>grfStatFlag</var> (one of the
<var>STATFLAG_</var> constants). The function returns zero if the call was
successful.
</descr>
<errors>
On error, a nonzero exit code is returned.
</errors>
</element>

<!-- function Visibility: default -->
<element name="IStream.Clone">
<short>Clone the stream instance</short>
<descr>
<var>Clone</var> returns an independent but initially equal copy of the
stream in <var>stm</var>. The function returns zero if the call was
successful.
</descr>
<errors>
On error, a nonzero exit code is returned.
</errors>
</element>

<!-- function Visibility: default -->
<element name="EqualRect">
<short>Check if two rectangles are equal.</short>
<descr>
<var>EqualRect</var> returns <var>True</var> if the rectangles <var>R1</var>
and <var>R2</var> are equal (i.e. have the position and size). If the
rectangles differ, the function returns <var>False</var>
</descr>
<seealso>
<link id="Rect"/>
<link id="Bounds"/>
<link id="PtInRect"/>
<link id="IntersectRect"/>
<link id="UnionRect"/>
<link id="IsRectEmpty"/>
<link id="OffsetRect"/>
<link id="InflateRect"/>
<link id="Size"/>
</seealso>
</element>

<!-- function Visibility: default -->
<element name="Rect">
<short>Create a rectangle record</short>
<descr>
<var>Rect</var> returns a rectangle structure with the
4 members <var>Left</var>, <var>Top</var>, <var>Right</var> and 
<var>Bottom</var> as passed in the arguments.
</descr>
<seealso>
<link id="Bounds"/>
<link id="PtInRect"/>
<link id="IntersectRect"/>
<link id="UnionRect"/>
<link id="IsRectEmpty"/>
<link id="OffsetRect"/>
<link id="InflateRect"/>
<link id="Size"/>
</seealso>
</element>

<!-- function Visibility: default -->
<element name="Bounds">
<short>Create a rectangle, given a position and size</short>
<descr>
<var>Bounds</var> returns a <var>TRect</var> structure with the indicated
position (<var>Left=ALeft</var> and <var>Top=ATop</var>) and size 
(<var>Right=ALeft+AWidth</var> and <var>Bottom=ATop+AHeight</var>)
</descr>
<seealso>
<link id="Rect"/>
<link id="PtInRect"/>
<link id="IntersectRect"/>
<link id="UnionRect"/>
</seealso>
</element>

<!-- function Visibility: default -->
<element name="Point">
<short>Create a point</short>
<descr>
<var>Point</var> returns a <var>TPoint</var> structure with the given
position (<var>X, Y</var>).
</descr>
<seealso>
<link id="Rect"/>
<link id="PtInRect"/>
</seealso>
</element>

<!-- function Visibility: default -->
<element name="PtInRect">
<short>Check whether a point is inside a rectangle.</short>
<descr>
<p>
<var>PtInRect</var> returns <var>True</var> if <var>p</var> is located
inside <var>Rect</var>, and <var>False</var> if it is located outside the
rectangle.
</p>
<remark>
Note that the bottom, right edges are not considered
part of the rectangle, therefor a point located on one of these edges will
not be considered part of the rectangle, meaning that for a record
(10,10,100,100) the point (90,100) will not be considered part of the
record, but <var>90,10</var> will be.
</remark>
</descr>
<seealso>
<link id="IntersectRect"/>
<link id="UnionRect"/>
<link id="IsRectEmpty"/>
<link id="OffsetRect"/>
<link id="InflateRect"/>
<link id="Size"/>
</seealso>
</element>

<!-- function Visibility: default -->
<element name="IntersectRect">
<short>Return the intersection of 2 rectangles</short>
<descr>
<var>IntersectRect</var> returns the intersection of the 2 rectangles
<var>R1</var> and <var>R2</var> in <var>Rect</var>. It returns
<var>True</var> if the 2 rectangles have an intersection, otherwise
<var>False</var> is returned, and <var>Rect</var> is filled with zero.
</descr>
<seealso>
<link id="PtinRect"/>
<link id="UnionRect"/>  
<link id="IsRectEmpty"/>
<link id="OffsetRect"/> 
<link id="InflateRect"/>
<link id="Size"/>
</seealso>
</element>

<!-- function Visibility: default -->
<element name="UnionRect">
<short>Return the union of 2 rectangles.</short>
<descr>
<var>UnionRect</var> retuns the rectangle that encompasses both
<var>R1</var> and <var>R2</var> in <var>Rect</var>. It returns
<var>True</var> if the resulting rectangle is not empty, <var>False</var> if
the result is an empty rectangle (in which case the result is filled with
zeroes)
</descr>
<seealso>
<link id="PtinRect"/>      
<link id="IntersectRect"/>
<link id="IsRectEmpty"/>
<link id="OffsetRect"/>
<link id="InflateRect"/>
<link id="Size"/>
</seealso>
</element>

<!-- function Visibility: default -->
<element name="IsRectEmpty">
<short>Check whether a rectangle is empty</short>
<descr>
<var>IsRectEmpty</var> returns true if the rectangle is empty, i.e. has a
zero or negative width or height. 
</descr>
<seealso>
<link id="PtinRect"/>
<link id="IntersectRect"/>
<link id="IsRectEmpty"/>  
<link id="OffsetRect"/>   
<link id="InflateRect"/>  
<link id="Size"/>
</seealso>
</element>

<!-- function Visibility: default -->
<element name="OffsetRect">
<short>Offset the rectangle</short>
<descr>
<var>OffsetRect</var> offsets the rectangle <var>Rect</var> by a horizontal
distance <var>DX</var> and a vertical distance <var>DY</var>. The operation
returns <var>True</var> if the operation was successfull, <var>false</var>
if it was not (only possible if the address of <var>Rect</var> is
<var>Nil</var>).
</descr>
<seealso>
<link id="PtinRect"/>
<link id="IntersectRect"/>
<link id="IsRectEmpty"/>  
<link id="OffsetRect"/>   
<link id="InflateRect"/>  
<link id="Size"/>
<link id="IsRectEmpty"/>
</seealso>
</element>

<!-- function Visibility: default -->
<element name="CenterPoint">
<short>Return the center point of a rectangle</short>
<descr>
<var>CenterPoint</var> returns the center point of the rectangle
<var>Rect</var>. 
</descr>
<seealso>
<link id="PtinRect"/>
<link id="IntersectRect"/>
<link id="IsRectEmpty"/>  
<link id="OffsetRect"/>   
<link id="InflateRect"/>  
<link id="Size"/>
<link id="IsRectEmpty"/>
</seealso>
</element>


<!-- function Visibility: default -->
<element name="InflateRect">
<short>Increase the rectangle in size, keeping it centered</short>
<descr>
<var>InflateRect</var> inflates the rectangle horizontally with
<var>dx</var> pixels on each side, and vertically with <var>dy</var> pixels,
thus keeping its center point on the same location. It returns
<var>true</var> if the operation was succesfully, <var>False</var> if it was
not (only possible if the address of <var>Rect</var> is
<var>Nil</var>).
</descr>
<errors>
</errors>
<seealso>
<link id="PtinRect"/>
<link id="IntersectRect"/>
<link id="IsRectEmpty"/>
<link id="OffsetRect"/>   
<link id="CenterPoint"/>  
<link id="Size"/>
<link id="IsRectEmpty"/>

</seealso>
</element>

<!-- function Visibility: default -->
<element name="Size">
<short>Return the size of the rectangle</short>
<descr>
<var>Size</var> returns a <var>TSize</var> record with the indicated
<var>AWidth, AHeight</var>. In the case <var>ARect</var> is passed, the width
and height are calculated (taking into account that the right, bottom are
not considered part of the rectangle).
</descr>
<seealso>
<link id="PtinRect"/>
<link id="IntersectRect"/>
<link id="IsRectEmpty"/>  
<link id="OffsetRect"/>   
<link id="InflateRect"/>
<link id="CenterPoint"/>
<link id="IsRectEmpty"/>
</seealso>
</element>

</module> <!-- types -->

</package>
</fpdoc-descriptions>
