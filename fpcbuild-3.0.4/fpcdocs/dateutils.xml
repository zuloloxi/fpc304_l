<?xml version="1.0"?>
<fpdoc-descriptions>
<package name="rtl">
<!--
  ====================================================================
    dateutils
  ====================================================================
-->
<module name="dateutils">
<short>Date/Time manipulation routines.</short>
<descr>
<file>DateUtils</file> contains a large number of date/time manipulation
routines, all based on the <var>TDateTime</var> type. There are routines for
date/time math, for comparing dates and times, for composing dates and
decomposing dates in their constituent parts.
</descr>

<!-- unresolved type reference Visibility: default -->
<element name="SysUtils">
<short>Exception support</short>
</element>

<!-- unresolved type reference Visibility: default -->
<element name="Math">
<short>Math support</short>
</element>

<!-- unresolved type reference Visibility: default -->
<element name="Types">
<short>Basic types</short>
</element>

<!-- constant Visibility: default -->
<element name="DaysPerWeek">
<short>Number of days in a week.</short>
</element>

<!-- constant Visibility: default -->
<element name="WeeksPerFortnight">
<short>Number of weeks in fortnight</short>
</element>

<!-- constant Visibility: default -->
<element name="MonthsPerYear">
<short>Number of months in a year</short>
</element>

<!-- constant Visibility: default -->
<element name="YearsPerDecade">
<short>Number of years in a decade</short>
</element>

<!-- constant Visibility: default -->
<element name="YearsPerCentury">
<short>Number of years in a century</short>
</element>

<!-- constant Visibility: default -->
<element name="YearsPerMillennium">
<short>Number of years in a millenium</short>
</element>

<!-- constant Visibility: default -->
<element name="DayMonday">
<short>ISO day number for Monday</short>
</element>

<!-- constant Visibility: default -->
<element name="DayTuesday">
<short>ISO day number for Tuesday</short>
</element>

<!-- constant Visibility: default -->
<element name="DayWednesday">
<short>ISO day number for Wednesday</short>
</element>

<!-- constant Visibility: default -->
<element name="DayThursday">
<short>ISO day number for Thursday</short>
</element>

<!-- constant Visibility: default -->
<element name="DayFriday">
<short>ISO day number for Friday</short>
</element>

<!-- constant Visibility: default -->
<element name="DaySaturday">
<short>ISO day number for Saturday</short>
</element>

<!-- constant Visibility: default -->
<element name="DaySunday">
<short>ISO day number for Sunday</short>
</element>

<!-- constant Visibility: default -->
<element name="OneHour">
<short>One hour as a fraction of a day (suitable for TDateTime)</short>
</element>

<!-- constant Visibility: default -->
<element name="OneMinute">
<short>One minute as a fraction of a day (suitable for TDateTime)</short>
</element>

<!-- constant Visibility: default -->
<element name="OneSecond">
<short>One second as a fraction of a day (suitable for TDateTime)</short>
</element>

<!-- constant Visibility: default -->
<element name="OneMillisecond">
<short>One millisecond  as a fraction of a day (suitable for TDateTime)</short>
</element>

<!-- constant Visibility: default -->
<element name="DaysPerYear">
<short>Array with number of days in a year. The boolean index indicates whether it is a leap year or not.</short>
</element>

<!-- constant Visibility: default -->
<element name="RecodeLeaveFieldAsIs">
<short>Bitmask deciding what to do with each TDateTime field in recode routines</short>
</element>

<!-- constant Visibility: default -->
<element name="ApproxDaysPerMonth">
<short>Average number of days in a month, measured over a year. Used in <link id="MonthsBetween"/>.</short>
</element>

<!-- constant Visibility: default -->
<element name="ApproxDaysPerYear">
<short>Average number of days in a year, measured over 4 years. Used in <link id="YearsBetween"/>.</short>
</element>

<!-- function Visibility: default -->
<element name="DateOf">
<short>Extract the date part from a DateTime indication.</short>
<descr>
<p>
<var>DateOf</var> extracts the date part from <var>AValue</var> and returns
the result.
</p>
<p>
Since the <var>TDateTime</var> is actually a double with the date part
encoded in the integer part, this operation corresponds to a call to
<var>Trunc</var>.
</p>
</descr>
<seealso>
<link id="TimeOf"/>
<link id="YearOf"/>
<link id="MonthOf"/>
<link id="DayOf"/>
<link id="HourOf"/>
<link id="MinuteOf"/>
<link id="SecondOf"/>
<link id="MilliSecondOf"/>
</seealso>
<example file="datutex/ex1"/>
</element>

<!-- function result Visibility: default -->
<element name="DateOf.Result">
<short>Date part of <var>AValue</var>.</short>
</element>

<!-- argument Visibility: default -->
<element name="DateOf.AValue">
<short>Datetime to extract date from</short>
</element>

<!-- function Visibility: default -->
<element name="TimeOf">
<short>Extract the time part from a DateTime indication.</short>
<descr>
<p>
<var>TimeOf</var> extracts the time part from <var>AValue</var> and returns
the result.
</p>
<p>
Since the <var>TDateTime</var> is actually a double with the time part
encoded in the fractional part, this operation corresponds to a call to
<var>Frac</var>.
</p>
</descr>
<seealso>
<link id="DateOf"/>
<link id="YearOf"/>
<link id="MonthOf"/>
<link id="DayOf"/>
<link id="HourOf"/>
<link id="MinuteOf"/>
<link id="SecondOf"/>
<link id="MilliSecondOf"/>
</seealso>
<example file="datutex/ex2"/>
</element>

<!-- function result Visibility: default -->
<element name="TimeOf.Result">
<short>Time part of <var>AValue</var>.</short>
</element>

<!-- argument Visibility: default -->
<element name="TimeOf.AValue">
<short>Datetime to extract time from</short>
</element>

<!-- function Visibility: default -->
<element name="IsInLeapYear">
<short>Determine whether a date is in a leap year.</short>
<descr>
<var>IsInLeapYear</var> returns <var>True</var> if the year part of <var>AValue</var> 
is leap year, or <var>False</var> if not.
</descr>
<seealso>
<link id="YearOf"/>
<link id="IsPM"/>
<link id="IsToday"/>
<link id="IsSameDay"/>
</seealso>
<example file="datutex/ex3"/>
</element>

<!-- function result Visibility: default -->
<element name="IsInLeapYear.Result">
<short><var>True</var> if <var>AValue</var> is in a leap year, <var>False</var> if not.</short>
</element>

<!-- argument Visibility: default -->
<element name="IsInLeapYear.AValue">
<short>Date to be checked.</short>
</element>

<!-- function Visibility: default -->
<element name="IsPM">
<short>Determine whether a time is PM or AM.</short>
<descr>
<var>IsPM</var> returns <var>True</var> if the time part of
<var>AValue</var> is later then 12:00 (PM, or afternoon).
</descr>
<seealso>
<link id="YearOf"/>
<link id="IsInLeapYear"/>
<link id="IsToday"/>
<link id="IsSameDay"/>
</seealso>
<example file="datutex/ex4"/>
</element>

<!-- function result Visibility: default -->
<element name="IsPM.Result">
<short><var>True</var> if the time part of <var>AValue</var> is PM (afternoon).</short>
</element>

<!-- argument Visibility: default -->
<element name="IsPM.AValue">
<short>Time to check.</short>
</element>

<!-- function Visibility: default -->
<element name="IsValidDate">
<short>Check whether a set of values is a valid date indication.</short>
<descr>
<p>
<var>IsValidDate</var> returns <var>True</var> when the values <var>AYear</var>,
<var>AMonth</var>, <var>ADay</var> form a valid date indication. If one of
the values is not valid (e.g. the day is invalid or does not exist in that
particular month), <var>False</var> is returned.
</p>
<p>
<var>AYear</var> must be in the range 1..9999 to be valid.
</p>
</descr>
<example file="datutex/ex5"/>
<seealso>
<link id="IsValidTime"/>
<link id="IsValidDateTime"/>
<link id="IsValidDateDay"/>
<link id="IsValidDateWeek"/>
<link id="IsValidDateMonthWeek"/>
</seealso>
</element>

<!-- function result Visibility: default -->
<element name="IsValidDate.Result">
<short><var>True</var> if the given values form a valid date, <var>False</var> if not.</short>
</element>

<!-- argument Visibility: default -->
<element name="IsValidDate.AYear">
<short>Year value</short>
</element>

<!-- argument Visibility: default -->
<element name="IsValidDate.AMonth">
<short>Month in the year</short>
</element>

<!-- argument Visibility: default -->
<element name="IsValidDate.ADay">
<short>Day in the month</short>
</element>

<!-- function Visibility: default -->
<element name="IsValidTime">
<short>Check whether a set of values is a valid time indication.</short>
<descr/>
</element>

<!-- function result Visibility: default -->
<element name="IsValidTime.Result">
<short><var>True</var> if the given values form a valid time, <var>False</var> if not.</short>
<descr>
<var>IsValidTime</var> returns <var>True</var> when the values
<var>AHour</var>,
<var>AMinute</var>, <var>ASecond</var> and <var>AMilliSecond</var> form a valid
time indication. If one of the values is not valid (e.g. the seconds are
larger than 60), <var>False</var> is returned.
</descr>
<example file="datutex/ex6"/>
<seealso>
<link id="IsValidDate"/>
<link id="IsValidDateTime"/>
<link id="IsValidDateDay"/>
<link id="IsValidDateWeek"/>
<link id="IsValidDateMonthWeek"/>
</seealso>
</element>

<!-- argument Visibility: default -->
<element name="IsValidTime.AHour">
<short>Hour of the day.</short>
</element>

<!-- argument Visibility: default -->
<element name="IsValidTime.AMinute">
<short>Minute in the hour</short>
</element>

<!-- argument Visibility: default -->
<element name="IsValidTime.ASecond">
<short>Second in the minute</short>
</element>

<!-- argument Visibility: default -->
<element name="IsValidTime.AMilliSecond">
<short>Milliseconds in the second</short>
</element>

<!-- function Visibility: default -->
<element name="IsValidDateTime">
<short>Check whether a set of values is a valid date and time indication.</short>
<descr>
<p>
<var>IsValidTime</var> returns <var>True</var> when the values
<var>AYear</var>, <var>AMonth</var>, <var>ADay</var>,
<var>AHour</var>, <var>AMinute</var>, <var>ASecond</var> 
and <var>AMilliSecond</var> form a valid date and time indication. 
If one of the values is not valid (e.g. the seconds are larger than 60), <var>False</var> is returned.
</p>
<p>
<var>AYear</var> must be in the range 1..9999 to be valid.
</p>
</descr>
<example file="datutex/ex7"/>
<seealso>
<link id="IsValidDate"/>
<link id="IsValidTime"/>
<link id="IsValidDateDay"/>
<link id="IsValidDateWeek"/>
<link id="IsValidDateMonthWeek"/>
</seealso>
</element>

<!-- function result Visibility: default -->
<element name="IsValidDateTime.Result">
<short><var>True</var> if the given values form a valid date/time pair, <var>False</var> if not.</short>
</element>

<!-- argument Visibility: default -->
<element name="IsValidDateTime.AYear">
<short>Year value</short>
</element>

<!-- argument Visibility: default -->
<element name="IsValidDateTime.AMonth">
<short>Month in the year</short>
</element>

<!-- argument Visibility: default -->
<element name="IsValidDateTime.ADay">
<short>Day in the month</short>
</element>

<!-- argument Visibility: default -->
<element name="IsValidDateTime.AHour">
<short>Hour of the day</short>
</element>

<!-- argument Visibility: default -->
<element name="IsValidDateTime.AMinute">
<short>Minute in the hour</short>
</element>

<!-- argument Visibility: default -->
<element name="IsValidDateTime.ASecond">
<short>Second in the minute</short>
</element>

<!-- argument Visibility: default -->
<element name="IsValidDateTime.AMilliSecond">
<short>Milliseconds in the second</short>
</element>

<!-- function Visibility: default -->
<element name="IsValidDateDay">
<short>Check whether a given year/day of year combination is a valid date.</short>
<descr>
<p>
<var>IsValidDateDay</var> returns <var>True</var> if <var>AYear</var> and
<var>ADayOfYear</var> form a valid date indication, or <var>False</var>
otherwise.
</p>
<p>
<var>AYear</var> must be in the range 1..9999 to be valid.
</p>
<p>
The <var>ADayOfYear</var> value is checked to see whether it falls within the valid range of
dates for <var>AYear</var>.
</p>
</descr>
<example file="datutex/ex9"/>
<seealso>
<link id="IsValidDate"/>
<link id="IsValidTime"/>
<link id="IsValidDateTime"/>
<link id="IsValidDateWeek"/>
<link id="IsValidDateMonthWeek"/>
</seealso>
</element>

<!-- function result Visibility: default -->
<element name="IsValidDateDay.Result">
<short><var>True</var> if the given combination is a valid date, <var>False</var> otherwise.</short>
</element>

<!-- argument Visibility: default -->
<element name="IsValidDateDay.AYear">
<short>Year</short>
</element>

<!-- argument Visibility: default -->
<element name="IsValidDateDay.ADayOfYear">
<short>Day in the year</short>
</element>

<!-- function Visibility: default -->
<element name="IsValidDateWeek">
<short>Check whether a given year/week/day of the week combination is a valid day.</short>
<descr>
<p>
<var>IsValidDateWeek</var> returns <var>True</var> if <var>AYear</var>,
<var>AWeekOfYear</var> and <var>ADayOfWeek</var> form a valid date indication, 
or <var>False</var> otherwise.
</p>
<p>
<var>AYear</var> must be in the range 1..9999 to be valid.
</p>
<p>
The <var>ADayOfWeek</var>,<var>ADayOfWeek</var>  values are checked to see whether
the combination falls within the valid range of weeks for <var>AYear</var>.
</p>
</descr>
<example file="datutex/ex10"/>
<seealso>
<link id="IsValidDate"/>
<link id="IsValidTime"/>
<link id="IsValidDateTime"/>
<link id="IsValidDateDay"/>
<link id="IsValidDateMonthWeek"/>
</seealso>
</element>

<!-- function result Visibility: default -->
<element name="IsValidDateWeek.Result">
<short><var>True</var> if the given combination is a valid date, <var>False</var> otherwise.</short>
</element>

<!-- argument Visibility: default -->
<element name="IsValidDateWeek.AYear">
<short>Year</short>
</element>

<!-- argument Visibility: default -->
<element name="IsValidDateWeek.AWeekOfYear">
<short>Week in the year</short>
</element>

<!-- argument Visibility: default -->
<element name="IsValidDateWeek.ADayOfWeek">
<short>Day in the week</short>
</element>

<!-- function Visibility: default -->
<element name="IsValidDateMonthWeek">
<short>Check whether a given year/month/week/day of the week combination is a valid day</short>
<descr>
<p>
<var>IsValidDateMonthWeek</var> returns <var>True</var> if <var>AYear</var>,
<var>AMonth</var> <var>AWeekOfMonth</var> and <var>ADayOfWeek</var> form a valid date indication, 
or <var>False</var> otherwise.
</p>
<p>
<var>AYear</var> must be in the range 1..9999 to be valid.
</p>
<p>
The <var>AWeekOfMonth</var>,<var>ADayOfWeek</var>  values are checked to see whether
the combination falls within the valid range of weeks for the
<var>AYear</var>,<var>AMonth</var> combination.
</p>
</descr>
<example file="datutex/ex11"/>
<seealso>
<link id="IsValidDate"/>
<link id="IsValidTime"/>
<link id="IsValidDateTime"/>
<link id="IsValidDateDay"/>
<link id="IsValidDateWeek"/>
</seealso>
</element>

<!-- function result Visibility: default -->
<element name="IsValidDateMonthWeek.Result">
<short><var>True</var> if the given combination is a valid date, <var>False</var> otherwise.</short>
</element>

<!-- argument Visibility: default -->
<element name="IsValidDateMonthWeek.AYear">
<short>Year</short>
</element>

<!-- argument Visibility: default -->
<element name="IsValidDateMonthWeek.AMonth">
<short>Month of the year</short>
</element>

<!-- argument Visibility: default -->
<element name="IsValidDateMonthWeek.AWeekOfMonth">
<short>Week of the month.</short>
</element>

<!-- argument Visibility: default -->
<element name="IsValidDateMonthWeek.ADayOfWeek">
<short>Day in the week.</short>
</element>

<!-- function Visibility: default -->
<element name="WeeksInYear">
<short>return the number of weeks in the year, given a date</short>
<descr>
<p>
<var>WeeksInYear</var> returns the number of weeks in the year part of
<var>AValue</var>. The return value is either 52 or 53.
</p>
<remark>
The first week of the year is determined according to the ISO 8601 standard:
It is the first week that has at least 4 days in it, i.e. it includes a
thursday.
</remark>
</descr>
<seealso>
<link id="WeeksInAYear"/>
<link id="DaysInYear"/>
<link id="DaysInAYear"/>
<link id="DaysInMonth"/>
<link id="DaysInAMonth"/>
</seealso>
<example file="datutex/ex12"/>
</element>

<!-- function result Visibility: default -->
<element name="WeeksInYear.Result">
<short>Number of weeks.</short>
</element>

<!-- argument Visibility: default -->
<element name="WeeksInYear.AValue">
<short>Day in the year.</short>
</element>

<!-- function Visibility: default -->
<element name="WeeksInAYear">
<short>Return the number of weeks in a given year</short>
<descr>
<p>
<var>WeeksInAYear</var> returns the number of weeks in the year
<var>AYear</var>. The return value is either 52 or 53.
</p>
<remark>
The first week of the year is determined according to the ISO 8601 standard:
It is the first week that has at least 4 days in it, i.e. it includes a
thursday.
</remark>
</descr>
<seealso>
<link id="WeeksInYear"/>
<link id="DaysInYear"/>
<link id="DaysInAYear"/>
<link id="DaysInMonth"/>
<link id="DaysInAMonth"/>
</seealso>
<example file="datutex/ex13"/>
</element>

<!-- function result Visibility: default -->
<element name="WeeksInAYear.Result">
<short>Number of weeks in <var>AYear</var></short>
</element>

<!-- argument Visibility: default -->
<element name="WeeksInAYear.AYear">
<short>A (valid) year.</short>
</element>

<!-- function Visibility: default -->
<element name="DaysInYear">
<short>Return the number of days in the year in which a date occurs.</short>
<descr>
<p>
<var>daysInYear</var> returns the number of days in the year part of
<var>AValue</var>. The return value is either 365 or 366.
</p>
</descr>
<seealso>
<link id="WeeksInAYear"/>
<link id="WeeksInYear"/>
<link id="DaysInAYear"/>
<link id="DaysInMonth"/>
<link id="DaysInAMonth"/>
</seealso>
<example file="datutex/ex14"/>
</element>

<!-- function result Visibility: default -->
<element name="DaysInYear.Result">
<short>Number of days in the year in which <var>AValue</var>  occurs.</short>
</element>

<!-- argument Visibility: default -->
<element name="DaysInYear.AValue">
<short>Date in year of which to calculate the number of days.</short>
</element>

<!-- function Visibility: default -->
<element name="DaysInAYear">
<short>Number of days in a particular year.</short>
<descr>
<p>
<var>DaysInAYear</var> returns the number of weeks in the year 
<var>AYear</var>. The return value is either 365 or 366.
</p>
</descr>
<seealso>
<link id="WeeksInAYear"/>
<link id="WeeksInYear"/>
<link id="DaysInYear"/>
<link id="DaysInMonth"/>
<link id="DaysInAMonth"/>
</seealso>
<example file="datutex/ex15"/>
</element>

<!-- function result Visibility: default -->
<element name="DaysInAYear.Result">
<short>Number of days in year <var>AYear</var>.</short>
</element>

<!-- argument Visibility: default -->
<element name="DaysInAYear.AYear">
<short>Year to return the number of days from</short>
</element>

<!-- function Visibility: default -->
<element name="DaysInMonth">
<short>Return the number of days in the month in which a date occurs.</short>
<descr>
<p>
<var>DaysInMonth</var> returns the number of days in the month in which
<var>AValue</var> falls. The return value takes leap years into account.
</p>
</descr>
<seealso>
<link id="WeeksInAYear"/>
<link id="WeeksInYear"/>
<link id="DaysInYear"/>
<link id="DaysInAYear"/>
<link id="DaysInAMonth"/>
</seealso>
<example file="datutex/ex16"/>
</element>

<!-- function result Visibility: default -->
<element name="DaysInMonth.Result">
<short>Number of days in the month in which <var>AValue</var> occurs.</short>
</element>

<!-- argument Visibility: default -->
<element name="DaysInMonth.AValue">
<short>Date in month of which to calculate the number of days.</short>
</element>

<!-- function Visibility: default -->
<element name="DaysInAMonth">
<short>Number of days in a month of a certain year.</short>
<descr>
<p>
<var>DaysInYMonth</var> returns the number of days in the month
<var>AMonth</var> in the year<var>AYear</var>. 
The return value takes leap years into account.
</p>
</descr>
<seealso>
<link id="WeeksInAYear"/>
<link id="WeeksInYear"/>
<link id="DaysInYear"/>
<link id="DaysInAYear"/>
<link id="DaysInMonth"/>
</seealso>
<example file="datutex/ex17"/>
</element>

<!-- function result Visibility: default -->
<element name="DaysInAMonth.Result">
<short>The number of days in month <var>AMonth</var>, in year <var>AYear</var>.</short>
</element>

<!-- argument Visibility: default -->
<element name="DaysInAMonth.AYear">
<short>Year in which the month occurs.</short>
</element>

<!-- argument Visibility: default -->
<element name="DaysInAMonth.AMonth">
<short>Month of which the number of days should be returned.</short>
</element>

<!-- function Visibility: default -->
<element name="Today">
<short>Return the current date</short>
<descr>
<p>
<var>Today</var> is an alias for the <link
id="#rtl.sysutils.Date">Date</link> function in the <link
id="#rtl.sysutils">sysutils</link> unit.
</p>
<p>
For an example, see <link id="Yesterday"/>
</p>
</descr>
<seealso>
<link id="#rtl.sysutils.Date">Date</link>
<link id="Yesterday"/>
<link id="Tomorrow"/>
</seealso>
</element>

<!-- function result Visibility: default -->
<element name="Today.Result">
<short>Current day as <var>TDateTime</var>.</short>
</element>

<!-- function Visibility: default -->
<element name="Yesterday">
<short>Return the previous day.</short>
<descr>
<var>Yesterday</var> returns yesterday's date. Yesterday is determined from
the system clock, i.e. it is <link id="Today"/> -1.
</descr>
<seealso>
<link id="Today"/>
<link id="Tomorrow"/>
</seealso>
<example file="datutex/ex18"/>
</element>

<!-- function result Visibility: default -->
<element name="Yesterday.Result">
<short>Previous day as <var>TDateTime</var>.</short>
</element>

<!-- function Visibility: default -->
<element name="Tomorrow">
<short>Return the next day</short>
<descr>
<var>Tomorrow</var> returns tomorrow's date. Tomorrow is determined from
the system clock, i.e. it is <link id="Today"/> +1.
</descr>
<seealso>
<link id="Today"/>
<link id="Yesterday"/>
</seealso>
<example file="datutex/ex19"/>
</element>

<!-- function result Visibility: default -->
<element name="Tomorrow.Result">
<short>Next day as <var>TDateTime</var>.</short>
</element>

<!-- function Visibility: default -->
<element name="IsToday">
<short>Check whether a given date is today.</short>
<descr>
<var>IsToday</var> returns <var>True</var> if <var>AValue</var> is today's
date, and <var>False</var> otherwise.
</descr>
<seealso>
<link id="Today"/>
<link id="Yesterday"/>
<link id="Tomorrow"/>
<link id="IsSameDay"/>
</seealso>
<example file="datutex/ex20"/>
</element>

<!-- function result Visibility: default -->
<element name="IsToday.Result">
<short><var>True</var> if <var>AValue</var> is today, <var>False</var> otherwise.</short>
</element>

<!-- argument Visibility: default -->
<element name="IsToday.AValue">
<short>Date to check, may contain a time part.</short>
</element>

<!-- function Visibility: default -->
<element name="IsSameDay">
<short>Check if two date/time indications are the same day.</short>
<descr>
<var>IsSameDay</var> checks whether <var>AValue</var> and <var>ABasis</var>
have the same date part, and returns <var>True</var> if they do,
<var>False</var> if not.
</descr>
<seealso>
<link id="Today"/>
<link id="Yesterday"/>
<link id="Tomorrow"/>
<link id="IsToday"/>
</seealso>
<example file="datutex/ex21"/>
</element>

<!-- function result Visibility: default -->
<element name="IsSameDay.Result">
<short><var>True</var> if <var>AValue</var> and <var>ABasis</var> are on the same
day, <var>False</var> otherwise..</short>
</element>

<!-- argument Visibility: default -->
<element name="IsSameDay.AValue">
<short>First date/time</short>
</element>

<!-- argument Visibility: default -->
<element name="IsSameDay.ABasis">
<short>Second date/time</short>
</element>

<!-- function Visibility: default -->
<element name="PreviousDayOfWeek">
<short>Given a day of the week, return the previous day of the week.</short>
<descr>
<p>
<var>PreviousDayOfWeek</var> returns the previous day of the week. If the
current day is the first day of the week (1) then the last day will be
returned (7).
</p>
<remark>
Note that the days of the week are in ISO notation, i.e. 1-based.
</remark>
</descr>
<seealso>
<link id="Yesterday"/>
</seealso>
<example file="datutex/ex22"/>
</element>

<!-- function result Visibility: default -->
<element name="PreviousDayOfWeek.Result">
<short>The day of the week prior to <var>DayOfWeek</var></short>
</element>

<!-- argument Visibility: default -->
<element name="PreviousDayOfWeek.DayOfWeek">
<short>Day of the week.</short>
</element>

<!-- function Visibility: default -->
<element name="YearOf">
<short>Extract the year from a given date.</short>
<descr>
<var>YearOf</var> returns the year part of the <var>AValue</var> date/time
indication. It is a number between 1 and 9999.
</descr>
<seealso>
<link id="MonthOf"/>
<link id="DayOf"/>
<link id="WeekOf"/>
<link id="HourOf"/>
<link id="MinuteOf"/>
<link id="SecondOf"/>
<link id="MilliSecondOf"/>
</seealso>
<example file="datutex/ex23"/>
</element>

<!-- function result Visibility: default -->
<element name="YearOf.Result">
<short>Year part of <var>AValue</var></short>
<descr/>
</element>

<!-- argument Visibility: default -->
<element name="YearOf.AValue">
<short>Date to extract year from.</short>
</element>

<!-- function Visibility: default -->
<element name="MonthOf">
<short>Extract the month from a given date.</short>
<descr>
<p>
<var>MonthOf</var> returns the month part of the <var>AValue</var> date/time
indication. It is a number between 1 and 12.
</p>
<p>
For an example, see <link id="YearOf"/>
</p>
</descr>
<seealso>
<link id="YearOf"/>
<link id="DayOf"/>
<link id="WeekOf"/>
<link id="HourOf"/>
<link id="MinuteOf"/>
<link id="SecondOf"/>
<link id="MilliSecondOf"/>
</seealso>
</element>

<!-- function result Visibility: default -->
<element name="MonthOf.Result">
<short>Month part of <var>AValue</var></short>
</element>

<!-- argument Visibility: default -->
<element name="MonthOf.AValue">
<short>Date to extract month from.</short>
</element>

<!-- function Visibility: default -->
<element name="WeekOf">
<short>Extract week (of the year) from a given date.</short>
<descr>
<p>
<var>WeekOf</var> returns the week-of-the-year part of the <var>AValue</var> date/time
indication. It is a number between 1 and 53.
</p>
<p>
For an example, see <link id="YearOf"/>
</p>
</descr>
<seealso>
<link id="YearOf"/>
<link id="DayOf"/>
<link id="MonthOf"/>
<link id="HourOf"/>
<link id="MinuteOf"/>
<link id="SecondOf"/>
<link id="MilliSecondOf"/>
</seealso>
</element>

<!-- function result Visibility: default -->
<element name="WeekOf.Result">
<short>Week part of <var>AValue</var>.</short>
</element>

<!-- argument Visibility: default -->
<element name="WeekOf.AValue">
<short>Date to extract week from.</short>
</element>

<!-- function Visibility: default -->
<element name="DayOf">
<short>Extract the day (of month) part from a DateTime value</short>
<descr>
<p>
<var>DayOf</var> returns the day of the month part of the <var>AValue</var> date/time
indication. It is a number between 1 and 31.
</p>
<p>
For an example, see <link id="YearOf"/>
</p>
</descr>
<seealso>
<link id="YearOf"/>
<link id="WeekOf"/>
<link id="MonthOf"/>
<link id="HourOf"/>
<link id="MinuteOf"/>
<link id="SecondOf"/>
<link id="MilliSecondOf"/>
</seealso>
</element>

<!-- function result Visibility: default -->
<element name="DayOf.Result">
<short>Day of month part of <var>AValue</var>.</short>
</element>

<!-- argument Visibility: default -->
<element name="DayOf.AValue">
<short>Date to extract day of.</short>
</element>

<!-- function Visibility: default -->
<element name="HourOf">
<short>Extract the hour part from a DateTime value.</short>
<descr>
<p>
<var>HourOf</var> returns the hour of the day  part of the <var>AValue</var> date/time
indication. It is a number between 0 and 23.
</p>
<p>
For an example, see <link id="YearOf"/>
</p>
</descr>
<seealso>
<link id="YearOf"/>
<link id="WeekOf"/>
<link id="MonthOf"/>
<link id="DayOf"/>
<link id="MinuteOf"/>
<link id="SecondOf"/>
<link id="MilliSecondOf"/>
</seealso>
</element>

<!-- function result Visibility: default -->
<element name="HourOf.Result">
<short>Hour part of <var>AValue</var>.</short>
</element>

<!-- argument Visibility: default -->
<element name="HourOf.AValue">
<short>Date/time value to extract hour from.</short>
</element>

<!-- function Visibility: default -->
<element name="MinuteOf">
<short>Extract the minute part from a DateTime value.</short>
<descr>
<p>
<var>MinuteOf</var> returns the minute of the hour part of the <var>AValue</var> date/time
indication. It is a number between 0 and 59.
</p>
<p>
For an example, see <link id="YearOf"/>
</p>
</descr>
<seealso>
<link id="YearOf"/>
<link id="WeekOf"/>
<link id="MonthOf"/>
<link id="DayOf"/>
<link id="HourOf"/>
<link id="SecondOf"/>
<link id="MilliSecondOf"/>
</seealso>
</element>

<!-- function result Visibility: default -->
<element name="MinuteOf.Result">
<short>Minute part of <var>AValue</var>.</short>
</element>

<!-- argument Visibility: default -->
<element name="MinuteOf.AValue">
<short>Date/time value to extract minute from.</short>
</element>

<!-- function Visibility: default -->
<element name="SecondOf">
<short>Extract the second part from a DateTime value.</short>
<descr>
<p>
<var>SecondOf</var> returns the second of the minute part of the <var>AValue</var> date/time
indication. It is a number between 0 and 59.
</p>
<p>
For an example, see <link id="YearOf"/>
</p>
</descr>
<seealso>
<link id="YearOf"/>
<link id="WeekOf"/>
<link id="MonthOf"/>
<link id="DayOf"/>
<link id="HourOf"/>
<link id="MinuteOf"/>
<link id="MilliSecondOf"/>
</seealso>
</element>

<!-- function result Visibility: default -->
<element name="SecondOf.Result">
<short>Second part of <var>AValue</var>.</short>
</element>

<!-- argument Visibility: default -->
<element name="SecondOf.AValue">
<short>Date/time value to extract second from.</short>
</element>

<!-- function Visibility: default -->
<element name="MilliSecondOf">
<short>Extract the millisecond part from a DateTime value.</short>
<descr>
<p>
<var>MillisecondOf</var> returns the second of the minute part of the <var>AValue</var> date/time
indication. It is a number between 0 and 999.
</p>
<p>
For an example, see <link id="YearOf"/>
</p>
</descr>
<seealso>
<link id="YearOf"/>
<link id="WeekOf"/>
<link id="MonthOf"/>
<link id="DayOf"/>
<link id="HourOf"/>
<link id="MinuteOf"/>
<link id="MilliSecondOf"/>
</seealso>
</element>

<!-- function result Visibility: default -->
<element name="MilliSecondOf.Result">
<short>Millisecond part of <var>AValue</var>.</short>
</element>

<!-- argument Visibility: default -->
<element name="MilliSecondOf.AValue">
<short>Date/time value to extract millisecond from.</short>
</element>

<!-- function Visibility: default -->
<element name="StartOfTheYear">
<short>Return the first day of the year, given a date in this year.</short>
<descr>
<var>StartOfTheYear</var> extracts the year part of <var>AValue</var> and
returns   a <var>TDateTime</var> value with the date of the first day of that year (January 1), as the 
<link id="StartOfAYear"/> function.
</descr>
<seealso>
<link id="StartOfAYear"/>
<link id="EndOfTheYear"/>
<link id="EndOfAYear"/>
</seealso>
<example file="datutex/ex24"/>
</element>

<!-- function result Visibility: default -->
<element name="StartOfTheYear.Result">
<short>First day of the year as a <var>TDateTime</var> value.</short>
<descr/>
</element>

<!-- argument Visibility: default -->
<element name="StartOfTheYear.AValue">
<short>Date in year of which to return the start</short>
<descr/>
</element>

<!-- function Visibility: default -->
<element name="EndOfTheYear">
<short>Calculate a DateTime value representing the last day of a year, given a date in that year.</short>
<descr>
<var>EndOfTheYear</var> extracts the year part of <var>AValue</var> and
returns  a <var>TDateTime</var> value with the date of the last day of that year (December 31), as the 
<link id="EndOfAYear"/> function.
</descr>
<seealso>
<link id="StartOfAYear"/>
<link id="StartOfTheYear"/>
<link id="EndOfTheMonth"/>
<link id="EndOfAMonth"/>
<link id="StartOfAWeek"/>
<link id="StartOfTheWeek"/>
<link id="EndOfAYear"/>
</seealso>
<example file="datutex/ex25"/>
</element>

<!-- function result Visibility: default -->
<element name="EndOfTheYear.Result">
<short>DateTime value representing the end of the year in which <var>AValue</var> falls.</short>
</element>

<!-- argument Visibility: default -->
<element name="EndOfTheYear.AValue">
<short>Date in the year of which the end should be calculated</short>
</element>

<!-- function Visibility: default -->
<element name="StartOfAYear">
<short>Return the first day of a given year.</short>
<descr>
<var>StartOfAYear</var> returns a <var>TDateTime</var> value with the date of the first day of the year <var>AYear</var> (January 1).
</descr>
<seealso>
<link id="StartOfTheYear"/>
<link id="EndOfTheYear"/>
<link id="EndOfAYear"/>
<link id="EndOfTheMonth"/>
<link id="EndOfAMonth"/>
<link id="StartOfAWeek"/>
<link id="StartOfTheWeek"/>
</seealso>
<example file="datutex/ex26"/>
</element>

<!-- function result Visibility: default -->
<element name="StartOfAYear.Result">
<short>First day of <var>AYear</var> as a <var>TDateTime</var></short>
</element>

<!-- argument Visibility: default -->
<element name="StartOfAYear.AYear">
<short>Year to get first date from.</short>
</element>

<!-- function Visibility: default -->
<element name="EndOfAYear">
<short>Calculate a DateTime value representing the last day of a year</short>
<descr>
<var>StartOfAYear</var> 
returns a <var>TDateTime</var> value with the date of the last day of the year <var>AYear</var> (December 31).
</descr>
<seealso>
<link id="StartOfTheYear"/>
<link id="EndOfTheYear"/>
<link id="EndOfAYear"/>
<link id="EndOfTheMonth"/>
<link id="EndOfAMonth"/>
<link id="StartOfAWeek"/>
<link id="StartOfTheWeek"/>
</seealso>
<example file="datutex/ex27"/>
</element>

<!-- function result Visibility: default -->
<element name="EndOfAYear.Result">
<short>DateTime representing the last day of <var>AYear</var>.</short>
</element>

<!-- argument Visibility: default -->
<element name="EndOfAYear.AYear">
<short>Year to calculate last day from</short>
</element>

<!-- function Visibility: default -->
<element name="StartOfTheMonth">
<short>Calculate the first day of the month, given a date in that month.</short>
<descr>
<var>StartOfTheMonth</var> extracts the year and month parts of <var>AValue</var> and
returns  a <var>TDateTime</var> value with the date of the first day of that year
and month as the <link id="StartOfAMonth"/> function.
</descr>
<seealso>
<link id="StartOfAMonth"/>
<link id="EndOfTheYear"/>
<link id="EndOfAYear"/>
<link id="EndOfTheMonth"/>
<link id="EndOfAMonth"/>
<link id="StartOfAWeek"/>
<link id="StartOfTheWeek"/>
</seealso>
<example file="datutex/ex28"/>
</element>

<!-- function result Visibility: default -->
<element name="StartOfTheMonth.Result">
<short>First day of month as a <var>TDateTime</var> value.</short>
</element>

<!-- argument Visibility: default -->
<element name="StartOfTheMonth.AValue">
<short>Date to return first of month from</short>
</element>

<!-- function Visibility: default -->
<element name="EndOfTheMonth">
<short>Calculate a DateTime value representing the last day of the month, given a day in that month.</short>
<descr>
<var>EndOfTheMonth</var> extracts the year and month parts of <var>AValue</var> and
returns  a <var>TDateTime</var> value with the date of the first day of that year
and month as the <link id="EndOfAMonth"/> function.
</descr>
<seealso>
<link id="StartOfAMonth"/>
<link id="StartOfTheMonth"/>
<link id="EndOfAMonth"/>
<link id="EndOfTheYear"/>
<link id="EndOfAYear"/>
<link id="StartOfAWeek"/>
<link id="StartOfTheWeek"/>
</seealso>
<example file="datutex/ex29"/>
</element>

<!-- function result Visibility: default -->
<element name="EndOfTheMonth.Result">
<short>DateTime value representing the last day of the month in which <var>AVAlue</var> is a day.</short>
</element>

<!-- argument Visibility: default -->
<element name="EndOfTheMonth.AValue">
<short>Day in the month of which the last day should be returned.</short>
</element>

<!-- function Visibility: default -->
<element name="StartOfAMonth">
<short>Return first date of month, given a year/month pair.</short>
<descr>
<var>StartOfAMonth</var> e
returns  a <var>TDateTime</var> value with the date of the first day of the
month indicated by the <var>AYear</var>, <var>AMonth</var> pair.
</descr>
<seealso>
<link id="StartOfTheMonth"/>
<link id="EndOfTheMonth"/>
<link id="EndOfAMonth"/>
<link id="EndOfTheYear"/>
<link id="EndOfAYear"/>
<link id="StartOfAWeek"/>
<link id="StartOfTheWeek"/>
</seealso>
<example file="datutex/ex30"/>
</element>

<!-- function result Visibility: default -->
<element name="StartOfAMonth.Result">
<short>First day of the month <var>AMonth</var> in <var>AYear</var></short>
</element>

<!-- argument Visibility: default -->
<element name="StartOfAMonth.AYear">
<short>A year.</short>
</element>

<!-- argument Visibility: default -->
<element name="StartOfAMonth.AMonth">
<short>Month in the year.</short>
</element>

<!-- function Visibility: default -->
<element name="EndOfAMonth">
<short>Calculate a datetime value representing the last day of the indicated month</short>
<descr>
<var>EndOfAMonth</var> e
returns  a <var>TDateTime</var> value with the date of the last day of the
month indicated by the <var>AYear</var>, <var>AMonth</var> pair.
</descr>
<seealso>
<link id="StartOfTheMonth"/>
<link id="StartOfAMonth"/>
<link id="EndOfTheMonth"/>
<link id="EndOfTheYear"/>
<link id="EndOfAYear"/>
<link id="StartOfAWeek"/>
<link id="StartOfTheWeek"/>
</seealso>
<example file="datutex/ex31"/>
</element>

<!-- function result Visibility: default -->
<element name="EndOfAMonth.Result">
<short>DateTime value indicating the last day of <var>AMonth</var> in year <var>AYear</var>.</short>
</element>

<!-- argument Visibility: default -->
<element name="EndOfAMonth.AYear">
<short>Year in which month occurs</short>
</element>

<!-- argument Visibility: default -->
<element name="EndOfAMonth.AMonth">
<short>Month to calculate end of</short>
</element>

<!-- function Visibility: default -->
<element name="StartOfTheWeek">
<short>Return the first day of the week, given a date.</short>
<descr>
<var>StartOfTheWeek</var> extracts the year and week parts of <var>AValue</var> and
returns  a <var>TDateTime</var> value with the date of the first day of that
week as the <link id="StartOfAWeek"/> function.
</descr>
<seealso>
<link id="StartOfAWeek"/>
<link id="EndOfTheWeek"/>
<link id="EndOfAWeek"/>
<link id="StartOfAMonth"/>
<link id="EndOfTheYear"/>
<link id="EndOfAYear"/>
<link id="EndOfTheMonth"/>
<link id="EndOfAMonth"/>
</seealso>
<example file="datutex/ex32"/>
</element>

<!-- function result Visibility: default -->
<element name="StartOfTheWeek.Result">
<short>First day of the week, in <var>TDateTime</var> format.</short>
</element>

<!-- argument Visibility: default -->
<element name="StartOfTheWeek.AValue">
<short>Day in the week.</short>
</element>

<!-- function Visibility: default -->
<element name="EndOfTheWeek">
<short>Calculate a DateTime value which represents the end of a week, given a date in that week.</short>
<descr>
<var>EndOfTheWeek</var> extracts the year and week parts of <var>AValue</var> and
returns  a <var>TDateTime</var> value with the date of the last day of that
week as the <link id="EndOfAWeek"/> function.
</descr>
<seealso>
<link id="StartOfAWeek"/>
<link id="StartOfTheWeek"/>
<link id="EndOfAWeek"/>
<link id="StartOfAMonth"/>
<link id="EndOfTheYear"/>
<link id="EndOfAYear"/>
<link id="EndOfTheMonth"/>
<link id="EndOfAMonth"/>
</seealso>
<example file="datutex/ex33"/>
</element>

<!-- function result Visibility: default -->
<element name="EndOfTheWeek.Result">
<short>DateTime value representing the last day of the week in which <var>AVAlue</var> is a day.</short>
</element>

<!-- argument Visibility: default -->
<element name="EndOfTheWeek.AValue">
<short>Day in the week of which the last day should be calculated.</short>
</element>

<!-- function Visibility: default -->
<element name="StartOfAWeek">
<short>Return a day of the week, given a year, week and day in the week.</short>
<descr>
<p>
<var>StartOfAWeek</var> 
returns  a <var>TDateTime</var> value with the date of the indicated day of the
week indicated by the <var>AYear</var>, <var>AWeek</var>,
<var>ADayOfWeek</var> values.
</p>
<p>
The default value for <var>ADayOfWeek</var> is 1.
</p>
</descr>
<seealso>
<link id="StartOfTheWeek"/>
<link id="EndOfTheWeek"/>
<link id="EndOfAWeek"/>
<link id="StartOfAMonth"/>
<link id="EndOfTheYear"/>
<link id="EndOfAYear"/>
<link id="EndOfTheMonth"/>
<link id="EndOfAMonth"/>
</seealso>
<example file="datutex/ex34"/>
</element>

<!-- function result Visibility: default -->
<element name="StartOfAWeek.Result">
<short>First day of the given week, in <var>TDateTime</var> format.</short>
</element>

<!-- argument Visibility: default -->
<element name="StartOfAWeek.AYear">
<short>Year</short>
</element>

<!-- argument Visibility: default -->
<element name="StartOfAWeek.AWeekOfYear">
<short>Week in the year</short>
</element>

<!-- argument Visibility: default -->
<element name="StartOfAWeek.ADayOfWeek">
<short>Day in the week (default 1)</short>
</element>

<!-- function Visibility: default -->
<element name="EndOfAWeek">
<short>Return the last moment of day of the week, given a year and a week in the year.</short>
<descr>
<p>
<var>EndOfAWeek</var> returns  a <var>TDateTime</var> value with the date of the
last moment (23:59:59:999) on the indicated day of the week indicated by the 
<var>AYear</var>, <var>AWeek</var>, <var>ADayOfWeek</var> values.
</p>
<p>
The default value for <var>ADayOfWeek</var> is 7.
</p>
</descr>
<seealso>
<link id="StartOfTheWeek"/>
<link id="EndOfTheWeek"/>
<link id="EndOfAWeek"/>
<link id="StartOfAMonth"/>
<link id="EndOfTheYear"/>
<link id="EndOfAYear"/>
<link id="EndOfTheMonth"/>
<link id="EndOfAMonth"/>
</seealso>
<example file="datutex/ex35"/>
</element>

<!-- function result Visibility: default -->
<element name="EndOfAWeek.Result">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="EndOfAWeek.AYear">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="EndOfAWeek.AWeekOfYear">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="EndOfAWeek.ADayOfWeek">
<short>Day of the week</short>
</element>

<!-- function Visibility: default -->
<element name="StartOfTheDay">
<short>Calculate the start of the day as a DateTime value, given a moment in the day.</short>
<descr>
<p>
<var>StartOfTheDay</var> extracts the date part of <var>AValue</var> and
returns a <var>TDateTime</var> value with the date/time indication of 
the start (0:0:0.000) of this day.
</p>
</descr>
<seealso>
<link id="StartOfADay"/>
<link id="StartOfTheWeek"/>
<link id="StartOfAWeek"/>
<link id="StartOfAMonth"/>
<link id="StartOfTheMonth"/>
<link id="EndOfTheWeek"/>
<link id="EndOfAWeek"/>
<link id="EndOfTheYear"/>
<link id="EndOfAYear"/>
<link id="EndOfTheMonth"/>
<link id="EndOfAMonth"/>
<link id="EndOftheDay"/>
<link id="EndOfADay"/>
</seealso>
<example file="datutex/ex36"/>
</element>

<!-- function result Visibility: default -->
<element name="StartOfTheDay.Result">
<short>Start of the day (00:00) as DateTime value</short>
</element>

<!-- argument Visibility: default -->
<element name="StartOfTheDay.AValue">
<short>DateTime from which to calculate start of the day.</short>
</element>

<!-- function Visibility: default -->
<element name="EndOfTheDay">
<short>Calculate a datetime value that represents the end of a given day.</short>
<descr>
<p>
<var>EndOfTheDay</var> extracts the date part of <var>AValue</var> and
returns a <var>TDateTime</var> value with the date/time indication of 
the last moment (23:59:59.999) of this day.
</p>
</descr>
<seealso>
<link id="StartOftheDay"/>
<link id="StartOfADay"/>
<link id="StartOfTheWeek"/>
<link id="StartOfAWeek"/>
<link id="StartOfAMonth"/>
<link id="StartOfTheMonth"/>
<link id="EndOfTheWeek"/>
<link id="EndOfAWeek"/>
<link id="EndOfTheYear"/>
<link id="EndOfAYear"/>
<link id="EndOfTheMonth"/>
<link id="EndOfAMonth"/>
<link id="EndOfADay"/>
</seealso>
<example file="datutex/ex37"/>
</element>

<!-- function result Visibility: default -->
<element name="EndOfTheDay.Result">
<short>A datetime value representing the time 23:59:59.999 of the day <var>AValue</var>.</short>
</element>

<!-- argument Visibility: default -->
<element name="EndOfTheDay.AValue">
<short>Day to calculate the end of</short>
</element>

<!-- function Visibility: default -->
<element name="StartOfADay">
<short>Return the start of a day as a DateTime value, given a day indication</short>
<descr>
<p>
<var>StartOfADay</var> 
returns a <var>TDateTime</var> value with the date/time indication of 
the start (0:0:0.000) of the day given by <var>AYear</var>,
<var>AMonth</var>, <var>ADay</var>.
</p>
<p>
The day may also be indicated with a <var>AYear</var>, <var>ADayOfYear</var> pair.
</p>
</descr>
<seealso>
<link id="StartOfTheDay"/>
<link id="StartOfTheWeek"/>
<link id="StartOfAWeek"/>
<link id="StartOfAMonth"/>
<link id="StartOfTheMonth"/>
<link id="EndOfTheWeek"/>
<link id="EndOfAWeek"/>
<link id="EndOfTheYear"/>
<link id="EndOfAYear"/>
<link id="EndOfTheMonth"/>
<link id="EndOfAMonth"/>
<link id="EndOfTheDay"/>
<link id="EndOfADay"/>
</seealso>
<example file="datutex/ex38"/>
</element>

<!-- function result Visibility: default -->
<element name="StartOfADay.Result">
<short>Start of the given day as DateTime</short>
</element>

<!-- argument Visibility: default -->
<element name="StartOfADay.AYear">
<short>Year</short>
</element>

<!-- argument Visibility: default -->
<element name="StartOfADay.AMonth">
<short>Month in the year</short>
</element>

<!-- argument Visibility: default -->
<element name="StartOfADay.ADay">
<short>Day in the month.</short>
</element>

<!-- argument Visibility: default -->
<element name="StartOfADay.ADayOfYear">
<short>Day in the year.</short>
</element>

<!-- function Visibility: default -->
<element name="EndOfADay">
<short>Calculates a DateTime value representing the end of a specified day</short>
<descr>
<p>
<var>EndOfADay</var> 
returns a <var>TDateTime</var> value with the date/time indication of 
the last moment  (23:59:59.999) of the day given by <var>AYear</var>,
<var>AMonth</var>, <var>ADay</var>.
</p>
<p>
The day may also be indicated with a <var>AYear</var>, <var>ADayOfYear</var> pair.
</p>
</descr>
<seealso>
<link id="StartOfTheDay"/>
<link id="StartOfADay"/>
<link id="StartOfTheWeek"/>
<link id="StartOfAWeek"/>
<link id="StartOfAMonth"/>
<link id="StartOfTheMonth"/>
<link id="EndOfTheWeek"/>
<link id="EndOfAWeek"/>
<link id="EndOfTheYear"/>
<link id="EndOfAYear"/>
<link id="EndOfTheMonth"/>
<link id="EndOfAMonth"/>
<link id="EndOfTheDay"/>
</seealso>
<example file="datutex/ex39"/>
</element>

<!-- function result Visibility: default -->
<element name="EndOfADay.Result">
<short>A datetime value representing the time 23:59:59.999 of the given day.</short>
</element>

<!-- argument Visibility: default -->
<element name="EndOfADay.AYear">
<short>Year</short>
</element>

<!-- argument Visibility: default -->
<element name="EndOfADay.AMonth">
<short>Month in the year</short>
</element>

<!-- argument Visibility: default -->
<element name="EndOfADay.ADay">
<short>Day in the month</short>
</element>

<!-- argument Visibility: default -->
<element name="EndOfADay.ADayOfYear">
<short>Day of the year</short>
</element>

<!-- function Visibility: default -->
<element name="MonthOfTheYear">
<short>Extract the month of a DateTime indication.</short>
<descr>
<p>
<var>MonthOfTheYear</var> extracts the month part of <var>Avalue</var> and
returns it. It is an alias for <link id="MonthOf"/>, and is provided for
completeness only, corresponding to the other <var>PartOfTheYear</var> functions.
</p>
<p>
For an example, see the <link id="WeekOfTheYear"/> function.
</p>
</descr>
<seealso>
<link id="MonthOf"/>
<link id="WeekOfTheYear"/>
<link id="DayOfTheYear"/>
<link id="HourOfTheYear"/>
<link id="MinuteOfTheYear"/>
<link id="SecondOfTheYear"/>
<link id="MilliSecondOfTheYear"/>
</seealso>
</element>

<!-- function result Visibility: default -->
<element name="MonthOfTheYear.Result">
<short>The month part of <var>AValue</var></short>
</element>

<!-- argument Visibility: default -->
<element name="MonthOfTheYear.AValue">
<short>Date from which to extract month</short>
</element>

<!-- function Visibility: default -->
<element name="WeekOfTheYear">
<short>Extract the week of the year (and optionally year) of a DateTime indication.</short>
<descr>
<p>
<var>WeekOfTheYear</var> extracts the week of the year from <var>Avalue</var> and
returns it, and optionally returns the year as well. It returns the same value as <link id="WeekOf"/>.
</p>
<remark>
Note that weeks are numbered from 1 using the ISO 8601 standard, and the day of the week as well. 
This means that the year may not be the same as the year part of the date, since the week may
start in the previous year as the first week of the year is the week with at
least 4 days in it.
</remark>
</descr>
<seealso>
<link id="WeekOf"/>
<link id="MonthOfTheYear"/>
<link id="DayOfTheYear"/>
<link id="HourOfTheYear"/>
<link id="MinuteOfTheYear"/>
<link id="SecondOfTheYear"/>
<link id="MilliSecondOfTheYear"/>
</seealso>
<example file="datutex/ex40"/>
</element>

<!-- function result Visibility: default -->
<element name="WeekOfTheYear.Result">
<short>Week of the year in which <var>Avalue</var> falls.</short>
</element>

<!-- argument Visibility: default -->
<element name="WeekOfTheYear.AValue">
<short>Date from which to extract week.</short>
</element>


<!-- argument Visibility: default -->
<element name="WeekOfTheYear.AYear">
<short>Year part of <var>AValue</var></short>
</element>

<!-- function Visibility: default -->
<element name="DayOfTheYear">
<short>Extracts the day of the year from a <var>TDateTime</var> value</short>
<descr>
<p>
<var>DayOfTheYear</var> returns the number of days that have passed since
the start of the year till the moment indicated by
<var>AValue</var>. This is a one-based number, i.e. January 1 will
return 1.
</p>
<p>
For an example, see the <link id="WeekOfTheYear"/> function.
</p>
</descr>
<seealso>
<link id="WeekOfTheYear"/>
<link id="HourOfTheYear"/>
<link id="MinuteOfTheYear"/>
<link id="SecondOfTheYear"/>
<link id="MilliSecondOfTheYear"/>
</seealso>
</element>

<!-- function result Visibility: default -->
<element name="DayOfTheYear.Result">
<short>Day of the year from <var>AValue</var>.</short>
</element>

<!-- argument Visibility: default -->
<element name="DayOfTheYear.AValue">
<short>DateTime to extract the day of the year from.</short>
</element>

<!-- function Visibility: default -->
<element name="HourOfTheYear">
<short>Calculate the number of hours passed since the start of the year.</short>
<descr>
<p>
<var>HourOfTheYear</var> returns the number of hours that have passed since
the start of the year (January 1, 00:00:00) till the moment indicated by
<var>AValue</var>. This is a zero-based number, i.e. 
January 1 00:59:59 will return 0.
</p>
<p>
For an example, see the <link id="WeekOfTheYear"/> function.
</p>
</descr>
<seealso>
<link id="WeekOfTheYear"/>
<link id="DayOfTheYear"/>
<link id="MinuteOfTheYear"/>
<link id="SecondOfTheYear"/>
<link id="MilliSecondOfTheYear"/>
</seealso>
</element>

<!-- function result Visibility: default -->
<element name="HourOfTheYear.Result">
<short>Number of hours passed since the start of the year till <var>AValue</var> .</short>
</element>

<!-- argument Visibility: default -->
<element name="HourOfTheYear.AValue">
<short>DateTime value for which to calculate the hour of the year</short>
</element>

<!-- function Visibility: default -->
<element name="MinuteOfTheYear">
<short>Calculate the number of minutes elapsed since the start of the year</short>
<descr>
<p>
<var>MinuteOfTheYear</var> returns the number of minutes that have passed since
the start of the year (January 1, 00:00:00) till the moment indicated by
<var>AValue</var>. This is a zero-based number, i.e. 
January 1 00:00:59 will return 0.
</p>
<p>
For an example, see the <link id="WeekOfTheYear"/> function.
</p>
</descr>
<seealso>
<link id="WeekOfTheYear"/>
<link id="DayOfTheYear"/>
<link id="HourOfTheYear"/>
<link id="MinuteOfTheYear"/>
<link id="SecondOfTheYear"/>
<link id="MilliSecondOfTheYear"/>
</seealso>
</element>

<!-- function result Visibility: default -->
<element name="MinuteOfTheYear.Result">
<short>Number of minutes elapsed since the start of the year.</short>
</element>

<!-- argument Visibility: default -->
<element name="MinuteOfTheYear.AValue">
<short>Moment in the year.</short>
</element>

<!-- function Visibility: default -->
<element name="SecondOfTheYear">
<short>Calculate the number of seconds elapsed since the start of the year.</short>
<descr>
<p>
<var>SecondOfTheYear</var> returns the number of seconds that have passed since
the start of the year (January 1, 00:00:00) till the moment indicated by
<var>AValue</var>. This is a zero-based number, i.e. 
January 1 00:00:00.999 will return 0.
</p>
<p>
For an example, see the <link id="WeekOfTheYear"/> function.
</p>
</descr>
<seealso>
<link id="WeekOfTheYear"/>
<link id="DayOfTheYear"/>
<link id="HourOfTheYear"/>
<link id="MinuteOfTheYear"/>
<link id="SecondOfTheYear"/>
<link id="MilliSecondOfTheYear"/>
</seealso>
</element>

<!-- function result Visibility: default -->
<element name="SecondOfTheYear.Result">
<short>Number of seconds elapsed since the start of the year.</short>
</element>

<!-- argument Visibility: default -->
<element name="SecondOfTheYear.AValue">
<short>Moment in the year</short>
</element>

<!-- function Visibility: default -->
<element name="MilliSecondOfTheYear">
<short>Calculate the number of milliseconds elapsed since the start of the year.</short>
<descr>
<p>
<var>MilliSecondOfTheYear</var> returns the number of milliseconds that have passed since
the start of the year (January 1, 00:00:00.000) till the moment indicated by
<var>AValue</var>. This is a zero-based number, i.e. 
January 1 00:00:00.000 will return 0.
</p>
<p>
For an example, see the <link id="WeekOfTheYear"/> function.
</p>
</descr>
<seealso>
<link id="WeekOfTheYear"/>
<link id="DayOfTheYear"/>
<link id="HourOfTheYear"/>
<link id="MinuteOfTheYear"/>
<link id="SecondOfTheYear"/>
<link id="MilliSecondOfTheYear"/>
</seealso>
</element>

<!-- function result Visibility: default -->
<element name="MilliSecondOfTheYear.Result">
<short>Number of seconds elapsed since the start of the year.</short>
</element>

<!-- argument Visibility: default -->
<element name="MilliSecondOfTheYear.AValue">
<short>Moment in the year</short>
</element>

<!-- function Visibility: default -->
<element name="WeekOfTheMonth">
<short>Extract the week of the month (and optionally month and year) from a DateTime value</short>
<descr>
<p>
<var>WeekOfTheMonth</var> extracts the week of the month from <var>Avalue</var> and
returns it, and optionally returns the year and month as well (in
<var>AYear</var>, <var>AMonth</var> respectively). 
</p>
<remark>
Note that weeks are numbered from 1 using the ISO 8601 standard, and the day of the week as well. 
This means that the year and month may not be the same as the year part of the date, since the week may
start in the previous year as the first week of the year is the week with at least 4 days in it.
</remark>
</descr>
<seealso>
<link id="WeekOfTheYear"/>
<link id="DayOfTheMonth"/>
<link id="HourOfTheMonth"/>
<link id="MinuteOfTheMonth"/>
<link id="SecondOfTheMonth"/>
<link id="MilliSecondOfTheMonth"/>
</seealso>
<example file="datutex/ex41"/>
</element>

<!-- function result Visibility: default -->
<element name="WeekOfTheMonth.Result">
<short>Week of the month</short>
</element>

<!-- argument Visibility: default -->
<element name="WeekOfTheMonth.AValue">
<short>Datetime value of which to calculate the week, month and year.</short>
</element>

<!-- argument Visibility: default -->
<element name="WeekOfTheMonth.AYear">
<short>Year part of <var>AValue</var></short>
</element>

<!-- argument Visibility: default -->
<element name="WeekOfTheMonth.AMonth">
<short>Month part of <var>AValue</var></short>
</element>

<!-- function Visibility: default -->
<element name="DayOfTheMonth">
<short>Extract the day (of month) part of a DateTime value</short>
<descr>
<p>
<var>DayOfTheMonth</var> returns the number of days that have passed since
the start of the month till the moment indicated by
<var>AValue</var>. This is a one-based number, i.e. the first day of the
month will return 1.
</p>
<p>
For an example, see the <link id="WeekOfTheMonth"/> function.
</p>
</descr>
<seealso>
<link id="DayOfTheYear"/>
<link id="WeekOfTheMonth"/>
<link id="HourOfTheMonth"/>
<link id="MinuteOfTheMonth"/>
<link id="SecondOfTheMonth"/>
<link id="MilliSecondOfTheMonth"/>
</seealso>
</element>

<!-- function result Visibility: default -->
<element name="DayOfTheMonth.Result">
<short>Day in the month</short>
</element>

<!-- argument Visibility: default -->
<element name="DayOfTheMonth.AValue">
<short>Datetime value to extract day from.</short>
</element>

<!-- function Visibility: default -->
<element name="HourOfTheMonth">
<short>Calculate the number of hours passed since the start of the month.</short>
<descr>
<p>
<var>HourOfTheMonth</var> returns the number of hours that have passed since
the start of the month till the moment indicated by
<var>AValue</var>. This is a zero-based number, i.e. 
00:59:59 on the first day of the month will return 0.
</p>
<p>
For an example, see the <link id="WeekOfTheMonth"/> function.
</p>
</descr>
<seealso>
<link id="WeekOfTheMonth"/>
<link id="DayOfTheMonth"/>
<link id="MinuteOfTheMonth"/>
<link id="SecondOfTheMonth"/>
<link id="MilliSecondOfTheMonth"/>
</seealso>
</element>

<!-- function result Visibility: default -->
<element name="HourOfTheMonth.Result">
<short>Number of hours passed since the start of the month till <var>AValue</var>.</short>
</element>

<!-- argument Visibility: default -->
<element name="HourOfTheMonth.AValue">
<short>DateTime value for which to calculate the hour of the month.</short>
</element>

<!-- function Visibility: default -->
<element name="MinuteOfTheMonth">
<short>Calculate number of minutes elapsed since the start of the month.</short>
<descr>
<p>
<var>MinuteOfTheMonth</var> returns the number of minutes that have passed since
the start of the Month (00:00:00) till the moment indicated by
<var>AValue</var>. This is a zero-based number, i.e. 
00:00:59 on the first day of the month will return 0.
</p>
<p>
For an example, see the <link id="WeekOfTheMonth"/> function.
</p>
</descr>
<seealso>
<link id="WeekOfTheMonth"/>
<link id="DayOfTheMonth"/>
<link id="HourOfTheMonth"/>
<link id="MinuteOfTheMonth"/>
<link id="SecondOfTheMonth"/>
<link id="MilliSecondOfTheMonth"/>
</seealso>
</element>

<!-- function result Visibility: default -->
<element name="MinuteOfTheMonth.Result">
<short>Number of minutes elapsed since the start of the month.</short>
</element>

<!-- argument Visibility: default -->
<element name="MinuteOfTheMonth.AValue">
<short>Moment in the month.</short>
</element>

<!-- function Visibility: default -->
<element name="SecondOfTheMonth">
<short>Calculate number of seconds elapsed since the start of the month.</short>
<descr>
<p>
<var>SecondOfTheMonth</var> returns the number of seconds that have passed since
the start of the month (00:00:00) till the moment indicated by
<var>AValue</var>. This is a zero-based number, i.e. 
00:00:00.999 on the first day of the month will return 0.
</p>
<p>
For an example, see the <link id="WeekOfTheMonth"/> function.
</p>
</descr>
<seealso>
<link id="WeekOfTheMonth"/>
<link id="DayOfTheMonth"/>
<link id="HourOfTheMonth"/>
<link id="MinuteOfTheMonth"/>
<link id="MilliSecondOfTheMonth"/>
</seealso>
</element>

<!-- function result Visibility: default -->
<element name="SecondOfTheMonth.Result">
<short>Number of seconds elapsed since the start of the month.</short>
</element>

<!-- argument Visibility: default -->
<element name="SecondOfTheMonth.AValue">
<short>Moment in the month.</short>
</element>

<!-- function Visibility: default -->
<element name="MilliSecondOfTheMonth">
<short>Calculate number of milliseconds elapsed since the start of the month.</short>
<descr>
<p>
<var>MilliSecondOfTheMonth</var> returns the number of milliseconds that have passed since
the start of the month (00:00:00.000) till the moment indicated by
<var>AValue</var>. This is a zero-based number, i.e. 
00:00:00.000  on the first of the month will return 0.
</p>
<p>
For an example, see the <link id="WeekOfTheMonth"/> function.
</p>
</descr>
<seealso>
<link id="WeekOfTheMonth"/>
<link id="DayOfTheMonth"/>
<link id="HourOfTheMonth"/>
<link id="MinuteOfTheMonth"/>
<link id="SecondOfTheMonth"/>
<link id="MilliSecondOfTheMonth"/>
</seealso>
</element>

<!-- function result Visibility: default -->
<element name="MilliSecondOfTheMonth.Result">
<short>Number of milliseconds elapsed since the start of the month.</short>
</element>

<!-- argument Visibility: default -->
<element name="MilliSecondOfTheMonth.AValue">
<short>Moment in the month</short>
</element>

<!-- function Visibility: default -->
<element name="DayOfTheWeek">
<short>Extracts the day of the week from a DateTime value</short>
<descr>
<p>
<var>DayOfTheWeek</var> returns the number of days that have passed since
the start of the week till the moment indicated by
<var>AValue</var>. This is a one-based number, i.e. the first day of the
week will return 1.
</p>
</descr>
<seealso>
<link id="DayOfTheYear"/>
<link id="DayOfTheMonth"/>
<link id="HourOfTheWeek"/>
<link id="MinuteOfTheWeek"/>
<link id="SecondOfTheWeek"/>
<link id="MilliSecondOfTheWeek"/>
</seealso>
<example file="datutex/ex42"/>
</element>

<!-- function result Visibility: default -->
<element name="DayOfTheWeek.Result">
<short>Day of the week from <var>AValue</var>.</short>
</element>

<!-- argument Visibility: default -->
<element name="DayOfTheWeek.AValue">
<short>DateTime to extract the day of the week from.</short>
</element>

<!-- function Visibility: default -->
<element name="HourOfTheWeek">
<short>Calculate the number of hours elapsed since the start of the week.</short>
<descr>
<p>
<var>HourOfTheWeek</var> returns the number of hours that have passed since
the start of the Week till the moment indicated by
<var>AValue</var>. This is a zero-based number, i.e. 
00:59:59 on the first day of the week will return 0.
</p>
<p>
For an example, see the <link id="DayOfTheWeek"/> function.
</p>
</descr>
<seealso>
<link id="HourOfTheYear"/>
<link id="HourOfTheMonth"/>
<link id="HourOfTheDay"/>
<link id="DayOfTheWeek"/>
<link id="MinuteOfTheWeek"/>
<link id="SecondOfTheWeek"/>
<link id="MilliSecondOfTheWeek"/>
</seealso>
</element>

<!-- function result Visibility: default -->
<element name="HourOfTheWeek.Result">
<short>Number of hours elapsed since the start of the week till <var>AValue</var>.</short>
</element>

<!-- argument Visibility: default -->
<element name="HourOfTheWeek.AValue">
<short>DateTime value for which to calculate the hour of the week.</short>
</element>

<!-- function Visibility: default -->
<element name="MinuteOfTheWeek">
<short>Calculate the number of minutes elapsed since the start of the week</short>
<descr>
<p>
<var>MinuteOfTheWeek</var> returns the number of minutes that have passed since
the start of the week (00:00:00) till the moment indicated by
<var>AValue</var>. This is a zero-based number, i.e. 
00:00:59 on the first day of the week will return 0.
</p>
<p>
For an example, see the <link id="DayOfTheWeek"/> function.
</p>
</descr>
<seealso>
<link id="MinuteOfTheYear"/>
<link id="MinuteOfTheMonth"/>
<link id="MinuteOfTheDay"/>
<link id="MinuteOfTheHour"/>
<link id="DayOfTheWeek"/>
<link id="HourOfTheWeek"/>
<link id="SecondOfTheWeek"/>
<link id="MilliSecondOfTheWeek"/>
</seealso>
</element>

<!-- function result Visibility: default -->
<element name="MinuteOfTheWeek.Result">
<short>Number of seconds elapsed since the start of the week</short>
</element>

<!-- argument Visibility: default -->
<element name="MinuteOfTheWeek.AValue">
<short>Moment in the week.</short>
</element>


<element name="SecondOfTheWeek">
<short>Calculate the number of seconds elapsed since the start of the week</short>
<descr>
<p>
<var>SecondOfTheWeek</var> returns the number of seconds that have passed since
the start of the week (00:00:00) till the moment indicated by
<var>AValue</var>. This is a zero-based number, i.e. 
00:00:00.999 on the first day of the week will return 0.
</p>
<p>
For an example, see the <link id="DayOfTheWeek"/> function.
</p>
</descr>
<seealso>
<link id="SecondOfTheYear"/>
<link id="SecondOfTheMonth"/>
<link id="SecondOfTheDay"/>
<link id="SecondOfTheHour"/>
<link id="SecondOfTheMinute"/>
<link id="DayOfTheWeek"/>
<link id="HourOfTheWeek"/>
<link id="MinuteOfTheWeek"/>
<link id="MilliSecondOfTheWeek"/>
</seealso>
</element>

<!-- function result Visibility: default -->
<element name="SecondOfTheWeek.Result">
<short>Number of seconds elapsed since the start of the week</short>
</element>

<!-- argument Visibility: default -->
<element name="SecondOfTheWeek.AValue">
<short>Moment in the week</short>
</element>

<!-- function Visibility: default -->
<element name="MilliSecondOfTheWeek">
<short>Calculate the number of milliseconds elapsed since the start of the week</short>
<descr>
<p>
<var>MilliSecondOfTheWeek</var> returns the number of milliseconds that have passed since
the start of the Week (00:00:00.000) till the moment indicated by
<var>AValue</var>. This is a zero-based number, i.e. 
00:00:00.000  on the first of the Week will return 0.
</p>
<p>
For an example, see the <link id="DayOfTheWeek"/> function.
</p>
</descr>
<seealso>
<link id="MilliSecondOfTheYear"/>
<link id="MilliSecondOfTheMonth"/>
<link id="MilliSecondOfTheDay"/>
<link id="MilliSecondOfTheHour"/>
<link id="MilliSecondOfTheMinute"/>
<link id="MilliSecondOfTheSecond"/>
<link id="DayOfTheWeek"/>
<link id="HourOfTheWeek"/>
<link id="MinuteOfTheWeek"/>
<link id="SecondOfTheWeek"/>
</seealso>
</element>

<!-- function result Visibility: default -->
<element name="MilliSecondOfTheWeek.Result">
<short>Number of milliseconds passed since the start of the week.</short>
</element>

<!-- argument Visibility: default -->
<element name="MilliSecondOfTheWeek.AValue">
<short>Moment in the week to calculate milliseconds from.</short>
</element>

<!-- function Visibility: default -->
<element name="HourOfTheDay">
<short>Calculate the hour of a given DateTime value</short>
<descr>
<p>
<var>HourOfTheDay</var> returns the number of hours that have passed since
the start of the day till the moment indicated by
<var>AValue</var>. This is a zero-based number, i.e. 
00:59:59 will return 0.
</p>
</descr>
<seealso>
<link id="HourOfTheYear"/>
<link id="HourOfTheMonth"/>
<link id="HourOfTheWeek"/>
<link id="MinuteOfTheDay"/>
<link id="SecondOfTheDay"/>
<link id="MilliSecondOfTheDay"/>
</seealso>
<example file="datutex/ex43"/>
</element>

<!-- function result Visibility: default -->
<element name="HourOfTheDay.Result">
<short>Hour part of <var>AValue</var>.</short>
</element>

<!-- argument Visibility: default -->
<element name="HourOfTheDay.AValue">
<short>DateTime to calculate the hour of.</short>
</element>

<!-- function Visibility: default -->
<element name="MinuteOfTheDay">
<short>Calculate the number of minutes elapsed since the start of the day</short>
<descr>
<p>
<var>MinuteOfTheDay</var> returns the number of minutes that have passed since
the start of the Day (00:00:00) till the moment indicated by
<var>AValue</var>. This is a zero-based number, i.e. 
00:00:59 will return 0.
</p>
<p>
For an example, see the <link id="HourOfTheDay"/> function.
</p>
</descr>
<seealso>
<link id="MinuteOfTheYear"/>
<link id="MinuteOfTheMonth"/>
<link id="MinuteOfTheWeek"/>
<link id="MinuteOfTheHour"/>
<link id="HourOfTheDay"/>
<link id="SecondOfTheDay"/>
<link id="MilliSecondOfTheDay"/>
</seealso>
</element>

<!-- function result Visibility: default -->
<element name="MinuteOfTheDay.Result">
<short>Number of minutes elapsed since the start of the day</short>
</element>

<!-- argument Visibility: default -->
<element name="MinuteOfTheDay.AValue">
<short>Moment in the day</short>
</element>

<!-- function Visibility: default -->
<element name="SecondOfTheDay">
<short>Calculate the number of seconds elapsed since the start of the day</short>
<descr>
<p>
<var>SecondOfTheDay</var> returns the number of seconds that have passed since
the start of the Day (00:00:00) till the moment indicated by
<var>AValue</var>. This is a zero-based number, i.e. 
00:00:00.999 return 0.
</p>
<p>
For an example, see the <link id="HourOfTheDay"/> function.
</p>
</descr>
<seealso>
<link id="SecondOfTheYear"/>
<link id="SecondOfTheMonth"/>
<link id="SecondOfTheWeek"/>
<link id="SecondOfTheHour"/>
<link id="SecondOfTheMinute"/>
<link id="HourOfTheDay"/>
<link id="MinuteOfTheDay"/>
<link id="MilliSecondOfTheDay"/>
</seealso>
</element>

<!-- function result Visibility: default -->
<element name="SecondOfTheDay.Result">
<short>Number of seconds elapsed since the start of the day</short>
</element>

<!-- argument Visibility: default -->
<element name="SecondOfTheDay.AValue">
<short>Moment in the day</short>
</element>

<!-- function Visibility: default -->
<element name="MilliSecondOfTheDay">
<short>Calculate the number of milliseconds elapsed since the start of the day</short>
<descr>
<p>
<var>MilliSecondOfTheDay</var> returns the number of milliseconds that have passed since
the start of the Day (00:00:00.000) till the moment indicated by
<var>AValue</var>. This is a zero-based number, i.e. 
00:00:00.000 will return 0.
</p>
<p>
For an example, see the <link id="HourOfTheDay"/> function.
</p>
</descr>
<seealso>
<link id="MilliSecondOfTheYear"/>
<link id="MilliSecondOfTheMonth"/>
<link id="MilliSecondOfTheWeek"/>
<link id="MilliSecondOfTheHour"/>
<link id="MilliSecondOfTheMinute"/>
<link id="MilliSecondOfTheSecond"/>
<link id="HourOfTheDay"/>
<link id="MinuteOfTheDay"/>
<link id="SecondOfTheDay"/>
</seealso>
</element>

<!-- function result Visibility: default -->
<element name="MilliSecondOfTheDay.Result">
<short>Number of milliseconds elapsed since the start of the day</short>
</element>

<!-- argument Visibility: default -->
<element name="MilliSecondOfTheDay.AValue">
<short>Moment in the day</short>
</element>

<!-- function Visibility: default -->
<element name="MinuteOfTheHour">
<short>Calculate the number of minutes elapsed since the start of the hour</short>
<descr>
<p>
<var>MinuteOfTheHour</var> returns the number of minutes that have passed since
the start of the Hour (HH:00:00) till the moment indicated by
<var>AValue</var>. This is a zero-based number, i.e. 
HH:00:59 will return 0.
</p>
</descr>
<seealso>
<link id="MinuteOfTheYear"/>
<link id="MinuteOfTheMonth"/>
<link id="MinuteOfTheWeek"/>
<link id="MinuteOfTheDay"/>
<link id="SecondOfTheHour"/>
<link id="MilliSecondOfTheHour"/>
</seealso>
<example file="datutex/ex44"/>
</element>

<!-- function result Visibility: default -->
<element name="MinuteOfTheHour.Result">
<short>Number of minutes elapsed since the start of the hour</short>
</element>

<!-- argument Visibility: default -->
<element name="MinuteOfTheHour.AValue">
<short>Moment in the hour</short>
</element>

<!-- function Visibility: default -->
<element name="SecondOfTheHour">
<short>Calculate the number of seconds elapsed since the start of the hour</short>
<descr>
<p>
<var>SecondOfTheHour</var> returns the number of seconds that have passed since
the start of the Hour (HH:00:00) till the moment indicated by
<var>AValue</var>. This is a zero-based number, i.e. 
HH:00:00.999 return 0.
</p>
<p>
For an example, see the <link id="MinuteOfTheHour"/> function.
</p>
</descr>
<seealso>
<link id="SecondOfTheYear"/>
<link id="SecondOfTheMonth"/>
<link id="SecondOfTheWeek"/>
<link id="SecondOfTheDay"/>
<link id="SecondOfTheMinute"/>
<link id="MinuteOfTheHour"/>
<link id="MilliSecondOfTheHour"/>
</seealso>
</element>

<!-- function result Visibility: default -->
<element name="SecondOfTheHour.Result">
<short>Number of seconds elapsed since the start of the hour</short>
</element>

<!-- argument Visibility: default -->
<element name="SecondOfTheHour.AValue">
<short>Moment in the hour</short>
</element>

<!-- function Visibility: default -->
<element name="MilliSecondOfTheHour">
<short>Calculate the number of milliseconds elapsed since the start of the hour</short>
<descr>
<p>
<var>MilliSecondOfTheHour</var> returns the number of milliseconds that have passed since
the start of the Hour (HH:00:00.000) till the moment indicated by
<var>AValue</var>. This is a zero-based number, i.e. 
HH:00:00.000 will return 0.
</p>
<p>
For an example, see the <link id="MinuteOfTheHour"/> function.
</p>
</descr>
<seealso>
<link id="MilliSecondOfTheYear"/>
<link id="MilliSecondOfTheMonth"/>
<link id="MilliSecondOfTheWeek"/>
<link id="MilliSecondOfTheDay"/>
<link id="MilliSecondOfTheMinute"/>
<link id="MilliSecondOfTheSecond"/>
<link id="MinuteOfTheHour"/>
<link id="SecondOfTheHour"/>
</seealso>
</element>

<!-- function result Visibility: default -->
<element name="MilliSecondOfTheHour.Result">
<short>Number of milliseconds elapsed since the start of the hour</short>
</element>

<!-- argument Visibility: default -->
<element name="MilliSecondOfTheHour.AValue">
<short>Moment in the hour</short>
</element>

<!-- function Visibility: default -->
<element name="SecondOfTheMinute">
<short>Calculate the number of seconds elapsed since the start of the minute</short>
<descr>
<p>
<var>SecondOfTheMinute</var> returns the number of seconds that have passed since
the start of the minute (HH:MM:00) till the moment indicated by
<var>AValue</var>. This is a zero-based number, i.e. 
HH:MM:00.999 return 0.
</p>
</descr>
<seealso>
<link id="SecondOfTheYear"/>
<link id="SecondOfTheMonth"/>
<link id="SecondOfTheWeek"/>
<link id="SecondOfTheDay"/>
<link id="SecondOfTheHour"/>
<link id="MilliSecondOfTheMinute"/>
</seealso>
<example file="datutex/ex45"/>
</element>

<!-- function result Visibility: default -->
<element name="SecondOfTheMinute.Result">
<short>Number of seconds elapsed since the start of the minute</short>
</element>

<!-- argument Visibility: default -->
<element name="SecondOfTheMinute.AValue">
<short>Moment in the minute</short>
</element>

<!-- function Visibility: default -->
<element name="MilliSecondOfTheMinute">
<short>Calculate the number of milliseconds elapsed since the start of the minute</short>
<descr>
<p>
<var>MilliSecondOfTheMinute</var> returns the number of milliseconds that have passed since
the start of the Minute (HH:MM:00.000) till the moment indicated by
<var>AValue</var>. This is a zero-based number, i.e. 
HH:MM:00.000 will return 0.
</p>
<p>
For an example, see the <link id="SecondOfTheMinute"/> function.
</p>
</descr>
<seealso>
<link id="MilliSecondOfTheYear"/>
<link id="MilliSecondOfTheMonth"/>
<link id="MilliSecondOfTheWeek"/>
<link id="MilliSecondOfTheDay"/>
<link id="MilliSecondOfTheHour"/>
<link id="MilliSecondOfTheMinute"/>
<link id="MilliSecondOfTheSecond"/>
<link id="SecondOfTheMinute"/>
</seealso>
</element>

<!-- function result Visibility: default -->
<element name="MilliSecondOfTheMinute.Result">
<short>Number of milliseconds elapsed since the start of the minute</short>
</element>

<!-- argument Visibility: default -->
<element name="MilliSecondOfTheMinute.AValue">
<short>Moment in the minute</short>
</element>

<!-- function Visibility: default -->
<element name="MilliSecondOfTheSecond">
<short>Calculate the number of milliseconds elapsed since the start of the second</short>
<descr>
<p>
<var>MilliSecondOfTheSecond</var> returns the number of milliseconds that have passed since
the start of the second (HH:MM:SS.000) till the moment indicated by
<var>AValue</var>. This is a zero-based number, i.e. 
HH:MM:SS.000 will return 0.
</p>
</descr>
<seealso>
<link id="MilliSecondOfTheYear"/>
<link id="MilliSecondOfTheMonth"/>
<link id="MilliSecondOfTheWeek"/>
<link id="MilliSecondOfTheDay"/>
<link id="MilliSecondOfTheHour"/>
<link id="MilliSecondOfTheMinute"/>
<link id="SecondOfTheMinute"/>
</seealso>
<example file="datutex/ex46"/>
</element>

<!-- function result Visibility: default -->
<element name="MilliSecondOfTheSecond.Result">
<short>Number of milliseconds elapsed since the start of the second</short>
</element>

<!-- argument Visibility: default -->
<element name="MilliSecondOfTheSecond.AValue">
<short>Moment in the second</short>
</element>

<!-- function Visibility: default -->
<element name="WithinPastYears">
<short>Check whether two datetimes are only a number of years apart</short>
<descr>
<p>
<var>WithinPastYears</var> compares the timestamps <var>ANow</var> and <var>AThen</var> 
and returns <var>True</var> if the difference between them is at most
<var>AYears</var> years apart, or <var>False</var> if they are further
apart.
</p>
<remark>
Since this function uses the <link id="YearsBetween"/> function to calculate
the difference in years, this means that fractional years do not count, and
the fractional part is simply dropped, so for two dates actually 2 and a half
years apart, the result will also be <var>True</var>
</remark>
</descr>
<seealso>
<link id="WithinPastMonths"/>
<link id="WithinPastWeeks"/>
<link id="WithinPastDays"/>
<link id="WithinPastHours"/>
<link id="WithinPastMinutes"/>
<link id="WithinPastSeconds"/>
<link id="WithinPastMilliSeconds"/>
</seealso>
<example file="datutex/ex47"/>
</element>

<!-- function result Visibility: default -->
<element name="WithinPastYears.Result">
<short><var>True</var> if <var>ANow</var> and <var>Athen</var> are only <var>AYears</var> apart,
<var>false</var> otherwise</short>
</element>

<!-- argument Visibility: default -->
<element name="WithinPastYears.ANow">
<short>First moment in time</short>
</element>

<!-- argument Visibility: default -->
<element name="WithinPastYears.AThen">
<short>Second moment in time</short>
</element>

<!-- argument Visibility: default -->
<element name="WithinPastYears.AYears">
<short>Number of years to check</short>
</element>

<!-- function Visibility: default -->
<element name="WithinPastMonths">
<short>Check whether two datetimes are only a number of months apart</short>
<descr>
<p>
<var>WithinPastMonths</var> compares the timestamps <var>ANow</var> and <var>AThen</var> 
and returns <var>True</var> if the difference between them is at most
<var>AMonths</var> months apart, or <var>False</var> if they are further
apart.
</p>
<remark>
Since this function uses the <link id="MonthsBetween"/> function to calculate
the difference in Months, this means that fractional months do not count, and
the fractional part is simply dropped, so for two dates actually 2 and a half
months apart, the result will also be <var>True</var>
</remark>
</descr>
<seealso>
<link id="WithinPastYears"/>
<link id="WithinPastWeeks"/>
<link id="WithinPastDays"/>
<link id="WithinPastHours"/>
<link id="WithinPastMinutes"/>
<link id="WithinPastSeconds"/>
<link id="WithinPastMilliSeconds"/>
</seealso>
<example file="datutex/ex48"/>
</element>

<!-- function result Visibility: default -->
<element name="WithinPastMonths.Result">
<short><var>True</var> if <var>ANow</var> and <var>Athen</var> are only <var>AMonths</var> apart,
<var>false</var> otherwise</short>
</element>

<!-- argument Visibility: default -->
<element name="WithinPastMonths.ANow">
<short>First moment in time</short>
</element>

<!-- argument Visibility: default -->
<element name="WithinPastMonths.AThen">
<short>Second moment in time</short>
</element>

<!-- argument Visibility: default -->
<element name="WithinPastMonths.AMonths">
<short>Number of months to check</short>
</element>

<!-- function Visibility: default -->
<element name="WithinPastWeeks">
<short>Check whether two datetimes are only a number of weeks apart</short>
<descr>
<p>
<var>WithinPastWeeks</var> compares the timestamps <var>ANow</var> and <var>AThen</var> 
and returns <var>True</var> if the difference between them is at most
<var>AWeeks</var> weeks apart, or <var>False</var> if they are further
apart.
</p>
<remark>
Since this function uses the <link id="WeeksBetween"/> function to calculate
the difference in Weeks, this means that fractional Weeks do not count, and
the fractional part is simply dropped, so for two dates actually 2 and a half
weeks apart, the result will also be <var>True</var>
</remark>
</descr>
<seealso>
<link id="WithinPastYears"/>
<link id="WithinPastMonths"/>
<link id="WithinPastDays"/>
<link id="WithinPastHours"/>
<link id="WithinPastMinutes"/>
<link id="WithinPastSeconds"/>
<link id="WithinPastMilliSeconds"/>
</seealso>
<example file="datutex/ex49"/>
</element>

<!-- function result Visibility: default -->
<element name="WithinPastWeeks.Result">
<short><var>True</var> if <var>ANow</var> and <var>Athen</var> are only <var>AWeeks</var> apart,
<var>false</var> otherwise</short>
</element>

<!-- argument Visibility: default -->
<element name="WithinPastWeeks.ANow">
<short>First moment in time</short>
</element>

<!-- argument Visibility: default -->
<element name="WithinPastWeeks.AThen">
<short>Second moment in time</short>
</element>

<!-- argument Visibility: default -->
<element name="WithinPastWeeks.AWeeks">
<short>Number of weeks to check</short>
</element>

<!-- function Visibility: default -->
<element name="WithinPastDays">
<short>Check whether two datetimes are only a number of days apart</short>
<descr>
<p>
<var>WithinPastDays</var> compares the timestamps <var>ANow</var> and <var>AThen</var> 
and returns <var>True</var> if the difference between them is at most
<var>ADays</var> days apart, or <var>False</var> if they are further
apart.
</p>
<remark>
Since this function uses the <link id="DaysBetween"/> function to calculate
the difference in days, this means that fractional days do not count, and
the fractional part is simply dropped, so for two dates actually 2 and a half
days apart, the result will also be <var>True</var>
</remark>
</descr>
<seealso>
<link id="WithinPastYears"/>
<link id="WithinPastMonths"/>
<link id="WithinPastWeeks"/>
<link id="WithinPastHours"/>
<link id="WithinPastMinutes"/>
<link id="WithinPastSeconds"/>
<link id="WithinPastMilliSeconds"/>
</seealso>
<example file="datutex/ex50"/>
</element>

<!-- function result Visibility: default -->
<element name="WithinPastDays.Result">
<short><var>True</var> if <var>ANow</var> and <var>Athen</var> are only <var>ADays</var> apart,
<var>false</var> otherwise</short>
</element>

<!-- argument Visibility: default -->
<element name="WithinPastDays.ANow">
<short>First moment in time</short>
</element>

<!-- argument Visibility: default -->
<element name="WithinPastDays.AThen">
<short>Second moment in time</short>
</element>

<!-- argument Visibility: default -->
<element name="WithinPastDays.ADays">
<short>Number of days to check</short>
</element>

<!-- function Visibility: default -->
<element name="WithinPastHours">
<short>Check whether two datetimes are only a number of hours apart</short>
<descr>
<p>
<var>WithinPastHours</var> compares the timestamps <var>ANow</var> and <var>AThen</var> 
and returns <var>True</var> if the difference between them is at most
<var>AHours</var> hours apart, or <var>False</var> if they are further
apart.
</p>
<remark>
Since this function uses the <link id="HoursBetween"/> function to calculate
the difference in Hours, this means that fractional hours do not count, and
the fractional part is simply dropped, so for two dates actually 2 and a half
hours apart, the result will also be <var>True</var>
</remark>
</descr>
<seealso>
<link id="WithinPastYears"/>
<link id="WithinPastMonths"/>
<link id="WithinPastWeeks"/>
<link id="WithinPastDays"/>
<link id="WithinPastMinutes"/>
<link id="WithinPastSeconds"/>
<link id="WithinPastMilliSeconds"/>
</seealso>
<example file="datutex/ex51"/>
</element>

<!-- function result Visibility: default -->
<element name="WithinPastHours.Result">
<short><var>True</var> if <var>ANow</var> and <var>Athen</var> are only <var>AHours</var> apart,
<var>false</var> otherwise</short>
</element>

<!-- argument Visibility: default -->
<element name="WithinPastHours.ANow">
<short>First moment in time</short>
</element>

<!-- argument Visibility: default -->
<element name="WithinPastHours.AThen">
<short>Second moment in time</short>
</element>

<!-- argument Visibility: default -->
<element name="WithinPastHours.AHours">
<short>Number of hours to check</short>
</element>

<!-- function Visibility: default -->
<element name="WithinPastMinutes">
<short>Check whether two datetimes are only a number of minutes apart</short>
<descr>
<p>
<var>WithinPastMinutes</var> compares the timestamps <var>ANow</var> and <var>AThen</var> 
and returns <var>True</var> if the difference between them is at most
<var>AMinutes</var> minutes apart, or <var>False</var> if they are further
apart.
</p>
<remark>
Since this function uses the <link id="MinutesBetween"/> function to calculate
the difference in Minutes, this means that fractional minutes do not count, and
the fractional part is simply dropped, so for two dates actually 2 and a half
minutes apart, the result will also be <var>True</var>
</remark>
</descr>
<seealso>
<link id="WithinPastYears"/>
<link id="WithinPastMonths"/>
<link id="WithinPastWeeks"/>
<link id="WithinPastDays"/>
<link id="WithinPastHours"/>
<link id="WithinPastSeconds"/>
<link id="WithinPastMilliSeconds"/>
</seealso>
<example file="datutex/ex52"/>
</element>

<!-- function result Visibility: default -->
<element name="WithinPastMinutes.Result">
<short><var>True</var> if <var>ANow</var> and <var>Athen</var> are only <var>AMinutes</var> apart,
<var>false</var> otherwise</short>
</element>

<!-- argument Visibility: default -->
<element name="WithinPastMinutes.ANow">
<short>First moment in time</short>
</element>

<!-- argument Visibility: default -->
<element name="WithinPastMinutes.AThen">
<short>Second moment in time</short>
</element>

<!-- argument Visibility: default -->
<element name="WithinPastMinutes.AMinutes">
<short>Number of minutes to check</short>
</element>

<!-- function Visibility: default -->
<element name="WithinPastSeconds">
<short>Check whether two datetimes are only a number of seconds apart</short>
<descr>
<p>
<var>WithinPastSeconds</var> compares the timestamps <var>ANow</var> and <var>AThen</var> 
and returns <var>True</var> if the difference between them is at most
<var>ASeconds</var> seconds apart, or <var>False</var> if they are further
apart.
</p>
<remark>
Since this function uses the <link id="SecondsBetween"/> function to calculate
the difference in seconds, this means that fractional seconds do not count, and
the fractional part is simply dropped, so for two dates actually 2 and a half
seconds apart, the result will also be <var>True</var>
</remark>
</descr>
<seealso>
<link id="WithinPastYears"/>
<link id="WithinPastMonths"/>
<link id="WithinPastWeeks"/>
<link id="WithinPastDays"/>
<link id="WithinPastHours"/>
<link id="WithinPastMinutes"/>
<link id="WithinPastMilliSeconds"/>
</seealso>
<example file="datutex/ex53"/>
</element>

<!-- function result Visibility: default -->
<element name="WithinPastSeconds.Result">
<short><var>True</var> if <var>ANow</var> and <var>Athen</var> are only <var>ASeconds</var> apart,
<var>false</var> otherwise</short>
</element>

<!-- argument Visibility: default -->
<element name="WithinPastSeconds.ANow">
<short>First moment in time</short>
</element>

<!-- argument Visibility: default -->
<element name="WithinPastSeconds.AThen">
<short>Second moment in time</short>
</element>

<!-- argument Visibility: default -->
<element name="WithinPastSeconds.ASeconds">
<short>Number of seconds to check</short>
</element>

<!-- function Visibility: default -->
<element name="WithinPastMilliSeconds">
<short>Check whether two datetimes are only a number of milliseconds apart</short>
<descr>
<p>
<var>WithinPastMilliSeconds</var> compares the timestamps <var>ANow</var> and <var>AThen</var> 
and returns <var>True</var> if the difference between them is at most
<var>AMilliSeconds</var> milliseconds apart, or <var>False</var> if they are further
apart.
</p>
<remark>
Since this function uses the <link id="MilliSecondsBetween"/> function to calculate
the difference in milliseconds, this means that fractional milliseconds do not count, and
the fractional part is simply dropped, so for two dates actually 2 and a half
milliseconds apart, the result will also be <var>True</var>
</remark>
</descr>
<seealso>
<link id="WithinPastYears"/>
<link id="WithinPastMonths"/>
<link id="WithinPastWeeks"/>
<link id="WithinPastDays"/>
<link id="WithinPastHours"/>
<link id="WithinPastMinutes"/>
<link id="WithinPastSeconds"/>
</seealso>
<example file="datutex/ex54"/>
</element>

<!-- function result Visibility: default -->
<element name="WithinPastMilliSeconds.Result">
<short><var>True</var> if <var>ANow</var> and <var>Athen</var> are only <var>AMilliSeconds</var> apart,
<var>false</var> otherwise</short>
</element>

<!-- argument Visibility: default -->
<element name="WithinPastMilliSeconds.ANow">
<short>First moment in time</short>
</element>

<!-- argument Visibility: default -->
<element name="WithinPastMilliSeconds.AThen">
<short>Second moment in time</short>
</element>

<!-- argument Visibility: default -->
<element name="WithinPastMilliSeconds.AMilliSeconds">
<short>Number of milliseconds to check</short>
</element>

<!-- function Visibility: default -->
<element name="YearsBetween">
<short>Calculate the number of whole years between two DateTime values</short>
<descr>
<var>YearsBetween</var> returns the number of whole years between
<var>ANow</var> and <var>AThen</var>. This number is an approximation,
based on an average number of days of 365.25 per year (average over 4
years). This means the fractional part of a year is dropped.
</descr>
<seealso>
<link id="MonthsBetween"/>
<link id="WeeksBetween"/>
<link id="DaysBetween"/>
<link id="HoursBetween"/>
<link id="MinutesBetween"/>
<link id="SecondsBetween"/>
<link id="MilliSecondsBetween"/>
<link id="YearSpan"/>
</seealso>
<example file="datutex/ex55"/>
</element>

<!-- function result Visibility: default -->
<element name="YearsBetween.Result">
<short>Number of whole years between <var>ANow</var> and <var>AThen</var>.</short>
</element>

<!-- argument Visibility: default -->
<element name="YearsBetween.ANow">
<short>First moment in time</short>
</element>

<!-- argument Visibility: default -->
<element name="YearsBetween.AThen">
<short>Second moment in time</short>
</element>

<!-- function Visibility: default -->
<element name="MonthsBetween">
<short>Calculate the number of whole months between two DateTime values</short>
<descr>
<var>MonthsBetween</var> returns the number of whole months between
<var>ANow</var> and <var>AThen</var>. This number is an approximation,
based on an average number of days of 30.4375 per month (average over 4
years). This means the fractional part of a month is dropped.
</descr>
<seealso>
<link id="YearsBetween"/>
<link id="WeeksBetween"/>
<link id="DaysBetween"/>
<link id="HoursBetween"/>
<link id="MinutesBetween"/>
<link id="SecondsBetween"/>
<link id="MilliSecondsBetween"/>
</seealso>
<example file="datutex/ex56"/>
</element>

<!-- function result Visibility: default -->
<element name="MonthsBetween.Result">
<short>Number of whole months between <var>ANow</var> and <var>AThen</var>.</short>
</element>

<!-- argument Visibility: default -->
<element name="MonthsBetween.ANow">
<short>First moment in time</short>
</element>

<!-- argument Visibility: default -->
<element name="MonthsBetween.AThen">
<short>Second moment in time</short>
</element>

<!-- function Visibility: default -->
<element name="WeeksBetween">
<short>Calculate the number of whole weeks between two DateTime values</short>
<descr>
<var>WeeksBetween</var> returns the number of whole weeks between
<var>ANow</var> and <var>AThen</var>. 
This means the fractional part of a Week is dropped.
</descr>
<seealso>
<link id="YearsBetween"/>
<link id="MonthsBetween"/>
<link id="DaysBetween"/>
<link id="HoursBetween"/>
<link id="MinutesBetween"/>
<link id="SecondsBetween"/>
<link id="MilliSecondsBetween"/>
</seealso>
<example file="datutex/ex57"/>
</element>

<!-- function result Visibility: default -->
<element name="WeeksBetween.Result">
<short>Number of whole weeks between <var>ANow</var> and <var>AThen</var>.</short>
</element>

<!-- argument Visibility: default -->
<element name="WeeksBetween.ANow">
<short>First moment in time</short>
</element>

<!-- argument Visibility: default -->
<element name="WeeksBetween.AThen">
<short>Second moment in time</short>
</element>

<!-- function Visibility: default -->
<element name="DaysBetween">
<short>Number of whole days between two DateTime values.</short>
<descr>
<var>DaysBetween</var> returns the number of whole days between
<var>ANow</var> and <var>AThen</var>. 
This means the fractional part of a day (hours, minutes, etc.) is dropped.
</descr>
<seealso>
<link id="YearsBetween"/>
<link id="MonthsBetween"/>
<link id="WeeksBetween"/>
<link id="HoursBetween"/>
<link id="MinutesBetween"/>
<link id="SecondsBetween"/>
<link id="MilliSecondsBetween"/>
</seealso>
<example file="datutex/ex58"/>
</element>

<!-- function result Visibility: default -->
<element name="DaysBetween.Result">
<short>Number of whole days between <var>ANow</var> and <var>AThen</var>.</short>
</element>

<!-- argument Visibility: default -->
<element name="DaysBetween.ANow">
<short>First date</short>
</element>

<!-- argument Visibility: default -->
<element name="DaysBetween.AThen">
<short>Second date</short>
</element>

<!-- function Visibility: default -->
<element name="HoursBetween">
<short>Calculate the number of whole hours between two DateTime values.</short>
<descr>
<var>HoursBetween</var> returns the number of whole hours between
<var>ANow</var> and <var>AThen</var>. 
This means the fractional part of an hour (minutes,seconds etc.) is dropped.
</descr>
<seealso>
<link id="YearsBetween"/>
<link id="MonthsBetween"/>
<link id="WeeksBetween"/>
<link id="DaysBetween"/>
<link id="MinutesBetween"/>
<link id="SecondsBetween"/>
<link id="MilliSecondsBetween"/>
</seealso>
<example file="datutex/ex59"/>
</element>

<!-- function result Visibility: default -->
<element name="HoursBetween.Result">
<short>Number of hours between <var>ANow</var> and <var>AThen</var></short>
</element>

<!-- argument Visibility: default -->
<element name="HoursBetween.ANow">
<short>First DateTime value</short>
</element>

<!-- argument Visibility: default -->
<element name="HoursBetween.AThen">
<short>Second DateTime value</short>
</element>

<!-- function Visibility: default -->
<element name="MinutesBetween">
<short>Calculate the number of whole minutes between two DateTime values.</short>
<descr>
<var>MinutesBetween</var> returns the number of whole minutes between
<var>ANow</var> and <var>AThen</var>. 
This means the fractional part of a minute (seconds, milliseconds etc.) is dropped.
</descr>
<seealso>
<link id="YearsBetween"/>
<link id="MonthsBetween"/>
<link id="WeeksBetween"/>
<link id="DaysBetween"/>
<link id="HoursBetween"/>
<link id="SecondsBetween"/>
<link id="MilliSecondsBetween"/>
</seealso>
<example file="datutex/ex60"/>
</element>

<!-- function result Visibility: default -->
<element name="MinutesBetween.Result">
<short>Number of minutes between <var>ANow</var> and <var>AThen</var></short>
</element>

<!-- argument Visibility: default -->
<element name="MinutesBetween.ANow">
<short>First moment in time</short>
</element>

<!-- argument Visibility: default -->
<element name="MinutesBetween.AThen">
<short>Second moment in time</short>
</element>

<!-- function Visibility: default -->
<element name="SecondsBetween">
<short>Calculate the number of whole seconds between two DateTime values.</short>
<descr>
<var>SecondsBetween</var> returns the number of whole seconds between
<var>ANow</var> and <var>AThen</var>. 
This means the fractional part of a second (milliseconds etc.) is dropped.
</descr>
<seealso>
<link id="YearsBetween"/>
<link id="MonthsBetween"/>
<link id="WeeksBetween"/>
<link id="DaysBetween"/>
<link id="HoursBetween"/>
<link id="MinutesBetween"/>
<link id="MilliSecondsBetween"/>
</seealso>
<example file="datutex/ex61"/>
</element>

<!-- function result Visibility: default -->
<element name="SecondsBetween.Result">
<short>Number of seconds between <var>ANow</var> and <var>AThen</var></short>
</element>

<!-- argument Visibility: default -->
<element name="SecondsBetween.ANow">
<short>First moment in time</short>
</element>

<!-- argument Visibility: default -->
<element name="SecondsBetween.AThen">
<short>Second moment in time</short>
</element>

<!-- function Visibility: default -->
<element name="MilliSecondsBetween">
<short>Calculate the number of whole milliseconds between two DateTime values.</short>
<descr>
<var>MillisSecondsBetween</var> returns the number of whole milliseconds between
<var>ANow</var> and <var>AThen</var>. 
This means a fractional part of a millisecond is dropped.
</descr>
<seealso>
<link id="YearsBetween"/>
<link id="MonthsBetween"/>
<link id="WeeksBetween"/>
<link id="DaysBetween"/>
<link id="HoursBetween"/>
<link id="MinutesBetween"/>
<link id="SecondsBetween"/>
</seealso>
<example file="datutex/ex62"/>
</element>

<!-- function result Visibility: default -->
<element name="MilliSecondsBetween.Result">
<short>Number of milliseconds between <var>ANow</var> and <var>AThen</var></short>
</element>

<!-- argument Visibility: default -->
<element name="MilliSecondsBetween.ANow">
<short>First moment in time</short>
</element>

<!-- argument Visibility: default -->
<element name="MilliSecondsBetween.AThen">
<short>Second moment in time</short>
</element>

<!-- function Visibility: default -->
<element name="YearSpan">
<short>Calculate the approximate number of years between two DateTime values.</short>
<descr>
<var>YearSpan</var> returns the number of years between <var>ANow</var> and
<var>AThen</var>, including any fractional parts of a year. This number is an approximation,
based on an average number of days of 365.25 per year (average over 4
years). 
</descr>
<seealso>
<link id="MonthSpan"/>
<link id="WeekSpan"/>
<link id="DaySpan"/>
<link id="HourSpan"/>
<link id="MinuteSpan"/>
<link id="SecondSpan"/>
<link id="MilliSecondSpan"/>
<link id="YearsBetween"/>
</seealso>
<example file="datutex/ex63"/>
</element>

<!-- function result Visibility: default -->
<element name="YearSpan.Result">
<short>Number (fractions included) of years between <var>ANow</var> and <var>AThen</var></short>
</element>

<!-- argument Visibility: default -->
<element name="YearSpan.ANow">
<short>First moment in time</short>
</element>

<!-- argument Visibility: default -->
<element name="YearSpan.AThen">
<short>Second moment in time</short>
</element>

<!-- function Visibility: default -->
<element name="MonthSpan">
<short>Calculate the approximate number of months between two DateTime values.</short>
<descr>
<var>MonthSpan</var> returns the number of month between <var>ANow</var> and
<var>AThen</var>, including any fractional parts of a month. This number is an approximation,
based on an average number of days of 30.4375 per month (average over 4
years). 
</descr>
<seealso>
<link id="YearSpan"/>
<link id="WeekSpan"/>
<link id="DaySpan"/>
<link id="HourSpan"/>
<link id="MinuteSpan"/>
<link id="SecondSpan"/>
<link id="MilliSecondSpan"/>
<link id="MonthsBetween"/>
</seealso>
<example file="datutex/ex64"/>
</element>

<!-- function result Visibility: default -->
<element name="MonthSpan.Result">
<short>Number (fractions included) of months between <var>ANow</var> and <var>AThen</var></short>
</element>

<!-- argument Visibility: default -->
<element name="MonthSpan.ANow">
<short>First moment in time</short>
</element>

<!-- argument Visibility: default -->
<element name="MonthSpan.AThen">
<short>Second moment in time</short>
</element>

<!-- function Visibility: default -->
<element name="WeekSpan">
<short>Calculate the approximate number of weeks between two DateTime values.</short>
<descr>
<var>WeekSpan</var> returns the number of weeks between <var>ANow</var> and
<var>AThen</var>, including any fractional parts of a week. 
</descr>
<seealso>
<link id="YearSpan"/>
<link id="MonthSpan"/>
<link id="DaySpan"/>
<link id="HourSpan"/>
<link id="MinuteSpan"/>
<link id="SecondSpan"/>
<link id="MilliSecondSpan"/>
<link id="WeeksBetween"/>
</seealso>
<example file="datutex/ex65"/>
</element>

<!-- function result Visibility: default -->
<element name="WeekSpan.Result">
<short>Number (fractions included) of weeks between <var>ANow</var> and <var>AThen</var></short>
</element>

<!-- argument Visibility: default -->
<element name="WeekSpan.ANow">
<short>First moment in time</short>
</element>

<!-- argument Visibility: default -->
<element name="WeekSpan.AThen">
<short>Second moment in time</short>
</element>

<!-- function Visibility: default -->
<element name="DaySpan">
<short>Calculate the approximate number of days between two DateTime values.</short>
<descr>
<var>DaySpan</var> returns the number of Days between <var>ANow</var> and
<var>AThen</var>, including any fractional parts of a Day. 
</descr>
<seealso>
<link id="YearSpan"/>
<link id="MonthSpan"/>
<link id="WeekSpan"/>
<link id="HourSpan"/>
<link id="MinuteSpan"/>
<link id="SecondSpan"/>
<link id="MilliSecondSpan"/>
<link id="DaysBetween"/>
</seealso>
<example file="datutex/ex66"/>
</element>

<!-- function result Visibility: default -->
<element name="DaySpan.Result">
<short>Number (fractions included) of days between <var>ANow</var> and <var>AThen</var></short>
</element>

<!-- argument Visibility: default -->
<element name="DaySpan.ANow">
<short>First moment in time</short>
</element>

<!-- argument Visibility: default -->
<element name="DaySpan.AThen">
<short>Second moment in time</short>
</element>

<!-- function Visibility: default -->
<element name="HourSpan">
<short>Calculate the approximate number of hours between two DateTime values.</short>
<descr>
<var>HourSpan</var> returns the number of Hours between <var>ANow</var> and
<var>AThen</var>, including any fractional parts of a Hour. 
</descr>
<seealso>
<link id="YearSpan"/>
<link id="MonthSpan"/>
<link id="WeekSpan"/>
<link id="DaySpan"/>
<link id="MinuteSpan"/>
<link id="SecondSpan"/>
<link id="MilliSecondSpan"/>
<link id="HoursBetween"/>
</seealso>
<example file="datutex/ex67"/>
</element>

<!-- function result Visibility: default -->
<element name="HourSpan.Result">
<short>Number (fractions included) of hours between <var>ANow</var> and <var>AThen</var></short>
</element>

<!-- argument Visibility: default -->
<element name="HourSpan.ANow">
<short>First moment in time</short>
</element>

<!-- argument Visibility: default -->
<element name="HourSpan.AThen">
<short>Second moment in time</short>
</element>

<!-- function Visibility: default -->
<element name="MinuteSpan">
<short>Calculate the approximate number of minutes between two DateTime values.</short>
<descr>
<var>MinuteSpan</var> returns the number of minutes between <var>ANow</var> and
<var>AThen</var>, including any fractional parts of a minute. 
</descr>
<seealso>
<link id="YearSpan"/>
<link id="MonthSpan"/>
<link id="WeekSpan"/>
<link id="DaySpan"/>
<link id="HourSpan"/>
<link id="SecondSpan"/>
<link id="MilliSecondSpan"/>
<link id="MinutesBetween"/>
</seealso>
<example file="datutex/ex68"/>
</element>

<!-- function result Visibility: default -->
<element name="MinuteSpan.Result">
<short>Number (fractions included) of minutes between <var>ANow</var> and <var>AThen</var></short>
</element>

<!-- argument Visibility: default -->
<element name="MinuteSpan.ANow">
<short>First moment in time</short>
</element>

<!-- argument Visibility: default -->
<element name="MinuteSpan.AThen">
<short>Second moment in time</short>
</element>

<!-- function Visibility: default -->
<element name="SecondSpan">
<short>Calculate the approximate number of seconds between two DateTime values.</short>
<descr>
<var>SecondSpan</var> returns the number of seconds between <var>ANow</var> and
<var>AThen</var>, including any fractional parts of a second. 
</descr>
<seealso>
<link id="YearSpan"/>
<link id="MonthSpan"/>
<link id="WeekSpan"/>
<link id="DaySpan"/>
<link id="HourSpan"/>
<link id="MinuteSpan"/>
<link id="MilliSecondSpan"/>
<link id="SecondsBetween"/>
</seealso>
<example file="datutex/ex69"/>
</element>

<!-- function result Visibility: default -->
<element name="SecondSpan.Result">
<short>Number (fractions included) of seconds between <var>ANow</var> and <var>AThen</var></short>
</element>

<!-- argument Visibility: default -->
<element name="SecondSpan.ANow">
<short>First moment in time</short>
</element>

<!-- argument Visibility: default -->
<element name="SecondSpan.AThen">
<short>Second moment in time</short>
</element>

<!-- function Visibility: default -->
<element name="MilliSecondSpan">
<short>Calculate the approximate number of milliseconds between two DateTime values.</short>
<descr>
<var>MilliSecondSpan</var> returns the number of milliseconds between <var>ANow</var> and
<var>AThen</var>. Since millisecond is the smallest fraction of a
<var>TDateTime</var> indication, the returned number will always be an
integer value.
</descr>
<seealso>
<link id="YearSpan"/>
<link id="MonthSpan"/>
<link id="WeekSpan"/>
<link id="DaySpan"/>
<link id="HourSpan"/>
<link id="MinuteSpan"/>
<link id="SecondSpan"/>
<link id="MilliSecondsBetween"/>
</seealso>
<example file="datutex/ex70"/>
</element>

<!-- function result Visibility: default -->
<element name="MilliSecondSpan.Result">
<short>Number (fractions included) of seconds between <var>ANow</var> and <var>AThen</var></short>
</element>

<!-- argument Visibility: default -->
<element name="MilliSecondSpan.ANow">
<short>First moment in time</short>
</element>

<!-- argument Visibility: default -->
<element name="MilliSecondSpan.AThen">
<short>Second moment in time</short>
</element>

<!-- function Visibility: default -->
<element name="IncYear">
<short>Increase a DateTime value with a number of years.</short>
<descr>
<var>IncYear</var> adds <var>ANumberOfYears</var> years to <var>AValue</var> and
returns the resulting date/time. <var>ANumberOfYears</var> can be positive or
negative. 
</descr>
<seealso>
<link id="#rtl.sysutils.IncMonth"/>
<link id="IncWeek"/>
<link id="IncDay"/>
<link id="IncHour"/>
<link id="IncMinute"/>
<link id="IncSecond"/>
<link id="IncMilliSecond"/>
</seealso>
<example file="datutex/ex71"/>
</element>

<!-- function result Visibility: default -->
<element name="IncYear.Result">
<short>DateTime representing <var>AValue</var> plus <var>ANumberOfYears</var> years.</short>
</element>

<!-- argument Visibility: default -->
<element name="IncYear.AValue">
<short>DateTime to which years should be added.</short>
</element>

<!-- argument Visibility: default -->
<element name="IncYear.ANumberOfYears">
<short>Number of years to add</short>
</element>


<!-- argument Visibility: default -->
<element name="IncWeek.ANumberOfWeeks">
<short>Number of weeks to add</short>
</element>

<!-- function Visibility: default -->
<element name="IncWeek">
<short>Increase a DateTime value with a number of weeks.</short>
<descr>
<var>IncWeek</var> adds <var>ANumberOfWeeks</var> weeks to <var>AValue</var> and
returns the resulting date/time.<var>ANumberOfWeeks</var> can be positive or
negative.
</descr>
<seealso>
<link id="IncYear"/>
<link id="#rtl.sysutils.IncMonth"/>
<link id="IncDay"/>
<link id="IncHour"/>
<link id="IncMinute"/>
<link id="IncSecond"/>
<link id="IncMilliSecond"/>
</seealso>
<example file="datutex/ex73"/>
</element>

<!-- function result Visibility: default -->
<element name="IncWeek.Result">
<short>DateTime representing <var>AValue</var> plus <var>ANumberOfWeeks</var> weeks.</short>
</element>

<!-- argument Visibility: default -->
<element name="IncWeek.AValue">
<short>DateTime to which weeks should be added.</short>
</element>


<!-- argument Visibility: default -->
<element name="IncDay.ANumberOfDays">
<short>Number of days to add.</short>
</element>

<!-- function Visibility: default -->
<element name="IncDay">
<short>Increase a DateTime value with a number of days.</short>
<descr>
<var>IncDay</var> adds <var>ANumberOfDays</var> days to <var>AValue</var> and
returns the resulting date/time.<var>ANumberOfDays</var> can be positive or
negative.
</descr>
<seealso>
<link id="IncYear"/>
<link id="#rtl.sysutils.IncMonth"/>
<link id="IncWeek"/>
<link id="IncHour"/>
<link id="IncMinute"/>
<link id="IncSecond"/>
<link id="IncMilliSecond"/>
</seealso>
<example file="datutex/ex74"/>
</element>

<!-- function result Visibility: default -->
<element name="IncDay.Result">
<short>DateTime representing <var>AValue</var> plus <var>ANumberOfDays</var> days.</short>
</element>

<!-- argument Visibility: default -->
<element name="IncDay.AValue">
<short>DateTime value to which days should be added.</short>
</element>

<!-- argument Visibility: default -->
<element name="IncHour.ANumberOfHours">
<short>Number of hours to add</short>
</element>

<!-- function Visibility: default -->
<element name="IncHour">
<short>Increase a DateTime value with a number of hours.</short>
<descr>
<var>IncHour</var> adds <var>ANumberOfHours</var> hours to <var>AValue</var> and
returns the resulting date/time.<var>ANumberOfHours</var> can be positive or
negative.
</descr>
<seealso>
<link id="IncYear"/>
<link id="#rtl.sysutils.IncMonth"/>
<link id="IncWeek"/>
<link id="IncDay"/>
<link id="IncMinute"/>
<link id="IncSecond"/>
<link id="IncMilliSecond"/>
</seealso>
<example file="datutex/ex75"/>
</element>

<!-- function result Visibility: default -->
<element name="IncHour.Result">
<short>DateTime representing <var>AValue</var>  plus <var>ANumberOfHours</var> hours.</short>
</element>

<!-- argument Visibility: default -->
<element name="IncHour.AValue">
<short>DateTime to which hours should be added.</short>
</element>

<!-- argument Visibility: default -->
<element name="IncMinute.ANumberOfMinutes">
<short>Number of minutes to add</short>
</element>

<!-- function Visibility: default -->
<element name="IncMinute">
<short>Increase a DateTime value with a number of minutes.</short>
<descr>
<var>IncMinute</var> adds <var>ANumberOfMinutes</var> minutes to <var>AValue</var> and
returns the resulting date/time.<var>ANumberOfMinutes</var> can be positive or
negative.
</descr>
<seealso>
<link id="IncYear"/>
<link id="#rtl.sysutils.IncMonth"/>
<link id="IncWeek"/>
<link id="IncDay"/>
<link id="IncHour"/>
<link id="IncSecond"/>
<link id="IncMilliSecond"/>
</seealso>
<example file="datutex/ex76"/>
</element>

<!-- function result Visibility: default -->
<element name="IncMinute.Result">
<short>DateTime representing <var>AValue</var> plus <var>ANumberOfMinutes</var> minutes.</short>
</element>

<!-- argument Visibility: default -->
<element name="IncMinute.AValue">
<short>DateTime to which minutes should be added.</short>
</element>

<!-- argument Visibility: default -->
<element name="IncSecond.ANumberOfSeconds">
<short>Number of seconds to add</short>
</element>

<!-- function Visibility: default -->
<element name="IncSecond">
<short>Increase a DateTime value with a number of seconds.</short>
<descr>
<var>IncSecond</var> adds <var>ANumberOfSeconds</var> seconds to <var>AValue</var> and
returns the resulting date/time.<var>ANumberOfSeconds</var> can be positive or
negative.
</descr>
<seealso>
<link id="IncYear"/>
<link id="#rtl.sysutils.IncMonth"/>
<link id="IncWeek"/>
<link id="IncDay"/>
<link id="IncHour"/>
<link id="IncSecond"/>
<link id="IncMilliSecond"/>
</seealso>
<example file="datutex/ex77"/>
</element>

<!-- function result Visibility: default -->
<element name="IncSecond.Result">
<short>DateTime representing <var>AValue</var> plus <var>ANumberOfSeconds</var> seconds.</short>
</element>

<!-- argument Visibility: default -->
<element name="IncSecond.AValue">
<short>DateTime to which seconds should be added.</short>
</element>

<!-- argument Visibility: default -->
<element name="IncMilliSecond.ANumberOfMilliSeconds">
<short>Number of milliseconds to add</short>
</element>

<!-- function Visibility: default -->
<element name="IncMilliSecond">
<short>Increase a DateTime value with a number of milliseconds.</short>
<descr>
<var>IncMilliSecond</var> adds <var>ANumberOfMilliSeconds</var> milliseconds to <var>AValue</var> and
returns the resulting date/time.<var>ANumberOfMilliSeconds</var> can be positive or
negative.
</descr>
<seealso>
<link id="IncYear"/>
<link id="#rtl.sysutils.IncMonth"/>
<link id="IncWeek"/>
<link id="IncDay"/>
<link id="IncHour"/>
<link id="IncSecond"/>
<link id="IncMilliSecond"/>
</seealso>
<example file="datutex/ex78"/>
</element>

<!-- function result Visibility: default -->
<element name="IncMilliSecond.Result">
<short>DateTime representing <var>AValue</var>  plus <var>ANumberOfMilliSeconds</var> milliseconds.</short>
</element>

<!-- argument Visibility: default -->
<element name="IncMilliSecond.AValue">
<short>DateTime to which milliseconds should be added.</short>
</element>

<!-- function Visibility: default -->
<element name="EncodeDateTime">
<short>Encodes a DateTime value from all its parts</short>
<descr>
<p>
<var>EncodeDateTime</var> encodes the values <var>AYear</var>
<var>AMonth</var>, <var>ADay</var>,<var>AHour</var>,
<var>AMinute</var>,<var>ASecond</var> and <var>AMilliSecond</var>
to a date/time valueand returns this value.
</p>
<p>
For an example, see <link id="DecodeDateTime"/>.
</p>
</descr>
<errors>
If any of the arguments is not valid, then an <var>EConvertError</var>
exception is raised.
</errors>
<seealso>
<link id="DecodeDateTime"/>
<link id="EncodeDateMonthWeek"/>
<link id="EncodeDateWeek"/>
<link id="EncodeDateDay"/>
<link id="TryEncodeDateTime"/>
<link id="TryEncodeDateWeek"/>
<link id="TryEncodeDateDay"/>
<link id="TryEncodeDateMonthWeek"/>
</seealso>
</element>

<!-- function result Visibility: default -->
<element name="EncodeDateTime.Result">
<short>DateTime value representing the complete timestamp</short>
</element>

<!-- argument Visibility: default -->
<element name="EncodeDateTime.AYear">
<short>Year</short>
</element>

<!-- argument Visibility: default -->
<element name="EncodeDateTime.AMonth">
<short>Month</short>
</element>

<!-- argument Visibility: default -->
<element name="EncodeDateTime.ADay">
<short>Day of the month</short>
</element>

<!-- argument Visibility: default -->
<element name="EncodeDateTime.AHour">
<short>Hour of the day</short>
</element>

<!-- argument Visibility: default -->
<element name="EncodeDateTime.AMinute">
<short>Minutes</short>
</element>

<!-- argument Visibility: default -->
<element name="EncodeDateTime.ASecond">
<short>Seconds</short>
</element>

<!-- argument Visibility: default -->
<element name="EncodeDateTime.AMilliSecond">
<short>Milliseconds</short>
</element>

<!-- procedure Visibility: default -->
<element name="DecodeDateTime">
<short>Decode a datetime value in a date and time value</short>
<descr>
<var>DecodeDateTime</var> decomposes the date/time indication in
<var>AValue</var> and returns the various components in <var>AYear</var>,
<var>AMonth</var>, <var>ADay</var>, <var>AHour</var>, <var>AMinute</var>,
<var>ASecond</var>, <var>AMilliSecond</var>
</descr>
<seealso>
<link id="EncodeDateTime"/>
<link id="EncodeDateMonthWeek"/>
<link id="EncodeDateWeek"/>
<link id="EncodeDateDay"/>
<link id="DecodeDateWeek"/>
<link id="DecodeDateDay"/>
<link id="DecodeDateMonthWeek"/>
</seealso>
<example file="datutex/ex79"/>
</element>

<!-- argument Visibility: default -->
<element name="DecodeDateTime.AValue">
<short>DateTime to decode</short>
</element>

<!-- argument Visibility: default -->
<element name="DecodeDateTime.AYear">
<short>Returns the year part of <var>AValue</var>.</short>
</element>

<!-- argument Visibility: default -->
<element name="DecodeDateTime.AMonth">
<short>Returns the month part of <var>AValue</var>.</short>
</element>

<!-- argument Visibility: default -->
<element name="DecodeDateTime.ADay">
<short>Returns the day part of <var>AValue</var>.</short>
</element>

<!-- argument Visibility: default -->
<element name="DecodeDateTime.AHour">
<short>Returns the hour part of <var>AValue</var>.</short>
</element>

<!-- argument Visibility: default -->
<element name="DecodeDateTime.AMinute">
<short>Returns the minute part of <var>AValue</var>.</short>
</element>

<!-- argument Visibility: default -->
<element name="DecodeDateTime.ASecond">
<short>Returns the second part of <var>AValue</var>.</short>
</element>

<!-- argument Visibility: default -->
<element name="DecodeDateTime.AMilliSecond">
<short>Returns the millisecond part of <var>AValue</var>.</short>
</element>

<!-- function Visibility: default -->
<element name="TryEncodeDateTime">
<short>Encode a Year, Month, Day, Hour, minute, seconds, milliseconds tuplet to a <var>TDateTime</var> value</short>
<descr>
<p>
<var>EncodeDateTime</var> encodes the values <var>AYear</var>
<var>AMonth</var>, <var>ADay</var>,<var>AHour</var>,
<var>AMinute</var>,<var>ASecond</var> and <var>AMilliSecond</var>
to a date/time valueand returns this value in <var>AValue</var>.
</p>
<p>
If the date was encoded succesfully, <var>True</var> is returned,
<var>False</var> is returned if one of the arguments is not valid.
</p>
</descr>
<seealso>
<link id="EncodeDateTime"/>
<link id="EncodeDateMonthWeek"/>
<link id="EncodeDateWeek"/>
<link id="EncodeDateDay"/>
<link id="TryEncodeDateDay"/>
<link id="TryEncodeDateWeek"/>
<link id="TryEncodeDateMonthWeek"/>
</seealso>
<example file="datutex/ex80"/>
</element>

<!-- function result Visibility: default -->
<element name="TryEncodeDateTime.Result">
<short><var>True</var> if the encoding was succesful</short>
</element>

<!-- argument Visibility: default -->
<element name="TryEncodeDateTime.AYear">
<short>Year</short>
</element>

<!-- argument Visibility: default -->
<element name="TryEncodeDateTime.AMonth">
<short>Month in year</short>
</element>

<!-- argument Visibility: default -->
<element name="TryEncodeDateTime.ADay">
<short>Day in month</short>
</element>

<!-- argument Visibility: default -->
<element name="TryEncodeDateTime.AHour">
<short>Hour of the day</short>
</element>

<!-- argument Visibility: default -->
<element name="TryEncodeDateTime.AMinute">
<short>Minutes in the hour</short>
</element>

<!-- argument Visibility: default -->
<element name="TryEncodeDateTime.ASecond">
<short>Seconds in the minute</short>
</element>

<!-- argument Visibility: default -->
<element name="TryEncodeDateTime.AMilliSecond">
<short>Millisecond in the second</short>
</element>

<!-- argument Visibility: default -->
<element name="TryEncodeDateTime.AValue">
<short>Encoded <var>TDateTime</var> value.</short>
</element>

<!-- function Visibility: default -->
<element name="EncodeDateWeek">
<short>Encode a <var>TDateTime</var> value from a year, week and day of week triplet</short>
<descr>
<p>
<var>EncodeDateWeek</var> encodes the values <var>AYear</var>, <var>AWeekOfYear</var>
and <var>ADayOfWeek</var> to a date value and returns this value.
</p>
<p>
For an example, see <link id="DecodeDateWeek"/>.
</p>
</descr>
<errors>
If any of the arguments is not valid, then an <var>EConvertError</var>
exception is raised.
</errors>
<seealso>
<link id="EncodeDateMonthWeek"/>
<link id="DecodeDateWeek"/>
<link id="EncodeDateTime"/>
<link id="EncodeDateDay"/>
<link id="TryEncodeDateTime"/>
<link id="TryEncodeDateWeek"/>
<link id="TryEncodeDateMonthWeek"/>
</seealso>
</element>

<!-- function result Visibility: default -->
<element name="EncodeDateWeek.Result">
<short>DateTime value representing <var>AYear</var>, <var>AWeekOfYear</var> and <var>ADayOfWeek</var>.</short>
</element>

<!-- argument Visibility: default -->
<element name="EncodeDateWeek.AYear">
<short>Year part</short>
</element>

<!-- argument Visibility: default -->
<element name="EncodeDateWeek.AWeekOfYear">
<short>Week of the year part</short>
</element>

<!-- procedure Visibility: default -->
<element name="DecodeDateWeek">
<short>Decode a DateTime value in a week of year and day of week.</short>
<descr>
<var>DecodeDateWeek</var> decomposes the date indication in
<var>AValue</var> and returns the various components in <var>AYear</var>,
<var>AWeekOfYear</var>, <var>ADayOfWeek</var>.
</descr>
<seealso>
<link id="EncodeDateTime"/>
<link id="EncodeDateMonthWeek"/>
<link id="EncodeDateWeek"/>
<link id="EncodeDateDay"/>
<link id="DecodeDateTime"/>
<link id="DecodeDateDay"/>
<link id="DecodeDateMonthWeek"/>
</seealso>
<example file="datutex/ex81"/>
</element>

<!-- argument Visibility: default -->
<element name="DecodeDateWeek.AValue">
<short>DateTime to decode</short>
</element>

<!-- argument Visibility: default -->
<element name="DecodeDateWeek.AYear">
<short>Returns the year part of <var>AValue</var>.</short>
</element>

<!-- argument Visibility: default -->
<element name="DecodeDateWeek.AWeekOfYear">
<short>Returns the week of year part of <var>AValue</var>.</short>
</element>

<!-- argument Visibility: default -->
<element name="DecodeDateWeek.ADayOfWeek">
<short>Returns the day of week part of <var>AValue</var>.</short>
</element>

<!-- function Visibility: default -->
<element name="TryEncodeDateWeek">
<short>Encode a year, week and day of week triplet to a <var>TDateTime</var> value</short>
<descr>
<p>
<var>TryEncodeDateWeek</var> encodes the values <var>AYear</var>, <var>AWeekOfYear</var>
and <var>ADayOfWeek</var> to a date value and returns this value in
<var>AValue</var>.
</p>
<p>
If the encoding was succcesful, <var>True</var> is returned.
<var>False</var> is returned if any of the arguments is not valid.
</p>
</descr>
<seealso>
<link id="EncodeDateMonthWeek"/>
<link id="EncodeDateWeek"/>
<link id="EncodeDateTime"/>
<link id="EncodeDateDay"/>
<link id="TryEncodeDateTime"/>
<link id="TryEncodeDateMonthWeek"/>
<link id="TryEncodeDateDay"/>
</seealso>
<example file="datutex/ex82"/>
</element>

<!-- function result Visibility: default -->
<element name="TryEncodeDateWeek.Result">
<short><var>True</var> if the encoding was succeful, <var>False</var> otherwise.</short>
</element>

<!-- argument Visibility: default -->
<element name="TryEncodeDateWeek.AYear">
<short>Year</short>
</element>

<!-- argument Visibility: default -->
<element name="TryEncodeDateWeek.AWeekOfYear">
<short>Week in the year</short>
</element>

<!-- argument Visibility: default -->
<element name="TryEncodeDateWeek.AValue">
<short>Encoded <var>TDateTime</var> value</short>
</element>

<!-- argument Visibility: default -->
<element name="TryEncodeDateWeek.ADayOfWeek">
<short>Day of the week (default 1).</short>
</element>

<!-- function Visibility: default -->
<element name="EncodeDateDay">
<short>Encodes a year and day of year to a DateTime value</short>
<descr>
<p>
<var>EncodeDateDay</var> encodes the values <var>AYear</var> and <var>ADayOfYear</var>
to a date value and returns this value.
</p>
<p>
For an example, see <link id="DecodeDateDay"/>.
</p>
</descr>
<errors>
If any of the arguments is not valid, then an <var>EConvertError</var>
exception is raised.
</errors>
<seealso>
<link id="EncodeDateMonthWeek"/>
<link id="DecodeDateDay"/>
<link id="EncodeDateTime"/>
<link id="EncodeDateWeek"/>
<link id="TryEncodeDateTime"/>
<link id="TryEncodeDateMonthWeek"/>
<link id="TryEncodeDateWeek"/>
</seealso>
</element>

<!-- function result Visibility: default -->
<element name="EncodeDateDay.Result">
<short>DateTime value representing the date specified by <var>AYear</var> and <var>ADayOfYear</var>.</short>
</element>

<!-- argument Visibility: default -->
<element name="EncodeDateDay.AYear">
<short>Year part.</short>
</element>

<!-- argument Visibility: default -->
<element name="EncodeDateDay.ADayOfYear">
<short>Day of the year part</short>
</element>

<!-- procedure Visibility: default -->
<element name="DecodeDateDay">
<short>Decode a DateTime value in year and year of day.</short>
<descr>
<var>DecodeDateDay</var> decomposes the date indication in
<var>AValue</var> and returns the various components in <var>AYear</var>,
<var>ADayOfYear</var>.
</descr>
<seealso>
<link id="EncodeDateTime"/>
<link id="EncodeDateMonthWeek"/>
<link id="EncodeDateWeek"/>
<link id="EncodeDateDay"/>
<link id="DecodeDateTime"/>
<link id="DecodeDateWeek"/>
<link id="DecodeDateMonthWeek"/>
</seealso>
<example file="datutex/ex83"/>
</element>

<!-- argument Visibility: default -->
<element name="DecodeDateDay.AValue">
<short>DateTime to decode</short>
</element>

<!-- argument Visibility: default -->
<element name="DecodeDateDay.AYear">
<short>Returns the year part of <var>AValue</var></short>
</element>

<!-- argument Visibility: default -->
<element name="DecodeDateDay.ADayOfYear">
<short>Returns the day-of-year part of <var>AValue</var></short>
</element>

<!-- function Visibility: default -->
<element name="TryEncodeDateDay">
<short>Encode a year and day of year to a <var>TDateTime</var> value</short>
<descr>
<p>
<var>TryEncodeDateDay</var> encodes the values <var>AYear</var>
and <var>ADayOfYear</var> to a date value and returns this value in
<var>AValue</var>.
</p>
<p>
If the encoding was succcesful, <var>True</var> is returned.
<var>False</var> is returned if any of the arguments is not valid.
</p>
</descr>
<seealso>
<link id="EncodeDateDay"/>
<link id="EncodeDateTime"/>
<link id="EncodeDateMonthWeek"/>
<link id="EncodeDateWeek"/>
<link id="TryEncodeDateTime"/>
<link id="TryEncodeDateMonthWeek"/>
<link id="TryEncodeDateWeek"/>
</seealso>
<example file="datutex/ex84"/>
</element>

<!-- function result Visibility: default -->
<element name="TryEncodeDateDay.Result">
<short><var>True</var> if the encoding was succesful, <var>False</var> if not.</short>
</element>

<!-- argument Visibility: default -->
<element name="TryEncodeDateDay.AYear">
<short>Year</short>
</element>

<!-- argument Visibility: default -->
<element name="TryEncodeDateDay.ADayOfYear">
<short>Day in the year</short>
</element>

<!-- argument Visibility: default -->
<element name="TryEncodeDateDay.AValue">
<short>Encoded <var>TDateTime</var> value.</short>
</element>

<!-- function Visibility: default -->
<element name="EncodeDateMonthWeek">
<short>Encodes a year, month, week of month and day of week to a DateTime value</short>
<descr>
<p>
<var>EncodeDateTime</var> encodes the values <var>AYear</var>
<var>AMonth</var>, <var>WeekOfMonth</var>,<var>ADayOfWeek</var>,
to a date value and returns this value.
</p>
<p>
For an example, see <link id="DecodeDateMonthWeek"/>.
</p>
</descr>
<errors>
If any of the arguments is not valid, then an <var>EConvertError</var>
exception is raised.
</errors>
<seealso>
<link id="DecodeDateMonthWeek"/>
<link id="EncodeDateTime"/>
<link id="EncodeDateWeek"/>
<link id="EncodeDateDay"/>
<link id="TryEncodeDateTime"/>
<link id="TryEncodeDateWeek"/>
<link id="TryEncodeDateMonthWeek"/>
<link id="TryEncodeDateDay"/>
<link id="NthDayOfWeek"/>
</seealso>
</element>

<!-- function result Visibility: default -->
<element name="EncodeDateMonthWeek.Result">
<short>DateTime value representing the date specified by <var>AYear</var>, <var>AMonth</var>, <var>AWeekOfMonth</var> and <var>ADayOfWeek</var>.</short>
</element>

<!-- argument Visibility: default -->
<element name="EncodeDateMonthWeek.AYear">
<short>Year part</short>
</element>

<!-- argument Visibility: default -->
<element name="EncodeDateMonthWeek.AMonth">
<short>Month part</short>
</element>

<!-- argument Visibility: default -->
<element name="EncodeDateMonthWeek.AWeekOfMonth">
<short>Week of the month part</short>
</element>

<!-- argument Visibility: default -->
<element name="EncodeDateMonthWeek.ADayOfWeek">
<short>Day of the week part</short>
</element>

<!-- procedure Visibility: default -->
<element name="DecodeDateMonthWeek">
<short>Decode a DateTime value in a month, week of month and day of week</short>
<descr>
<var>DecodeDateMonthWeek</var> decomposes the date indication in
<var>AValue</var> and returns the various components in <var>AYear</var>,
<var>AMonth</var> <var>AWeekOfMonth</var> and <var>ADayOfWeek</var>.
</descr>
<seealso>
<link id="EncodeDateTime"/>
<link id="EncodeDateMonthWeek"/>
<link id="EncodeDateWeek"/>
<link id="EncodeDateDay"/>
<link id="DecodeDateTime"/>
<link id="DecodeDateWeek"/>
<link id="DecodeDateDay"/>
</seealso>
<example file="datutex/ex85"/>
</element>

<!-- argument Visibility: default -->
<element name="DecodeDateMonthWeek.AValue">
<short>DateTime to decode</short>
</element>

<!-- argument Visibility: default -->
<element name="DecodeDateMonthWeek.AYear">
<short>Returns the year part of <var>AValue</var>.</short>
</element>

<!-- argument Visibility: default -->
<element name="DecodeDateMonthWeek.AMonth">
<short>Returns the month part of <var>AValue</var>.</short>
</element>

<!-- argument Visibility: default -->
<element name="DecodeDateMonthWeek.AWeekOfMonth">
<short>Returns the week of month part of <var>AValue</var>.</short>
</element>

<!-- argument Visibility: default -->
<element name="DecodeDateMonthWeek.ADayOfWeek">
<short>Returns the day of week part of <var>AValue</var>.</short>
</element>

<!-- function Visibility: default -->
<element name="TryEncodeDateMonthWeek">
<short>Encode a year, month, week of month and day of week to a <var>TDateTime</var> value</short>
<descr>
<p>
<var>TryEncodeDateTime</var> encodes the values <var>AYear</var>
<var>AMonth</var>, <var>WeekOfMonth</var>,<var>ADayOfWeek</var>,
to a date value and returns this value in <var>AValue</var>.
</p>
<p>
If the encoding was succesful, <var>True</var> is returned, <var>False</var>
if any of the arguments is not valid.
</p>
</descr>
<seealso>
<link id="DecodeDateMonthWeek"/>
<link id="EncodeDateTime"/>
<link id="EncodeDateWeek"/>
<link id="EncodeDateDay"/>
<link id="EncodeDateMonthWeek"/>
<link id="TryEncodeDateTime"/>
<link id="TryEncodeDateWeek"/>
<link id="TryEncodeDateDay"/>
<link id="NthDayOfWeek"/>
</seealso>
<example file="datutex/ex86"/>
</element>

<!-- function result Visibility: default -->
<element name="TryEncodeDateMonthWeek.Result">
<short><var>True</var> if the encoding was succesful, <var>False</var> if not.</short>
</element>

<!-- argument Visibility: default -->
<element name="TryEncodeDateMonthWeek.AYear">
<short>Year</short>
</element>

<!-- argument Visibility: default -->
<element name="TryEncodeDateMonthWeek.AMonth">
<short>Month in the year</short>
</element>

<!-- argument Visibility: default -->
<element name="TryEncodeDateMonthWeek.AWeekOfMonth">
<short>Week in the month</short>
</element>

<!-- argument Visibility: default -->
<element name="TryEncodeDateMonthWeek.ADayOfWeek">
<short>Day in the week</short>
</element>

<!-- argument Visibility: default -->
<element name="TryEncodeDateMonthWeek.AValue">
<short>Encoded <var>TDateTime</var> value</short>
</element>

<!-- function Visibility: default -->
<element name="RecodeYear">
<short>Replace year part of a <var>TDateTime</var> value with another year.</short>
<descr>
<var>RecodeYear</var> replaces the year part of the timestamp <var>AValue</var>
with <var>AYear</var>. All other parts of the date/time stamp are left untouched.
</descr>
<errors>
If the <var>AYear</var> value is not within a valid range (1..9999) then 
an <var>EConvertError</var> exception is raised.
</errors>
<seealso>
<link id="RecodeMonth"/>
<link id="RecodeDay"/>
<link id="RecodeHour"/>
<link id="RecodeMinute"/>
<link id="RecodeSecond"/>
<link id="RecodeMilliSecond"/>
<link id="RecodeDate"/>
<link id="RecodeTime"/>
<link id="RecodeDateTime"/>
</seealso>
<example file="datutex/ex87"/>
</element>

<!-- function result Visibility: default -->
<element name="RecodeYear.Result">
<short><var>AValue</var> with replaced year.</short>
</element>

<!-- argument Visibility: default -->
<element name="RecodeYear.AValue">
<short>Date to recode</short>
</element>

<!-- argument Visibility: default -->
<element name="RecodeYear.AYear">
<short>Year to replace in <var>AValue</var></short>
</element>

<!-- function Visibility: default -->
<element name="RecodeMonth">
<short>Replace month part of a <var>TDateTime</var> value with another month.</short>
<descr>
<var>RecodeMonth</var> replaces the Month part of the timestamp <var>AValue</var>
with <var>AMonth</var>. All other parts of the date/time stamp are left untouched.
</descr>
<errors>
If the <var>AMonth</var> value is not within a valid range (1..12) then 
an <var>EConvertError</var> exception is raised.
</errors>
<seealso>
<link id="RecodeYear"/>
<link id="RecodeDay"/>
<link id="RecodeHour"/>
<link id="RecodeMinute"/>
<link id="RecodeSecond"/>
<link id="RecodeMilliSecond"/>
<link id="RecodeDate"/>
<link id="RecodeTime"/>
<link id="RecodeDateTime"/>
</seealso>
<example file="datutex/ex88"/>
</element>

<!-- function result Visibility: default -->
<element name="RecodeMonth.Result">
<short><var>AValue</var> with replaced month.</short>
</element>

<!-- argument Visibility: default -->
<element name="RecodeMonth.AValue">
<short>Date to recode</short>
</element>

<!-- argument Visibility: default -->
<element name="RecodeMonth.AMonth">
<short>Month to replace in <var>AValue</var></short>
</element>

<!-- function Visibility: default -->
<element name="RecodeDay">
<short>Replace day part of a <var>TDateTime</var> value with another day.</short>
<descr>
<var>RecodeDay</var> replaces the Day part of the timestamp <var>AValue</var>
with <var>ADay</var>. All other parts of the date/time stamp are left untouched.
</descr>
<errors>
If the <var>ADay</var> value is not within a valid range (1 till the number of
days in the month) then an <var>EConvertError</var> exception is raised.
</errors>
<seealso>
<link id="RecodeYear"/>
<link id="RecodeMonth"/>
<link id="RecodeHour"/>
<link id="RecodeMinute"/>
<link id="RecodeSecond"/>
<link id="RecodeMilliSecond"/>
<link id="RecodeDate"/>
<link id="RecodeTime"/>
<link id="RecodeDateTime"/>
</seealso>
<example file="datutex/ex89"/>
</element>

<!-- function result Visibility: default -->
<element name="RecodeDay.Result">
<short><var>AValue</var> with replaced day.</short>
</element>

<!-- argument Visibility: default -->
<element name="RecodeDay.AValue">
<short>Date to recode</short>
</element>

<!-- argument Visibility: default -->
<element name="RecodeDay.ADay">
<short>Day to replace in <var>AValue</var></short>
</element>

<!-- function Visibility: default -->
<element name="RecodeHour">
<short>Replace hours part of a <var>TDateTime</var> value with another hour.</short>
<descr>
<var>RecodeHour</var> replaces the Hour part of the timestamp <var>AValue</var>
with <var>AHour</var>. All other parts of the date/time stamp are left untouched.
</descr>
<errors>
If the <var>AHour</var> value is not within a valid range (0..23) then 
an <var>EConvertError</var> exception is raised.
</errors>
<seealso>
<link id="RecodeYear"/>
<link id="RecodeMonth"/>
<link id="RecodeDay"/>
<link id="RecodeMinute"/>
<link id="RecodeSecond"/>
<link id="RecodeMilliSecond"/>
<link id="RecodeDate"/>
<link id="RecodeTime"/>
<link id="RecodeDateTime"/>
</seealso>
<example file="datutex/ex90"/>
</element>

<!-- function result Visibility: default -->
<element name="RecodeHour.Result">
<short><var>AValue</var> with replaced hour.</short>
</element>

<!-- argument Visibility: default -->
<element name="RecodeHour.AValue">
<short>Date/time to recode</short>
</element>

<!-- argument Visibility: default -->
<element name="RecodeHour.AHour">
<short>Hour to replace in <var>AValue</var></short>
</element>

<!-- function Visibility: default -->
<element name="RecodeMinute">
<short>Replace minutse part of a <var>TDateTime</var> value with another minute.</short>
<descr>
<var>RecodeMinute</var> replaces the Minute part of the timestamp <var>AValue</var>
with <var>AMinute</var>. All other parts of the date/time stamp are left untouched.
</descr>
<errors>
If the <var>AMinute</var> value is not within a valid range (0..59) then 
an <var>EConvertError</var> exception is raised.
</errors>
<seealso>
<link id="RecodeYear"/>
<link id="RecodeMonth"/>
<link id="RecodeDay"/>
<link id="RecodeHour"/>
<link id="RecodeSecond"/>
<link id="RecodeMilliSecond"/>
<link id="RecodeDate"/>
<link id="RecodeTime"/>
<link id="RecodeDateTime"/>
</seealso>
<example file="datutex/ex91"/>
</element>

<!-- function result Visibility: default -->
<element name="RecodeMinute.Result">
<short><var>AValue</var> with replaced minute.</short>
</element>

<!-- argument Visibility: default -->
<element name="RecodeMinute.AValue">
<short>Date/time to recode</short>
</element>

<!-- argument Visibility: default -->
<element name="RecodeMinute.AMinute">
<short>Minute to replace in <var>AValue</var></short>
</element>

<!-- function Visibility: default -->
<element name="RecodeSecond">
<short>Replace seconds part of a <var>TDateTime</var> value with another second.</short>
<descr>
<var>RecodeSecond</var> replaces the Second part of the timestamp <var>AValue</var>
with <var>ASecond</var>. All other parts of the date/time stamp are left untouched.
</descr>
<errors>
If the <var>ASecond</var> value is not within a valid range (0..59) then 
an <var>EConvertError</var> exception is raised.
</errors>
<seealso>
<link id="RecodeYear"/>
<link id="RecodeMonth"/>
<link id="RecodeDay"/>
<link id="RecodeHour"/>
<link id="RecodeMinute"/>
<link id="RecodeMilliSecond"/>
<link id="RecodeDate"/>
<link id="RecodeTime"/>
<link id="RecodeDateTime"/>
</seealso>
<example file="datutex/ex92"/>
</element>

<!-- function result Visibility: default -->
<element name="RecodeSecond.Result">
<short><var>AValue</var> with replaced second.</short>
</element>

<!-- argument Visibility: default -->
<element name="RecodeSecond.AValue">
<short>Date/time to recode</short>
</element>

<!-- argument Visibility: default -->
<element name="RecodeSecond.ASecond">
<short>Second to replace in <var>AValue</var></short>
</element>

<!-- function Visibility: default -->
<element name="RecodeMilliSecond">
<short>Replace milliseconds part of a <var>TDateTime</var> value with another millisecond.</short>
<descr>
<var>RecodeMilliSecond</var> replaces the millisecond part of the timestamp <var>AValue</var>
with <var>AMilliSecond</var>. All other parts of the date/time stamp are left untouched.
</descr>
<errors>
If the <var>AMilliSecond</var> value is not within a valid range (0..999) then 
an <var>EConvertError</var> exception is raised.
</errors>
<seealso>
<link id="RecodeYear"/>
<link id="RecodeMonth"/>
<link id="RecodeDay"/>
<link id="RecodeHour"/>
<link id="RecodeMinute"/>
<link id="RecodeSecond"/>
<link id="RecodeDate"/>
<link id="RecodeTime"/>
<link id="RecodeDateTime"/>
</seealso>
<example file="datutex/ex93"/>
</element>

<!-- function result Visibility: default -->
<element name="RecodeMilliSecond.Result">
<short><var>AValue</var> with replaced millisecond.</short>
</element>

<!-- argument Visibility: default -->
<element name="RecodeMilliSecond.AValue">
<short>Date/time to recode</short>
</element>

<!-- argument Visibility: default -->
<element name="RecodeMilliSecond.AMilliSecond">
<short>Millisecond to replace in <var>AValue</var></short>
</element>

<!-- function Visibility: default -->
<element name="RecodeDate">
<short>Replace date part of a <var>TDateTime</var> value with another date.</short>
<descr>
<var>RecodeDate</var> replaces the date part of the timestamp <var>AValue</var>
with the date specified in <var>AYear</var>, <var>AMonth</var>, <var>ADay</var>. 
All other parts (the time part) of the date/time stamp are left untouched.
</descr>
<errors>
If one of the <var>AYear</var>, <var>AMonth</var>, <var>ADay</var> values is not within 
a valid range then an <var>EConvertError</var> exception is raised.
</errors>
<seealso>
<link id="RecodeYear"/>
<link id="RecodeMonth"/>
<link id="RecodeDay"/>
<link id="RecodeHour"/>
<link id="RecodeMinute"/>
<link id="RecodeSecond"/>
<link id="RecodeDate"/>
<link id="RecodeTime"/>
<link id="RecodeDateTime"/>
</seealso>
<example file="datutex/ex94"/>
</element>

<!-- function result Visibility: default -->
<element name="RecodeDate.Result">
<short><var>AValue</var> with replaced date.</short>
</element>

<!-- argument Visibility: default -->
<element name="RecodeDate.AValue">
<short>Date/time to recode</short>
</element>

<!-- argument Visibility: default -->
<element name="RecodeDate.AYear">
<short>Year to replace in <var>AValue</var></short>
</element>

<!-- argument Visibility: default -->
<element name="RecodeDate.AMonth">
<short>Month to replace in <var>AValue</var></short>
</element>

<!-- argument Visibility: default -->
<element name="RecodeDate.ADay">
<short>Day to replace in <var>AValue</var></short>
</element>

<!-- function Visibility: default -->
<element name="RecodeTime">
<short>Replace time part of a <var>TDateTime</var> value with another time.</short>
<descr>
<var>RecodeTime</var> replaces the time part of the timestamp <var>AValue</var>
with the date specified in <var>AHour</var>, <var>AMinute</var>,
<var>ASecond</var> and <var>AMilliSecond</var>. 
All other parts (the date part) of the date/time stamp are left untouched.
</descr>
<errors>
If one of the values <var>AHour</var>, <var>AMinute</var>, <var>ASecond</var>
<var>AMilliSecond</var> is not within a valid range then an <var>EConvertError</var> 
exception is raised.
</errors>
<seealso>
<link id="RecodeYear"/>
<link id="RecodeMonth"/>
<link id="RecodeDay"/>
<link id="RecodeHour"/>
<link id="RecodeMinute"/>
<link id="RecodeSecond"/>
<link id="RecodeMilliSecond"/>
<link id="RecodeDate"/>
<link id="RecodeDateTime"/>
</seealso>
<example file="datutex/ex95"/>
</element>

<!-- function result Visibility: default -->
<element name="RecodeTime.Result">
<short><var>AValue</var> with replaced time.</short>
</element>

<!-- argument Visibility: default -->
<element name="RecodeTime.AValue">
<short>Date/time to recode</short>
</element>

<!-- argument Visibility: default -->
<element name="RecodeTime.AHour">
<short>Hour to replace in <var>AValue</var></short>
</element>

<!-- argument Visibility: default -->
<element name="RecodeTime.AMinute">
<short>Minute to replace in <var>AValue</var></short>
</element>

<!-- argument Visibility: default -->
<element name="RecodeTime.ASecond">
<short>Second to replace in <var>AValue</var></short>
</element>

<!-- argument Visibility: default -->
<element name="RecodeTime.AMilliSecond">
<short>Millisecond to replace in <var>AValue</var></short>
</element>

<!-- function Visibility: default -->
<element name="RecodeDateTime">
<short>Replace selected parts of a <var>TDateTime</var> value with other values</short>
<descr>
<var>RecodeDateTime</var> replaces selected parts of the timestamp <var>AValue</var>
with the date/time values specified in <var>AYear</var>, <var>AMonth</var>,
<var>ADay</var>, <var>AHour</var>, <var>AMinute</var>, <var>ASecond</var> and 
<var>AMilliSecond</var>. If any of these values
equals the pre-defined constant <link id="RecodeLeaveFieldAsIs"/>, then 
the corresponding part of the date/time stamp is left untouched.
</descr>
<errors>
If one of the values <var>AYear</var>, <var>AMonth</var>,
<var>ADay</var>, <var>AHour</var>, <var>AMinute</var>, <var>ASecond</var>
<var>AMilliSecond</var> is not within a valid range (<var>RecodeLeaveFieldAsIs</var> excepted) 
then an <var>EConvertError</var> exception is raised.
</errors>
<seealso>
<link id="RecodeYear"/>
<link id="RecodeMonth"/>
<link id="RecodeDay"/>
<link id="RecodeHour"/>
<link id="RecodeMinute"/>
<link id="RecodeSecond"/>
<link id="RecodeMilliSecond"/>
<link id="RecodeDate"/>
<link id="RecodeTime"/>
<link id="TryRecodeDateTime"/>
</seealso>
<example file="datutex/ex96"/>
</element>

<!-- function result Visibility: default -->
<element name="RecodeDateTime.Result">
<short><var>AValue</var> with replaced parts</short>
</element>

<!-- argument Visibility: default -->
<element name="RecodeDateTime.AValue">
<short>Date/time to recode</short>
</element>

<!-- argument Visibility: default -->
<element name="RecodeDateTime.AYear">
<short>New value for year part</short>
</element>

<!-- argument Visibility: default -->
<element name="RecodeDateTime.AMonth">
<short>New value for month part</short>
</element>

<!-- argument Visibility: default -->
<element name="RecodeDateTime.ADay">
<short>New value for day part</short>
</element>

<!-- argument Visibility: default -->
<element name="RecodeDateTime.AHour">
<short>New value for hour part</short>
</element>

<!-- argument Visibility: default -->
<element name="RecodeDateTime.AMinute">
<short>New value for minute part</short>
</element>

<!-- argument Visibility: default -->
<element name="RecodeDateTime.ASecond">
<short>New value for second part</short>
</element>

<!-- argument Visibility: default -->
<element name="RecodeDateTime.AMilliSecond">
<short>New value for millisecond part</short>
</element>

<!-- function Visibility: default -->
<element name="TryRecodeDateTime">
<short>Replace selected parts of a <var>TDateTime</var> value with other values</short>
<descr>
<p>
<var>TryRecodeDateTime</var> replaces selected parts of the timestamp <var>AValue</var>
with the date/time values specified in <var>AYear</var>, <var>AMonth</var>,
<var>ADay</var>, <var>AHour</var>, <var>AMinute</var>, <var>ASecond</var> and 
<var>AMilliSecond</var>. If any of these values
equals the pre-defined constant <link id="RecodeLeaveFieldAsIs"/>, then 
the corresponding part of the date/time stamp is left untouched.
</p>
<p>
The resulting date/time is returned in <var>AValue</var>.
</p>
<p>
The function returns <var>True</var> if the encoding was succesful. It
returns <var>False</var> if one of the values <var>AYear</var>, <var>AMonth</var>,
<var>ADay</var>, <var>AHour</var>, <var>AMinute</var>, <var>ASecond</var>
<var>AMilliSecond</var> is not within a valid range.
</p>
</descr>
<seealso>
<link id="RecodeYear"/>
<link id="RecodeMonth"/>
<link id="RecodeDay"/>
<link id="RecodeHour"/>
<link id="RecodeMinute"/>
<link id="RecodeSecond"/>
<link id="RecodeMilliSecond"/>
<link id="RecodeDate"/>
<link id="RecodeTime"/>
<link id="RecodeDateTime"/>
</seealso>
<example file="datutex/ex97"/>
</element>

<!-- function result Visibility: default -->
<element name="TryRecodeDateTime.Result">
<short><var>True</var> if the recoding was succesful, <var>False</var> if not.</short>
</element>

<!-- argument Visibility: default -->
<element name="TryRecodeDateTime.AValue">
<short>Date/time to recode</short>
</element>

<!-- argument Visibility: default -->
<element name="TryRecodeDateTime.AYear">
<short>New value for year part</short>
</element>

<!-- argument Visibility: default -->
<element name="TryRecodeDateTime.AMonth">
<short>New value for month part</short>
</element>

<!-- argument Visibility: default -->
<element name="TryRecodeDateTime.ADay">
<short>New value for day part</short>
</element>

<!-- argument Visibility: default -->
<element name="TryRecodeDateTime.AHour">
<short>New value for hour part</short>
</element>

<!-- argument Visibility: default -->
<element name="TryRecodeDateTime.AMinute">
<short>New value for minute part</short>
</element>

<!-- argument Visibility: default -->
<element name="TryRecodeDateTime.ASecond">
<short>New value for second part</short>
</element>

<!-- argument Visibility: default -->
<element name="TryRecodeDateTime.AMilliSecond">
<short>New value for millisecond part</short>
</element>
<!-- argument Visibility: default -->
<element name="TryRecodeDateTime.AResult">
<short>Recoded <var>AValue</var>.</short>
</element>

<!-- function Visibility: default -->
<element name="CompareDateTime">
<short>Compare 2 dates, taking into account the time of day</short>
<descr>
<p>
<var>CompareDateTime</var> compares two timestamps <var>A</var> and
<var>B</var> and returns the following results:
</p>
<dl>
<dt>&lt; 0</dt><dd>if <var>A</var> is earlier in date/time than <var>B</var>.</dd>
<dt>0</dt><dd>if <var>A</var> and <var>B</var> are the same date/time .</dd>
<dt>&gt; 0</dt><dd>if <var>A</var> is later in date/time than <var>B</var>.</dd>
</dl>
</descr>
<seealso>
<link id="CompareTime"/>
<link id="CompareDate"/>
<link id="SameDate"/>
<link id="SameTime"/>
<link id="SameDateTime"/>
</seealso>
<example file="datutex/ex98"/>
</element>

<!-- function result Visibility: default -->
<element name="CompareDateTime.Result">
<short>A negative number if <var>A</var> is earlier than <var>B</var>, zero if they are equal, or positive if <var>A</var> is later than <var>B</var>.</short>
</element>

<!-- argument Visibility: default -->
<element name="CompareDateTime.A">
<short>First date-time to compare</short>
</element>

<!-- argument Visibility: default -->
<element name="CompareDateTime.B">
<short>First date-time to compare</short>
</element>

<!-- function Visibility: default -->
<element name="CompareDate">
<short>Compare 2 dates, disregarding the time of day</short>
<descr>
<p>
<var>CompareDate</var> compares the date parts of two timestamps <var>A</var> and
<var>B</var> and returns the following results:
</p>
<dl>
<dt>&lt; 0</dt><dd>if the day part of <var>A</var> is earlier than the day part of <var>B</var>.</dd>
<dt>0</dt><dd>if <var>A</var> and <var>B</var> are the on same day (times may differ) .</dd>
<dt>&gt; 0</dt><dd>if the day part of <var>A</var> is later than the day part of <var>B</var>.</dd>
</dl>
</descr>
<seealso>
<link id="CompareTime"/>
<link id="CompareDateTime"/>
<link id="SameDate"/>
<link id="SameTime"/>
<link id="SameDateTime"/>
</seealso>
<example file="datutex/ex99"/>
</element>

<!-- function result Visibility: default -->
<element name="CompareDate.Result">
<short>A negative number if date <var>A</var> is before <var>B</var>, zero if they are equal, or positive if <var>A</var> is after <var>B</var>.</short>
</element>

<!-- argument Visibility: default -->
<element name="CompareDate.A">
<short>First date to compare</short>
</element>

<!-- argument Visibility: default -->
<element name="CompareDate.B">
<short>Second date to compare</short>
</element>

<!-- function Visibility: default -->
<element name="CompareTime">
<short>Compares two times of the day, disregarding the date part.</short>
<descr>
<p>
<var>CompareTime</var> compares the time parts of two timestamps <var>A</var> and
<var>B</var> and returns the following results:
</p>
<dl>
<dt>&lt; 0</dt><dd>if the time part of <var>A</var> is earlier than the time part of <var>B</var>.</dd>
<dt>0</dt><dd>if <var>A</var> and <var>B</var> have the same time part (dates may differ) .</dd>
<dt>&gt; 0</dt><dd>if the time part of <var>A</var> is later than the time part of <var>B</var>.</dd>
</dl>
</descr>
<seealso>
<link id="CompareDateTime"/>
<link id="CompareDate"/>
<link id="SameDate"/>
<link id="SameTime"/>
<link id="SameDateTime"/>
</seealso>
<example file="datutex/ex100"/>
</element>

<!-- function result Visibility: default -->
<element name="CompareTime.Result">
<short>A negative number if <var>A</var> is before <var>B</var>, zero if they are equal, or positive <var>A</var> is later than <var>B</var>.</short>
</element>

<!-- argument Visibility: default -->
<element name="CompareTime.A">
<short>First time to compare</short>
</element>

<!-- argument Visibility: default -->
<element name="CompareTime.B">
<short>Second time to compare</short>
</element>

<!-- function Visibility: default -->
<element name="SameDateTime">
<short>Check whether two <var>TDateTime</var> values have the same date and time parts.</short>
<descr>
<p>
<var>SameDateTime</var> compares the date/time parts of two timestamps <var>A</var> and
<var>B</var> and returns <var>True</var> if they are equal, <var>False</var>
if they are not.
</p>
<p>
The function simply checks whether <link id="CompareDateTime"/> returns zero.
</p>
</descr>
<seealso>
<link id="CompareDateTime"/>
<link id="CompareDate"/>
<link id="CompareTime"/>
<link id="SameDate"/>
<link id="SameTime"/>
</seealso>
<example file="datutex/ex101"/>
</element>

<!-- function result Visibility: default -->
<element name="SameDateTime.Result">
<short><var>True</var> if <var>A</var> and <var>B</var> have the same date and time parts, <var>False</var> if not.</short>
</element>

<!-- argument Visibility: default -->
<element name="SameDateTime.A">
<short>First DateTime value</short>
</element>

<!-- argument Visibility: default -->
<element name="SameDateTime.B">
<short>Second DateTime value</short>
</element>

<!-- function Visibility: default -->
<element name="SameDate">
<short>Check whether two <var>TDateTime</var> values have the same date part.</short>
<descr>
<p>
<var>SameDate</var> compares the date parts of two timestamps <var>A</var> and
<var>B</var> and returns <var>True</var> if they are equal, <var>False</var>
if they are not.
</p>
<p>
The function simply checks whether <link id="CompareDate"/> returns zero.
</p>
</descr>
<seealso>
<link id="CompareDateTime"/>
<link id="CompareDate"/>
<link id="CompareTime"/>
<link id="SameDateTime"/>
<link id="SameTime"/>
</seealso>
<example file="datutex/ex102"/>
</element>

<!-- function result Visibility: default -->
<element name="SameDate.Result">
<short><var>True</var> if <var>A</var> and <var>B</var> have the same time part, <var>False</var> if not</short>
</element>

<!-- argument Visibility: default -->
<element name="SameDate.A">
<short>First DateTime value</short>
</element>

<!-- argument Visibility: default -->
<element name="SameDate.B">
<short>Second DateTime value</short>
</element>

<!-- function Visibility: default -->
<element name="SameTime">
<short>Check whether two <var>TDateTime</var> values have the same time part.</short>
<descr>
<p>
<var>SameTime</var> compares the time parts of two timestamps <var>A</var> and
<var>B</var> and returns <var>True</var> if they are equal, <var>False</var>
if they are not.
</p>
<p>
The function simply checks whether <link id="CompareTime"/> returns zero.
</p>
</descr>
<seealso>
<link id="CompareDateTime"/>
<link id="CompareDate"/>
<link id="CompareTime"/>
<link id="SameDateTime"/>
<link id="SameDate"/>
</seealso>
<example file="datutex/ex103"/>
</element>

<!-- function result Visibility: default -->
<element name="SameTime.Result">
<short><var>True</var> if <var>A</var> and <var>B</var> have the same time part, <var>False</var> if not.</short>
</element>

<!-- argument Visibility: default -->
<element name="SameTime.A">
<short>First DateTime value</short>
</element>

<!-- argument Visibility: default -->
<element name="SameTime.B">
<short>Second DateTime value</short>
</element>

<!-- function Visibility: default -->
<element name="NthDayOfWeek">
<short>Calculate which occurrence of weekday in the month a given day represents</short>
<descr>
<var>NthDayOfWeek</var> returns the occurrence of the weekday of <var>AValue</var> in the
month. This is the N-th time that this weekday occurs in the month (e.g. the
third saturday of the month).
</descr>
<seealso>
<link id="EncodeDateMonthWeek"/>
<link id="#rtl.sysutils.DayOfWeek"/>
<link id="DecodeDayOfWeekInMonth"/>
<link id="EncodeDayOfWeekInMonth"/>
<link id="TryEncodeDayOfWeekInMonth"/>
</seealso>
<example file="datutex/ex104"/>
</element>

<!-- function result Visibility: default -->
<element name="NthDayOfWeek.Result">
<short>Occurrence of weekday in the month of <var>AValue</var>.</short>
</element>

<!-- argument Visibility: default -->
<element name="NthDayOfWeek.AValue">
<short>Date to check.</short>
</element>

<!-- procedure Visibility: default -->
<element name="DecodeDayOfWeekInMonth">
<short>Decode a DateTime value in year, month, day of week parts</short>
<descr>
<var>DecodeDayOfWeekInMonth</var> decodes the date <var>AValue</var> in a
<var>AYear</var>, <var>AMonth</var>, <var>ADayOfweek</var> and
<var>ANthDayOfweek</var>.
(This is the N-th time that this weekday occurs in the month, e.g. the
third saturday of the month.)
</descr>
<seealso>
<link id="NthDayOfWeek"/>
<link id="EncodeDateMonthWeek"/>
<link id="#rtl.sysutils.DayOfWeek"/>
<link id="EncodeDayOfWeekInMonth"/>
<link id="TryEncodeDayOfWeekInMonth"/>
</seealso>
<example file="datutex/ex105"/>
</element>

<!-- argument Visibility: default -->
<element name="DecodeDayOfWeekInMonth.AValue">
<short>DateTime to decode</short>
</element>

<!-- argument Visibility: default -->
<element name="DecodeDayOfWeekInMonth.AYear">
<short>Returns the year part of <var>AValue</var>.</short>
</element>

<!-- argument Visibility: default -->
<element name="DecodeDayOfWeekInMonth.AMonth">
<short>Returns the month part of <var>AValue</var>.</short>
</element>

<!-- argument Visibility: default -->
<element name="DecodeDayOfWeekInMonth.ANthDayOfWeek">
<short>Returns which  <var>ADayofWeek</var> of <var>AValue</var>.</short>
</element>

<!-- argument Visibility: default -->
<element name="DecodeDayOfWeekInMonth.ADayOfWeek">
<short>Returns the day of week part of <var>AValue</var>.</short>
</element>

<!-- function Visibility: default -->
<element name="EncodeDayOfWeekInMonth">
<short>Encodes a year, month, week, day of week specification to a <var>TDateTime</var> value</short>
<descr>
<p>
<var>EncodeDayOfWeekInMonth</var> encodes <var>AYear</var>, <var>AMonth</var>, 
<var>ADayOfweek</var> and <var>ANthDayOfweek</var> to a valid date stamp and 
returns the result.
</p>
<p>
<var>ANthDayOfweek</var>is the N-th time that this weekday occurs in the month, e.g. the
third saturday of the month.
</p>
<p>
For an example, see <link id="DecodeDayOfWeekInMonth"/>.
</p>
</descr>
<errors>
If any of the values is not in range, then an <var>EConvertError</var>
exception will be raised.
</errors>
<seealso>
<link id="NthDayOfWeek"/>
<link id="EncodeDateMonthWeek"/>
<link id="#rtl.sysutils.DayOfWeek"/>
<link id="DecodeDayOfWeekInMonth"/>
<link id="TryEncodeDayOfWeekInMonth"/>
</seealso>
</element>

<!-- function result Visibility: default -->
<element name="EncodeDayOfWeekInMonth.Result">
<short><var>TDateTime</var> value representing <var>AYear</var> , <var>AMonth</var><var>ANthDayOfWeek</var> .and <var>ADayOfWeek</var>.</short>
</element>

<!-- argument Visibility: default -->
<element name="EncodeDayOfWeekInMonth.AYear">
<short>Year</short>
</element>

<!-- argument Visibility: default -->
<element name="EncodeDayOfWeekInMonth.AMonth">
<short>Month in the year</short>
</element>

<!-- argument Visibility: default -->
<element name="EncodeDayOfWeekInMonth.ANthDayOfWeek">
<short>Week in the month</short>
</element>

<!-- argument Visibility: default -->
<element name="EncodeDayOfWeekInMonth.ADayOfWeek">
<short>Day of the week</short>
</element>

<!-- function Visibility: default -->
<element name="TryEncodeDayOfWeekInMonth">
<short>Encode a year, month, week, day of week triplet to a <var>TDateTime</var> value</short>
<descr>
<p>
<var>EncodeDayOfWeekInMonth</var> encodes 
<var>AYear</var>, <var>AMonth</var>, <var>ADayOfweek</var> and
<var>ANthDayOfweek</var> to a valid date stamp and returns the result in
<var>AValue</var>.
</p>
<p>
<var>ANthDayOfweek</var>is the N-th time that this weekday occurs in the month, e.g. the
third saturday of the month.
</p>
<p>
The function returns <var>True</var> if the encoding was succesful,
<var>False</var> if any of the values is not in range.
</p>
</descr>
<seealso>
<link id="NthDayOfWeek"/>
<link id="EncodeDateMonthWeek"/>
<link id="#rtl.sysutils.DayOfWeek"/>
<link id="DecodeDayOfWeekInMonth"/>
<link id="EncodeDayOfWeekInMonth"/>
</seealso>
<example file="datutex/ex106"/>
</element>

<!-- function result Visibility: default -->
<element name="TryEncodeDayOfWeekInMonth.Result">
<short><var>True</var> if the encoding was succesful, <var>False</var> if not.</short>
</element>

<!-- argument Visibility: default -->
<element name="TryEncodeDayOfWeekInMonth.AYear">
<short>Year</short>
</element>

<!-- argument Visibility: default -->
<element name="TryEncodeDayOfWeekInMonth.AMonth">
<short>Month in year</short>
</element>

<!-- argument Visibility: default -->
<element name="TryEncodeDayOfWeekInMonth.ANthDayOfWeek">
<short>Day of week occurrence</short>
</element>

<!-- argument Visibility: default -->
<element name="TryEncodeDayOfWeekInMonth.ADayOfWeek">
<short>Day of week</short>
</element>

<!-- argument Visibility: default -->
<element name="TryEncodeDayOfWeekInMonth.AValue">
<short>Resulting TDateTime value</short>
</element>


<!-- argument Visibility: default -->
<element name="InvalidDateTimeError.ABaseDate">
<short>Base date time to use when creating the string representing the date/time. Default 0</short>
</element>

<!-- procedure Visibility: default -->
<element name="InvalidDateTimeError">
<short>Raise an <var>EConvertError</var> about an invalid date-time specification.</short>
<descr>
<p>
<var>InvalidDateTimeError</var> raises an <link id="#rtl.sysutils.EConvertError">EConvertError</link> 
exception and formats the error message with an appropriate description made
up from the parts <var>AYear</var>, <var>AMonth</var>,
<var>ADay</var>,<var>AHour</var>, <var>AMinute</var>, <var>ASecond</var> and 
<var>AMilliSecond</var>.
</p>
<p>
Normally this function should not be needed, the conversion routines call it
when they have received invalid arguments.
</p>
</descr>
<seealso>
<link id="InvalidDateWeekError"/>
<link id="InvalidDateDayError"/>
<link id="InvalidDateMonthWeekError"/>
<link id="InvalidDayOfWeekInMonthError"/>
</seealso>
</element>

<!-- argument Visibility: default -->
<element name="InvalidDateTimeError.AYear">
<short>Year</short>
</element>

<!-- argument Visibility: default -->
<element name="InvalidDateTimeError.AMonth">
<short>Month in the year</short>
</element>

<!-- argument Visibility: default -->
<element name="InvalidDateTimeError.ADay">
<short>Day of the month</short>
</element>

<!-- argument Visibility: default -->
<element name="InvalidDateTimeError.AHour">
<short>Hour of the day</short>
</element>

<!-- argument Visibility: default -->
<element name="InvalidDateTimeError.AMinute">
<short>Minute of the hour</short>
</element>

<!-- argument Visibility: default -->
<element name="InvalidDateTimeError.ASecond">
<short>Seconds in the minute</short>
</element>

<!-- argument Visibility: default -->
<element name="InvalidDateTimeError.AMilliSecond">
<short>Milliseconds in second</short>
</element>

<!-- procedure Visibility: default -->
<element name="InvalidDateWeekError">
<short>Raise an EConvertError with an invalid Year, WeekOfyear and DayOfWeek specification</short>
<descr>
<p>
<var>InvalidDateWeekError</var> raises an <link id="#rtl.sysutils.EConvertError">EConvertError</link> 
exception and formats the error message with an appropriate description made
up from the parts <var>AYear</var>, <var>AWeek</var>,
<var>ADayOfWeek</var>
</p>
<p>
Normally this function should not be needed, the conversion routines call it
when they have received invalid arguments.
</p>
</descr>
<seealso>
<link id="InvalidDateTimeError"/>
<link id="InvalidDateDayError"/>
<link id="InvalidDateMonthWeekError"/>
<link id="InvalidDayOfWeekInMonthError"/>
</seealso>
</element>

<element name="InvalidDateWeekError.AYear">
<short>The year</short>
</element>

<element name="InvalidDateWeekError.AWeekOfYear">
<short>The week</short>
</element>

<element name="InvalidDateWeekError.ADayOfweek">
<short>The day of theweek</short>
</element>

<!-- procedure Visibility: default -->
<element name="InvalidDateDayError">
<short>Raise an <var>EConvertError</var> exception when a day is not a valid day of a year.</short>
<descr>
<p>
<var>InvalidDateDayError</var> raises an <link id="#rtl.sysutils.EConvertError">EConvertError</link> 
exception and formats the error message with an appropriate description made
up from the parts <var>AYear</var> and <var>ADayOfYear</var>.
</p>
<p>
Normally this function should not be needed, the conversion routines call it
when they have received invalid arguments.
</p>
</descr>
<seealso>
<link id="InvalidDateWeekError"/>
<link id="InvalidDateTimeError"/>
<link id="InvalidDateMonthWeekError"/>
<link id="InvalidDayOfWeekInMonthError"/>
</seealso>
</element>

<!-- argument Visibility: default -->
<element name="InvalidDateDayError.AYear">
<short>Year</short>
</element>

<!-- argument Visibility: default -->
<element name="InvalidDateDayError.ADayOfYear">
<short>Invalid day of the year.</short>
</element>

<!-- procedure Visibility: default -->
<element name="InvalidDateMonthWeekError">
<short>Raise an <var>EConvertError</var> exception when a Year,Month,WeekOfMonth,DayofWeek is invalid.</short>
<descr>
<p>
<var>InvalidDateMonthWeekError</var> raises an <link id="#rtl.sysutils.EConvertError">EConvertError</link> 
exception and formats the error message with an appropriate description made
up from the parts <var>AYear</var>, <var>Amonth</var>,
<var>AWeekOfMonth</var> and <var>ADayOfWeek</var>.
</p>
<p>
Normally this function should not be needed, the conversion routines call it
when they have received invalid arguments.
</p>
</descr>
<seealso>
<link id="InvalidDateWeekError"/>
<link id="InvalidDateTimeError"/>
<link id="InvalidDateDayError"/>
<link id="InvalidDayOfWeekInMonthError"/>
</seealso>
</element>

<!-- argument Visibility: default -->
<element name="InvalidDateMonthWeekError.AYear">
<short>Year</short>
</element>

<!-- argument Visibility: default -->
<element name="InvalidDateMonthWeekError.AMonth">
<short>Month of the year</short>
</element>

<!-- argument Visibility: default -->
<element name="InvalidDateMonthWeekError.AWeekOfMonth">
<short>Week of the month</short>
</element>

<!-- argument Visibility: default -->
<element name="InvalidDateMonthWeekError.ADayOfWeek">
<short>Day of the week</short>
</element>

<!-- procedure Visibility: default -->
<element name="InvalidDayOfWeekInMonthError">
<short>Raise an <var>EConvertError</var> exception when a Year,Month,NthDayofWeek,DayofWeek is invalid.</short>
<descr>
<p>
<var>InvalidDayOfWeekInMonthError</var> raises an <link id="#rtl.sysutils.EConvertError">EConvertError</link> 
exception and formats the error message with an appropriate description made
up from the parts <var>AYear</var>, <var>Amonth</var>,
<var>ANthDayOfWeek</var> and <var>ADayOfWeek</var>.
</p>
<p>
Normally this function should not be needed, the conversion routines call it
when they have received invalid arguments.
</p>
</descr>
<seealso>
<link id="InvalidDateWeekError"/>
<link id="InvalidDateTimeError"/>
<link id="InvalidDateDayError"/>
<link id="InvalidDateMonthWeekError"/>
</seealso>
</element>

<!-- argument Visibility: default -->
<element name="InvalidDayOfWeekInMonthError.AYear">
<short>Year</short>
</element>

<!-- argument Visibility: default -->
<element name="InvalidDayOfWeekInMonthError.AMonth">
<short>Month in the year</short>
</element>

<!-- argument Visibility: default -->
<element name="InvalidDayOfWeekInMonthError.ANthDayOfWeek">
<short>Nth occurrence of day of week.</short>
</element>

<!-- argument Visibility: default -->
<element name="InvalidDayOfWeekInMonthError.ADayOfWeek">
<short>Day of week.</short>
</element>

<!-- function Visibility: default -->
<element name="DateTimeToJulianDate">
<short>Converts a TDateTime value to a Julian date representation</short>
<descr>
<var>DateTimeToJulianDate</var> converts the <var>AValue</var> date/time
indication to a julian (as opposed to Gregorian) date.
</descr>
<seealso>
<link id="JulianDateToDateTime"/>
<link id="TryJulianDateToDateTime"/>
<link id="DateTimeToModifiedJulianDate"/>
<link id="TryModifiedJulianDateToDateTime"/>
</seealso>
</element>

<!-- function result Visibility: default -->
<element name="DateTimeToJulianDate.Result">
<short>Julian representation of <var>AValue</var>.</short>
</element>

<!-- argument Visibility: default -->
<element name="DateTimeToJulianDate.AValue">
<short>DateTime value to convert to Julian representation</short>
</element>

<!-- function Visibility: default -->
<element name="JulianDateToDateTime">
<short>Convert a Julian date representation to a <var>TDateTime</var> value.</short>
<descr>
<var>JulianDateToDateTime</var> converts the Julian <var>AValue</var> date/time
indication to a regular <var>TDateTime</var> date/time indication.
</descr>
<seealso>
<link id="DateTimeToJulianDate"/>
<link id="TryJulianDateToDateTime"/>
<link id="DateTimeToModifiedJulianDate"/>
<link id="TryModifiedJulianDateToDateTime"/>
</seealso>
</element>

<!-- function result Visibility: default -->
<element name="JulianDateToDateTime.Result">
<short>Resulting <var>TDateTime</var></short>
</element>

<!-- argument Visibility: default -->
<element name="JulianDateToDateTime.AValue">
<short>Date in Julian notation</short>
</element>

<!-- function Visibility: default -->
<element name="TryJulianDateToDateTime">
<short>Convert a Julian date representation to a <var>TDateTime</var> value.</short>
<descr>
Try to convert a Julian date to a regular <var>TDateTime</var> date/time representation.
</descr>
<seealso>
<link id="DateTimeToJulianDate"/>
<link id="JulianDateToDateTime"/>
<link id="DateTimeToModifiedJulianDate"/>
<link id="TryModifiedJulianDateToDateTime"/>
</seealso>
</element>

<!-- function result Visibility: default -->
<element name="TryJulianDateToDateTime.Result">
<short><var>True</var> if the conversion was succesful, <var>False</var> if not.</short>
</element>

<!-- argument Visibility: default -->
<element name="TryJulianDateToDateTime.AValue">
<short>Date in Julian notation</short>
</element>

<!-- argument Visibility: default -->
<element name="TryJulianDateToDateTime.ADateTime">
<short>Resulting <var>TDateTime</var> equivalent</short>
</element>

<!-- function Visibility: default -->
<element name="DateTimeToModifiedJulianDate">
<short>Convert a <var>TDateTime</var> value to a modified Julian date representation</short>
<descr>
Not yet implemented.
</descr>
<errors>
Currently, trying to use this function will raise an exception.
</errors>
<seealso>
<link id="DateTimeToJulianDate"/>
<link id="JulianDateToDateTime"/>
<link id="TryJulianDateToDateTime"/>
<link id="TryModifiedJulianDateToDateTime"/>
</seealso>
</element>

<!-- function result Visibility: default -->
<element name="DateTimeToModifiedJulianDate.Result">
<short>Modified Julian representation of <var>AValue</var>.</short>
</element>

<!-- argument Visibility: default -->
<element name="DateTimeToModifiedJulianDate.AValue">
<short>DateTime value to convert to Modified Julian representation</short>
</element>

<!-- function Visibility: default -->
<element name="ModifiedJulianDateToDateTime">
<short>Convert a modified Julian date representation to a <var>TDateTime</var> value.</short>
<descr>
Not yet implemented.
</descr>
<errors>
Currently, trying to use this function will raise an exception.
</errors>
<seealso>
<link id="DateTimeToJulianDate"/>
<link id="JulianDateToDateTime"/>
<link id="TryJulianDateToDateTime"/>
<link id="DateTimeToModifiedJulianDate"/>
<link id="TryModifiedJulianDateToDateTime"/>
</seealso>
</element>

<!-- function result Visibility: default -->
<element name="ModifiedJulianDateToDateTime.Result">
<short><var>AValue</var> in modified Julian date notation.</short>
</element>

<!-- argument Visibility: default -->
<element name="ModifiedJulianDateToDateTime.AValue">
<short>Date to convert</short>
</element>

<!-- function Visibility: default -->
<element name="TryModifiedJulianDateToDateTime">
<short>Convert a modified Julian date representation to a <var>TDateTime</var> value.</short>
<descr>
Not yet implemented.
</descr>
<errors>
Currently, trying to use this function will raise an exception.
</errors>
<seealso>
<link id="DateTimeToJulianDate"/>
<link id="JulianDateToDateTime"/>
<link id="TryJulianDateToDateTime"/>
<link id="DateTimeToModifiedJulianDate"/>
<link id="ModifiedJulianDateToDateTime"/>
</seealso>
</element>

<!-- function result Visibility: default -->
<element name="TryModifiedJulianDateToDateTime.Result">
<short><var>True</var> if the conversion was succesful, <var>False</var> if not.</short>
</element>

<!-- argument Visibility: default -->
<element name="TryModifiedJulianDateToDateTime.AValue">
<short>Modified Julian date to convert</short>
</element>

<!-- argument Visibility: default -->
<element name="TryModifiedJulianDateToDateTime.ADateTime">
<short><var>AValue</var> as a <var>TDateTime</var> value.</short>
</element>

<!-- function Visibility: default -->
<element name="DateTimeToUnix">
<short>Convert a <var>TDateTime</var> value to Unix epoch time</short>
<descr>
<var>DateTimeToUnix</var> converts a <var>TDateTime</var> value to a epoch
time (i.e. the number of seconds elapsed since 1/1/1970).
</descr>
<seealso>
<link id="UnixToDateTime"/>
</seealso>
</element>

<!-- function result Visibility: default -->
<element name="DateTimeToUnix.Result">
<short>Unix epoch time corresponding to <var>AValue</var></short>
</element>

<!-- argument Visibility: default -->
<element name="DateTimeToUnix.AValue">
<short>DateTime value to convert</short>
</element>

<!-- function Visibility: default -->
<element name="UnixToDateTime">
<short>Convert Unix epoch time to a <var>TDateTime</var> value</short>
<descr>
<var>UnixToDateTime</var> converts epoch time (seconds elapsed since 1/1/1970)
to a <var>TDateTime</var> value.
</descr>
<seealso>
<link id="DateTimeToUnix"/>
</seealso>
</element>

<!-- function result Visibility: default -->
<element name="UnixToDateTime.Result">
<short><var>AValue</var> as a <var>TDateTime</var> value.</short>
</element>

<!-- argument Visibility: default -->
<element name="UnixToDateTime.AValue">
<short>Date to convert.</short>
</element>

<!-- unresolved type reference Visibility: default -->
<element name="SysUtils">
<short>Exception support</short>
</element>

<!-- unresolved type reference Visibility: default -->
<element name="Math">
<short>Math support</short>
</element>

<!-- unresolved type reference Visibility: default -->
<element name="Types">
<short>Extra types</short>
</element>

<!-- function Visibility: default -->
<element name="UnixTimeStampToMac">
<short>Convert Unix Timestamp to a Mac Timestamp</short>
<descr>
<var>UnixTimeStampToMac</var> converts the unix epoch time 
in <var>AValue</var> to a valid Mac timestamp indication and returns the result.
</descr>
<errors>
None.
</errors>
<seealso>
<link id="DateTimeToMac"/>
<link id="MacToDateTime"/>
<link id="MacTimeStampToUnix"/>
</seealso>
</element>

<!-- function Visibility: default -->
<element name="DateTimeToMac">
<short>Convert a <var>TDateTime</var> timestamp to a Mac timestamp</short>
<descr>
<var>DateTimeToMac</var> converts the <var>TDateTime</var> value <var>AValue</var> 
to a valid  Mac timestamp indication and returns the result. 
</descr>
<errors>
None.
</errors>
<seealso>
<link id="UnixTimeStampToMac"/>
<link id="MacToDateTime"/>
<link id="MacTimeStampToUnix"/>
</seealso>
</element>

<!-- function Visibility: default -->
<element name="MacToDateTime">
<short>Convert a Mac timestamp to a <var>TDateTime</var> timestamp</short>
<descr>
<var>MacToDateTime</var> converts the Mac timestamp indication in <var>AValue</var>
to a valid <var>TDateTime</var> indication.
</descr>
<errors>
None.
</errors>
<seealso>
<link id="UnixTimeStampToMac"/>
<link id="DateTimeToMac"/>
<link id="MacTimeStampToUnix"/>
</seealso>
</element>

<!-- function Visibility: default -->
<element name="MacTimeStampToUnix">
<short>Convert a Mac timestamp to a Unix timestamp</short>
<descr>
<var>MacTimeStampToUnix</var> converts the Mac timestamp 
indication in <var>AValue</var> to a unix timestamp indication (epoch time)
</descr>
<errors>
None.
</errors>
<seealso>
<link id="UnixTimeStampToMac"/>
<link id="DateTimeToMac"/>
<link id="MacToDateTime"/>
</seealso>
</element>
<!--
function ScanDateTime(const Pattern:string;const s:string;const fmt:TFormatSettings;startpos:integer=1) : tdatetim
function ScanDateTime(const Pattern:string;const s:string;startpos:integer=1) : tdatetime; overload;
  -->
  
<element name="ScanDateTime">
<short>Scans a string for a DateTime pattern and returns the date/time</short>
<descr>
<p>
<var>ScanDateTime</var> scans string <var>S</var> for the date/time pattern
<var>Pattern</var>, starting at position <var>StartPos</var> (default 1).
Optionally, the format settings <var>fmt</var> can be specified.
</p>
<p>
In effect, this function does the opposite of what <link
id="#rtl.sysutils.FormatDateTime">FormatDateTime</link> does. The <var>Pattern</var> variable must contain a
valid date/time pattern: note that not all possible formatdatetime patterns 
can be recognized, e.g., <var>hn</var> cannot be detected properly.
</p>
</descr>
<errors>
In case of an error, a <link id="#rtl.sysutils.EConvertError">EConvertError</link> exception is raised.
</errors>
<seealso>
<link id="#rtl.sysutils.FormatDateTime">FormatDateTime</link>
</seealso>
</element>

<element name="DateTimeToDosDateTime">
<short>Convert <var>TDateTime</var> format to DOS date/time format</short>
<descr>
<p>
<var>DateTimeToDosDatetime</var> takes <var>Value</var>, a <var>TDateTime</var> formatted
timestamp, and recodes it to a MS-DOS encoded date/time value. This is a
longint with the date/time encoded in the bits as:
</p>
<dl>
<dt>0-4</dt><dd>Seconds divided by 2</dd>
<dt>5-10</dt><dd>Minutes</dd>
<dt>11-15</dt><dd>Hours</dd>
<dt>16-20</dt><dd>Day</dd>
<dt>21-24</dt><dd>Month</dd>
<dt>25-31</dt><dd>Years since 1980</dd>
</dl>
</descr>
<seealso>
<link id="DosDateTimeToDateTime"/>
</seealso>
</element>

<element name="DosDateTimeToDateTime">
<short>Convert DOS date/time format to  <var>TDateTime</var> format</short>
<descr>
<p><var>DosDateTimeToDateTime</var> takes a DOS encoded date/time
<var>AValue</var> and recodes it as a <var>TDateTime</var> value.
</p>
<p>
The bit encoding of the DOS date/time is explained in the <link
id="DateTimeToDosDateTime"/> function.
</p>
</descr>
<seealso>
<link id="DateTimeToDosDateTime"/>
</seealso>
</element>

<!-- function Visibility: default -->
<element name="IsSameMonth">
<short>Check if 2 dates are in the same month.</short>
<descr> 
<var>IsSameMonth</var> will return <var>True</var> if the two dates 
<var>Avalue</var> and <var>ABasis</var> occur in the same year and month.
(i.e. if their month and year parts match). Otherwise, <var>False</var> is
returned.
</descr>
<seealso> 
<link id="IsSameDay"/>
<link id="IsToday"/>
<link id="SameDate"/>
</seealso>
</element>

<!-- function Visibility: default --> 
<element name="TryEncodeTimeInterval">
<short>Try to encode an interval as a <var>TDateTime</var> value.</short>
<descr> 
<var>TryEncodeTimeInterval</var> encodes a time interval expressed in
<var>Hour</var>, <var>Min</var>, <var>Sec</var>, <var>MSec</var> as a
<var>TDateTime</var> value and returns the value in <var>Time</var>. It
returns <var>True</var> if <var>Min</var>, <var>Sec</var>, <var>MSec</var>
contain valid time values (i.e. less than 60, 60 resp. MSec). The number of
hours may be larger than 24.
</descr>
<seealso> 
<link id="EncodeTimeInterval"/>
</seealso>
</element>

<!-- function Visibility: default -->
<element name="EncodeTimeInterval">
<short>Encode an interval as a <var>TDateTime</var> value.</short>
<descr> 
<var>EncodeTimeInterval</var> encodes a time interval expressed in
<var>Hour</var>, <var>Min</var>, <var>Sec</var>, <var>MSec</var> as a
<var>TDateTime</var> value and returns the value in <var>Time</var>.
</descr>
<errors>
If <var>Min</var>, <var>Sec</var>, <var>MSec</var> do not contain a valid
time indication, then an <var>EConvertError</var> exception is raised.   
</errors>
<seealso> 
<link id="TryEncodeTimeInterval"/>  
</seealso>
</element>

<!-- function Visibility: default -->
<element name="UniversalTimeToLocal">
<short>Convert UTC time to local time</short>
<descr>
<p>
<var>UniversalTimeToLocal</var> converts a universal time indication to a local time:
it applies the <var>TZOffset</var> timezone offset to the <var>UT</var> Universal time (UTC).
If no <var>TZOffset</var> is specified, the local time offset as returned by
<link id="GetLocalTimeOffset"/> is used.
</p>
<p>
Note that for times in the past or in the future, or for timezones with DST,
omitting the <var>TZoffset</var> may lead to wrong results, as the current 
timezone offset is used. Calculation of the correct timezone offset for a
given date is very complicated, and outside the scope of this call.
</p>
</descr>
<seealso>
<link id="GetLocalTimeOffset"/>
<link id="LocalTimeToUniversal"/>
</seealso>
</element>

<!-- function Visibility: default -->
<element name="LocalTimeToUniversal">
<short>Convert local time to UTC time</short>
<descr>
<p>
<var>UniversalTimeToLocal</var> converts a local time indication to a universal time
indication: it undoes the <var>TZOffset</var> timezone offset from the <var>UT</var> 
Universal time (UTC). 
If no <var>TZOffset</var> is specified, the local time offset as returned by 
<link id="GetLocalTimeOffset"/> is used.
</p>
<p>
Note that for times in the past or in the future, or for time zones with DST,
omitting the <var>TZoffset</var> may lead to wrong results, as the current 
timezone offset is used.  Calculation of the correct timezone offset for a 
given date is very complicated, and outside the scope of this call.
</p>
</descr>
<seealso>
<link id="GetLocalTimeOffset"/>
<link id="UniversalTimeToLocal"/> 
</seealso>
</element>

<!-- procedure Visibility: default -->
<element name="PeriodBetween">
<short>Return the period (in years, months, days) between two dates</short>
<descr>
<p>
<var>PeriodBetween</var> returns the timespan between 2 dates (<var>ANow</var> and
<var>AThen</var>), expressed as a number of years, months and days  in the parameters 
<var>Years</var>, <var>months</var> and <var>days</var>. 
Only complete years, months and days are reported. 
</p>
<p>
If <var>ANow</var> is before <var>AThen</var>, their values are reversed so
the result is always positive.
</p>
</descr>
<seealso>
<link id="YearsBetween"/>
<link id="MonthsBetween"/>
<link id="WeeksBetween"/>
<link id="DaysBetween"/>
</seealso>
</element>

</module>

<!-- dateutils -->
</package>
</fpdoc-descriptions>
